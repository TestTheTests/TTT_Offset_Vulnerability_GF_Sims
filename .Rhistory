coalescent.plot(n=10,ngen= 10,col.order="alternating")
require(brms)
zinb <- read.csv("http://stats.idre.ucla.edu/stat/data/fish.csv")
zinb$camper <- factor(zinb$camper, labels = c("no", "yes"))
head(zinb)
fit_zinb1 <- brm(count ~ persons + child + camper, data = zinb,
family = zero_inflated_poisson("log"))
summary(fit_zinb1)
require(brms)
zinb <- read.csv("http://stats.idre.ucla.edu/stat/data/fish.csv")
zinb$camper <- factor(zinb$camper, labels = c("no", "yes"))
head(zinb)
fit_zinb1 <- brm(count ~ persons + child + camper, data = zinb,
family = zero_inflated_poisson("log"))
summary(fit_zinb1)
#Example 2
data("rent99", package = "gamlss.data")
install.packages("gamlss.data")
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 2, cores = 2)
#Example 2
data("rent99", package = "gamlss.data")
head(rent99)
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 2, cores = 2)
rstan:::get_CXX()
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 4, cores = 2)
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 1, cores = 2)
devtools::install_github("stan-dev/rstan", ref = "develop", subdir =
"rstan/rstan")
require(brms)
#Example 2
data("rent99", package = "gamlss.data")
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 1, cores = 2)
install.packages("rstanarm", type = "source")
require(brms)
#Example 2
data("rent99", package = "gamlss.data")
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 1, cores = 2)
install.packages("StanHeaders")
install.packages("StanHeaders")
install.packages("StanHeaders")
install.packages("StanHeaders")
install.packages(c("bayesplot", "bigreadr", "BiocManager", "calibrate", "caTools", "classInt", "covr", "curl", "data.table", "DT", "e1071", "fields", "foghorn", "future", "gdtools", "gstat", "haven", "hexbin", "highlight", "hms", "htmltools", "htmlwidgets", "httpuv", "igraph", "jomo", "jpeg", "KernSmooth", "knitr", "later", "leaflet", "magick", "maptools", "Matrix", "mgcv", "nlme", "pbapply", "pingr", "promises", "purrr", "quadprog", "R.oo", "raster", "RcppArmadillo", "rgdal", "rgeos", "RgoogleMaps", "rmarkdown", "roxygen2", "rrcov", "RSpectra", "rvest", "selectr", "seqinr", "sf", "shiny", "sp", "spam", "spData", "spdep", "stringdist", "survival", "sys", "testthat", "tidyr", "tidyverse", "tinytex", "tmap", "units", "vegan", "webshot", "whisker", "xfun"))
require(StanHeaders)
require(brms)
require(rstan)
require(StanHeaders)
#Example 2
data("rent99", package = "gamlss.data")
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 1, cores = 2)
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 1, cores = 2)
rstan_options(auto_write = TRUE)
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 1, cores = 2)
#Example 1
zinb <- read.csv("http://stats.idre.ucla.edu/stat/data/fish.csv")
zinb$camper <- factor(zinb$camper, labels = c("no", "yes"))
head(zinb)
fit_zinb1 <- brm(count ~ persons + child + camper, data = zinb,
family = zero_inflated_poisson("log"))
marginal_effects(fit_zinb1)
fit_zinb2 <- brm(bf(count ~ persons + child + camper, zi ~ child),
data = zinb, family = zero_inflated_poisson())
summary(fit_zinb2)
loo(fit_zinb1, fit_zinb2)
#Example 2
data("rent99", package = "gamlss.data")
head(rent99)
fit_zinb2 <- brm(bf(count ~ persons + child + camper, zi ~ child),
data = zinb, family = zero_inflated_poisson())
summary(fit_rent1)
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99)
marginal_effects(fit_rent1, surface = TRUE)
bform <- bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district))
fit_rent2 <- brm(bform, data = rent99)#, chains = 2, cores = 2)
require(brms)
require(rstan)
require(StanHeaders)
fit_rent2 <- brm(bform, data = rent99, chains = 2)#, cores = 2)
require(brms)
#Example 2
data("rent99", package = "gamlss.data")
bform <- bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district))
fit_rent2 <- brm(bform, data = rent99, chains = 2)#, cores = 2)
rstan:::get_CXX()
pkgbuild::has_build_tools(debug = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=corei7 -mtune=corei7" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
library("rstan")
require(brms)
bform <- bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district))
fit_rent2 <- brm(bform, data = rent99, chains = 2)#, cores = 2)
install.packages(c('Rcpp', 'RcppArmadillo'))
install.packages(c("Rcpp", "RcppArmadillo"))
install.packages(c("Rcpp", "RcppArmadillo"))
install.packages(c('Rcpp', 'RcppArmadillo'))
require(brms)
#Example 2
data("rent99", package = "gamlss.data")
head(rent99)
bform <- bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district))
fit_rent2 <- brm(bform, data = rent99, chains = 2)#, cores = 2)
require(brms)
require(Rcpp)
require(RcppArmadillo)
require(rstan)
require(StanHeaders)
rstan_options(auto_write = TRUE)
bform <- bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district))
fit_rent2 <- brm(bform, data = rent99, chains = 2)#, cores = 2)
fit_rent2 <- brm(bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district)), data = rent99, chains = 2)#, cores = 2)
fit_rent2 <- brm(bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district)), data = rent99)#, chains = 2, cores = 2)
require(brms)
#Example 2
data("rent99", package = "gamlss.data")
fit_rent2 <- brm(bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district)), data = rent99, chains = 2)#, cores = 2)
require(brms)
#Example 2
data("rent99", package = "gamlss.data")
head(rent99)
fit_rent2 <- brm(bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district)), data = rent99, chains = 2)#, cores = 2)
rm(list=ls())
# for now don't worry about the math,
# just look at the plot after the function
get_fitness_from_env_m2 <- function(env, s){
fitness <- c()
fitness[env<5] <-  1 + s*env[env<5]
fitness[env>=5] <- 1 + s*5 + -4*s*(env[env>=5]-5)
return(fitness)
}
# In this case I am considering a type of thermal performance curve
# approximated with two linear functions
env <- -5:8
plot(env, get_fitness_from_env_m2(env, 0.1),
type="l", col=colfunc(10), lwd=2,
xlab="Environment", ylab="Fitness conferred by mutation")
abline(h=1)
?colorRampPalette
colfunc<-colorRampPalette(c("orange","cyan"))
env <- -5:8
plot(env, get_fitness_from_env_m2(env, 0.1),
type="l", col=colfunc(10), lwd=2,
xlab="Environment", ylab="Fitness conferred by mutation")
abline(h=1)
env_fit<-data.frame(env, get_fitness_from_env_m2(env, 0.1))
env_fit$Col <- c(1:10,20,20,20,20)
ggplot(data=env_fit,aes(x = env_fit$env, y = env_fit$get_fitness_from_env_m2.env..0.1., colour=env_fit$Col)) +
geom_line(size = 2)  +
scale_colour_gradient2(low="orange", mid="cyan",high="red",midpoint =10,guide=F)+
theme(legend.position="none")+
xlab("Environment")+
scale_x_discrete(limits=c(seq(-4,8.5,2)))+
ylab("Relative Fitness conferred by mutation")+
#coord_cartesian(xlim=c(-4,8),ylim=c(0.4,1.5),expand = T)+
#ylim(0.2,1.6)+
scale_y_continuous(breaks = c(.4,.6,.8,1,1.2,1.4), limits=c(0.3,1.5))+
theme_bw(base_size = 16)+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),)+
theme(axis.title.y = element_text(size=14))
require(ggplot2)
env_fit<-data.frame(env, get_fitness_from_env_m2(env, 0.1))
env_fit$Col <- c(1:10,20,20,20,20)
ggplot(data=env_fit,aes(x = env_fit$env, y = env_fit$get_fitness_from_env_m2.env..0.1., colour=env_fit$Col)) +
geom_line(size = 2)  +
scale_colour_gradient2(low="orange", mid="cyan",high="red",midpoint =10,guide=F)+
theme(legend.position="none")+
xlab("Environment")+
scale_x_discrete(limits=c(seq(-4,8.5,2)))+
ylab("Relative Fitness conferred by mutation")+
#coord_cartesian(xlim=c(-4,8),ylim=c(0.4,1.5),expand = T)+
#ylim(0.2,1.6)+
scale_y_continuous(breaks = c(.4,.6,.8,1,1.2,1.4), limits=c(0.3,1.5))+
theme_bw(base_size = 16)+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),)+
theme(axis.title.y = element_text(size=14))
ggplot(data=env_fit,aes(x = env_fit$env, y = 1, colour=env_fit$Col)) +
geom_line(size = 2)  +
scale_colour_gradient2(low="orange", mid="cyan",high="red",midpoint =10,guide=F)+
theme(legend.position="none")+
xlab("Environment")+
scale_x_discrete(limits=c(seq(-4,8.5,2)))+
ylab("Relative Fitness conferred by mutation")+
#coord_cartesian(xlim=c(-4,8),ylim=c(0.4,1.5),expand = T)+
#ylim(0.2,1.6)+
scale_y_continuous(breaks = c(.4,.6,.8,1,1.2,1.4), limits=c(0.3,1.5))+
theme_bw(base_size = 16)+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),)+
theme(axis.title.y = element_text(size=14))
load("~/Desktop/1593909929523.RData")
fs2<-rowsum(fff2[-1,-c(1:3)],fff2$names2[-1])
plot(fs2$V2, type="l",lwd=2,xlab="Optima",ylab="Mutant allele frequency",col=hsv(0.12,sum(fs2$V2)+0.5),ylim=c(0,4))
for(i in 2:ncol(fs2)){
lines(fs2[,i],lwd=2,col="green")
}
View(fs2)
View(fs2)
fs2$V2
fff2$names2[-1]
names
names2
str(fff1)
getwd()
setwd("~/Downloads/LittorinaThermal2019")
setwd("/Users/akijarl/Downloads/LittorinaThermal2019")
setwd("~/Downloads/")
library(tidyverse)
library(lme4)
install.packages("blme")
library(blme)
litt <- read.csv("LittorinaData.csv") %>%
rename(Spp = Genus_Species)
mort_B23 <- litt %>%
filter(PreTrtMortNotes == "") %>%
# remove larvae that died during acclimation or were misidentified
filter(Block == 2 | Block == 3) %>%
rename("24" = TrtDay1_Survived, "48" = TrtDay2_Survived) %>%
# convert trt days to hours
mutate("0" = TRUE) %>%
# add time point 0 where all samples were alive
gather("0", "24", "48", key = "Time_hrs", value = "Survived") %>%
# transform wide data to long data
mutate(Alive = as.integer(Survived)) %>%
# convert T/F to 1/0
mutate(Dead = ifelse(Alive == 1, 0, 1))
View(mort_B23)
mort1 <- glmer(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.001))
mort1 <- glmer(cbind(Alive, Dead) ~ Spp + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.001))
mort1 <- bglmer(cbind(Alive, Dead) ~ Spp + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.001))
mort1 <- glmer(cbind(Alive, Dead) ~ Spp + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23)
mort1 <- glmer(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.001))
help("converge")
help("convergence")
View(mort1)
mort1 <- glmer(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
check.conv.grad =.makeCC("warning", tol = 1e-2),
tol = 0.001))
mort1 <- lme4(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.001))
?lme4
require(lme4)
?lme4()
mort1 <- lme4(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.001))
mort1 <- nlme(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.001))
mort1 <- nlmer(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.001))
mort1 <- nlmer(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
)
mort1 <- glmer(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23)
?converge_ok()
??converge_ok()
install.packages("sjstats")
library(sjstats)
?converge_ok()
??converge_ok()
library(sjmisc)
mort1 <- glmer(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.001))
converge_ok(mort1)
library(sjmisc)
library(lme4)
?converge_ok
library(sjmisc)
library(lme4)
data(efc)
# create binary response
efc$hi_qol <- dicho(efc$quol_5)
# prepare group variable
efc$grp = as.factor(efc$e15relat)
# data frame for fitted model
mydf <- data.frame(hi_qol = as.factor(efc$hi_qol),
sex = as.factor(efc$c161sex),
c12hour = as.numeric(efc$c12hour),
neg_c_7 = as.numeric(efc$neg_c_7),
grp = efc$grp)
# fit glmer
fit <- glmer(hi_qol ~ sex + c12hour + neg_c_7 + (1|grp),
data = mydf, family = binomial("logit"))
converge_ok(fit)
sumary(mort1)
summary(mort1)
mort1 <- glmer(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.1))
mort1 <- glmer(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.01))
mort1 <- glmer(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.001))
mort1 <- glmer(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|SampleID),
family = binomial(),
data = mort_B23,
control = glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 10000),
tol = 0.0001))
library(devtools)
devtools::install_github("sjPlot/sjstats")
#mort1 <- glmer(cbind(Alive, Dead) ~ Spp + PopID + Trt + Time_hrs + (1|Block) + (1|Seatable) + (1|SampleID),
#               family = binomial(),
#               data = mort_B23,
#               control = glmerControl(optimizer = "bobyqa",
#                                       optCtrl = list(maxfun = 10000),
#                                       tol = 0.001))
require(sjstats)
?convergence
convergence(mort1)
convergence
converge_ok
?converge_ok
?chisq_gof
install.packages(c("ade4", "adegenet", "adehabitatLT", "adehabitatMA", "bigassertr", "bigsnpr", "bigstatsr", "bit", "boot", "bridgesampling", "brms", "callr", "caTools", "checkmate", "class", "covr", "crosstalk", "data.table", "deldir", "devtools", "DT", "farver", "fasterize", "fields", "foreach", "foreign", "fs", "future", "gdalUtils", "gdm", "ggplot2", "ggrepel", "ggridges", "gh", "globals", "gplots", "gstat", "hexbin", "highlight", "igraph", "jsonlite", "knitr", "lattice", "latticeExtra", "leafpop", "lintr", "listenv", "loo", "lwgeom", "magick", "MASS", "matrixStats", "memuse", "mice", "mime", "mnormt", "modEvA", "nlme", "nnet", "ordinal", "phytools", "pkgdown", "plotrix", "prettyunits", "processx", "ps", "psych", "R.methodsS3", "R.utils", "raster", "rasterVis", "RcppArmadillo", "remotes", "RgoogleMaps", "rmarkdown", "rmio", "robust", "robustbase", "roxygen2", "rrcov", "rsconnect", "rstanarm", "rstudioapi", "rversions", "satellite", "sf", "shiny", "shinyjs", "sp", "spacetime", "spam", "spData", "StanHeaders", "survival", "svglite", "testthat", "threejs", "tinytex", "tmap", "units", "uuid", "V8", "vcfR", "xfun", "XML", "xml2", "xts", "yaml", "zoo"))
install.packages(c("ade4", "adegenet", "adehabitatLT", "adehabitatMA", "bigassertr", "bigsnpr", "bigstatsr", "bit", "boot", "bridgesampling", "brms", "callr", "caTools", "checkmate", "class", "covr", "crosstalk", "data.table", "deldir", "devtools", "DT", "farver", "fasterize", "fields", "foreach", "foreign", "fs", "future", "gdalUtils", "gdm", "ggplot2", "ggrepel", "ggridges", "gh", "globals", "gplots", "gstat", "hexbin", "highlight", "igraph", "jsonlite", "knitr", "lattice", "latticeExtra", "leafpop", "lintr", "listenv", "loo", "lwgeom", "magick", "MASS", "matrixStats", "memuse", "mice", "mime", "mnormt", "modEvA", "nlme", "nnet", "ordinal", "phytools", "pkgdown", "plotrix", "prettyunits", "processx", "ps", "psych", "R.methodsS3", "R.utils", "raster", "rasterVis", "RcppArmadillo", "remotes", "RgoogleMaps", "rmarkdown", "rmio", "robust", "robustbase", "roxygen2", "rrcov", "rsconnect", "rstanarm", "rstudioapi", "rversions", "satellite", "sf", "shiny", "shinyjs", "sp", "spacetime", "spam", "spData", "StanHeaders", "survival", "svglite", "testthat", "threejs", "tinytex", "tmap", "units", "uuid", "V8", "vcfR", "xfun", "XML", "xml2", "xts", "yaml", "zoo"))
install.packages(c("ade4", "adegenet", "adehabitatLT", "adehabitatMA", "bigassertr", "bigsnpr", "bigstatsr", "bit", "boot", "bridgesampling", "brms", "callr", "caTools", "checkmate", "class", "covr", "crosstalk", "data.table", "deldir", "devtools", "DT", "farver", "fasterize", "fields", "foreach", "foreign", "fs", "future", "gdalUtils", "gdm", "ggplot2", "ggrepel", "ggridges", "gh", "globals", "gplots", "gstat", "hexbin", "highlight", "igraph", "jsonlite", "knitr", "lattice", "latticeExtra", "leafpop", "lintr", "listenv", "loo", "lwgeom", "magick", "MASS", "matrixStats", "memuse", "mice", "mime", "mnormt", "modEvA", "nlme", "nnet", "ordinal", "phytools", "pkgdown", "plotrix", "prettyunits", "processx", "ps", "psych", "R.methodsS3", "R.utils", "raster", "rasterVis", "RcppArmadillo", "remotes", "RgoogleMaps", "rmarkdown", "rmio", "robust", "robustbase", "roxygen2", "rrcov", "rsconnect", "rstanarm", "rstudioapi", "rversions", "satellite", "sf", "shiny", "shinyjs", "sp", "spacetime", "spam", "spData", "StanHeaders", "survival", "svglite", "testthat", "threejs", "tinytex", "tmap", "units", "uuid", "V8", "vcfR", "xfun", "XML", "xml2", "xts", "yaml", "zoo"))
rm(list=ls())
install.packages("ade4")
install.packages(c("adegenet", "adehabitatLT", "adehabitatMA", "bigassertr", "bigsnpr", "bigstatsr", "bit", "boot", "bridgesampling", "brms", "callr", "caTools", "checkmate", "class", "covr", "crosstalk", "data.table", "deldir", "devtools", "DT", "farver", "fasterize", "fields", "foreach", "foreign", "fs", "future", "gdalUtils", "gdm", "ggplot2", "ggrepel", "ggridges", "gh", "globals", "gplots", "gstat", "hexbin", "highlight", "igraph", "jsonlite", "knitr", "lattice", "latticeExtra", "leafpop", "lintr", "listenv", "loo", "lwgeom", "magick", "MASS", "matrixStats", "memuse", "mice", "mime", "mnormt", "modEvA", "nlme", "nnet", "ordinal", "phytools", "pkgdown", "plotrix", "prettyunits", "processx", "ps", "psych", "R.methodsS3", "R.utils", "raster", "rasterVis", "RcppArmadillo", "remotes", "RgoogleMaps", "rmarkdown", "rmio", "robust", "robustbase", "roxygen2", "rrcov", "rsconnect", "rstanarm", "rstudioapi", "rversions", "satellite", "sf", "shiny", "shinyjs", "sp", "spacetime", "spam", "spData", "StanHeaders", "survival", "svglite", "testthat", "threejs", "tinytex", "tmap", "units", "uuid", "V8", "vcfR", "xfun", "XML", "xml2", "xts", "yaml", "zoo"))
setwd("~/Downloads/")
require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
require(foreach)
require(doParallel)
require(pbapply)
require(gdata)
require(data.table)
require(PresenceAbsence)
require(ROCR)
require(modEvA)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(stringr)
require(reshape2)
require(hierfstat)
setwd("/Users/akijarl/Desktop/PostDoc/TTT_Offset_Vulnerability_GF_Sims/")
seed = 1599295551050
#fit<-read.table(paste("Fit_SP_100_",seed,".txt",sep=""),fill=T)
fit<-read.table(paste("results/SLiM_output/Sim_sum/",seed,"_Freq_ML_WF.txt",sep=""))
fit_nam <- NULL
for(i in 1:100){
fit_nam <- c(fit_nam,paste("P",i,"_fit",sep=""))
}
freq_nam <- NULL
for(i in 1:100){
freq_nam <- c(freq_nam,paste("P",i,"_freq",sep=""))
}
phen_nam <- NULL
for(i in 1:100){
phen_nam <- c(phen_nam,paste("P",i,"_phen",sep=""))
}
env1_nam <- NULL
for(i in 1:100){
env1_nam <- c(env1_nam,paste("P",i,"_env1",sep=""))
}
env2_nam <- NULL
for(i in 1:100){
env2_nam <- c(env2_nam,paste("P",i,"_env2",sep=""))
}
colnames(fit)<-c("m","n","u","r","mean_Eff", "var_Eff", "var_Opt", "Env_rate","Burnin","Env_shift", "Generation", fit_nam, freq_nam, phen_nam, env1_nam, env2_nam)
View(fit)
phen1_nam <- NULL
for(i in 1:100){
phen1_nam <- c(phen1_nam,paste("P",i,"_phen",sep=""))
}
phen2_nam <- NULL
for(i in 1:100){
phen2_nam <- c(phen2_nam,paste("P",i,"_phen",sep=""))
}
colnames(fit)<-c("m","n","u","r","mean_Eff", "var_Eff", "var_Opt", "Env_rate","Burnin","Env_shift", "Generation", fit_nam, freq_nam, phen1_nam, phen2_nam, env1_nam, env2_nam)
seed = 1599297136419
#fit<-read.table(paste("Fit_SP_100_",seed,".txt",sep=""),fill=T)
fit<-read.table(paste("results/SLiM_output/Sim_sum/",seed,"_Freq_ML_WF.txt",sep=""))
fit_nam <- NULL
for(i in 1:100){
fit_nam <- c(fit_nam,paste("P",i,"_fit",sep=""))
}
freq_nam <- NULL
for(i in 1:100){
freq_nam <- c(freq_nam,paste("P",i,"_freq",sep=""))
}
phen1_nam <- NULL
for(i in 1:100){
phen1_nam <- c(phen1_nam,paste("P",i,"_phen",sep=""))
}
phen2_nam <- NULL
for(i in 1:100){
phen2_nam <- c(phen2_nam,paste("P",i,"_phen",sep=""))
}
env1_nam <- NULL
for(i in 1:100){
env1_nam <- c(env1_nam,paste("P",i,"_env1",sep=""))
}
env2_nam <- NULL
for(i in 1:100){
env2_nam <- c(env2_nam,paste("P",i,"_env2",sep=""))
}
colnames(fit)<-c("m","n","u","r","mean_Eff", "var_Eff", "var_Opt", "Env_rate","Burnin","Env_shift", "Generation", fit_nam, freq_nam, phen1_nam, phen2_nam, env1_nam, env2_nam)
View(fit)
colnames(fit)<-c("m","n","u","r","mean_Eff", "var_Eff", "var_Opt", "Env_rate","Burnin","Env_shift", "Generation")# fit_nam, freq_nam, phen1_nam, phen2_nam, env1_nam, env2_nam)
View(fit)
View(fit)
colnames(fit)<-c("m","n","u","r","mean_Eff", "var_Eff", "var_Opt", "Env_rate","Burnin","Env_shift", "Generation", fit_nam, freq_nam)# phen1_nam, phen2_nam, env1_nam, env2_nam)
View(fit)
seed = 1599298910931
#fit<-read.table(paste("Fit_SP_100_",seed,".txt",sep=""),fill=T)
fit<-read.table(paste("results/SLiM_output/Sim_sum/",seed,"_Freq_ML_WF.txt",sep=""))
fit_nam <- NULL
for(i in 1:100){
fit_nam <- c(fit_nam,paste("P",i,"_fit",sep=""))
}
freq_nam <- NULL
for(i in 1:100){
freq_nam <- c(freq_nam,paste("P",i,"_freq",sep=""))
}
phen1_nam <- NULL
for(i in 1:100){
phen1_nam <- c(phen1_nam,paste("P",i,"_phen",sep=""))
}
phen2_nam <- NULL
for(i in 1:100){
phen2_nam <- c(phen2_nam,paste("P",i,"_phen",sep=""))
}
env1_nam <- NULL
for(i in 1:100){
env1_nam <- c(env1_nam,paste("P",i,"_env1",sep=""))
}
env2_nam <- NULL
for(i in 1:100){
env2_nam <- c(env2_nam,paste("P",i,"_env2",sep=""))
}
colnames(fit)<-c("m","n","u","r","mean_Eff", "var_Eff", "var_Opt", "Env_rate","Burnin","Env_shift", "Generation", fit_nam, freq_nam, phen1_nam, phen2_nam, env1_nam, env2_nam)
View(fit)
getwd()
write.table(fit,"results/SLiM_output/Sim_sum/1599298910931_Freq_ML_WF.csv",quote=F,sep=",",row.names=F)
