}
# plot AB frequency
plot(g,plotAB,ylim=c(0,1),type='b',col='blue',lwd=3,xlab="iterations",
ylab="haplotype frequency or D")
# plot Ab
par(new=TRUE)# save the last plot to overlay
plot(g,plotAb,type="b",lwd=3,ylim=c(0,1),col="red",xlab=" ", ylab=" ")
# plot aB
par(new=TRUE)# save the last plot to overlay
plot(g,plotaB,type="b",lwd=3,ylim=c(0,1),col="green",xlab=" ", ylab=" ")
# plot ab
par(new=TRUE)# save the last plot to overlay
plot(g,plotab,type="b",lwd=3,ylim=c(0,1),col="orange",xlab=" ", ylab=" ")
# plot D
par(new=TRUE)# save the last plot to overlay
plot(g,plotD,ylim=c(0,1),type='b',col='gray',lwd=3,xlab=" ", ylab=" ")
## Legend
legend('topright',bg='white',legend=c('AB','Ab','aB','ab','D'),
col=c('blue','red','green','orange','gray'),lty=1,lwd=3)
1/4
D-calc <- function(AABB, AaBB, aaBB, AABb, AaBb, aaBb, AAbb, Aabb, aabb){
# total observations
sum=AABB+AaBB+aaBB+AABb+AaBb+aaBb+AAbb+Aabb+aabb
# guess initial haplotype frequencies
AB=1/4
Ab=1/4
aB=1/4
ab=1/4
# initial probabilities of the genotypes
pAABB=AB*AB
pAaBB=2*AB*aB
paaBB=aB*aB
pAABb=2*AB*Ab
pAaBb=2*AB*ab+2*Ab*aB
paaBb=2*aB*ab
pAAbb=Ab*Ab
pAabb=2*Ab*ab
paabb=ab*ab
# vector of the probabilities
x<-c(pAABB,pAaBB,paaBB,pAABb,pAaBb,paaBb,pAAbb,pAabb,paabb)
# iterations for plotting
g<-c(1:10)
plotAB<-list()
plotAb<-list()
plotaB<-list()
plotab<-list()
plotD<-list()
plotlike<-list()
for(i in 1:10){
# estimate the fraction of double heterozygotes in the 'AB/ab' phase
ABphase=AB*ab/(AB*ab+aB*Ab)
# calculate D
D=abs(AB*ab-Ab*aB)
# calculate the likelihood of the data
like=dmultinom(c(AABB,AaBB,aaBB,AABb,AaBb,aaBb,AAbb,Aabb,aabb),prob=x)
# store current iteration results
plotAB[i]<-AB
plotAb[i]<-Ab
plotaB[i]<-aB
plotab[i]<-ab
plotD[i]<-D
plotlike[i]<-like
# show current iteration results
print(paste('AB',AB,'Ab',Ab,'aB',aB,'ab',ab,'AB_phase',ABphase,
'D',D,'like',like))
# update haplotype frequency estimates
AB=(2*AABB+AABb+AaBB+AaBb*ABphase)/(2*sum)
Ab=(2*AAbb+AABb++Aabb+AaBb*(1-ABphase))/(2*sum)
aB=(2*aaBB+aaBb+AaBB+AaBb*(1-ABphase))/(2*sum)
ab=(2*aabb+aaBb+Aabb+AaBb*ABphase)/(2*sum)
# update genotype frequency estimates
pAABB=AB*AB
pAaBB=2*AB*aB
paaBB=aB*aB
pAABb=2*AB*Ab
pAaBb=2*AB*ab+2*Ab*aB
paaBb=2*aB*ab
pAAbb=Ab*Ab
pAabb=2*Ab*ab
paabb=ab*ab
# save genotype frequencies in a vector for the multinomial
x<-c(pAABB,pAaBB,paaBB,pAABb,pAaBb,paaBb,pAAbb,pAabb,paabb)
}
# plot AB frequency
plot(g,plotAB,ylim=c(0,1),type='b',col='blue',lwd=3,xlab="iterations",
ylab="Haplotype frequency or D")
# plot Ab
par(new=TRUE)# save the last plot to overlay
plot(g,plotAb,type="b",lwd=3,ylim=c(0,1),col="red",xlab=" ", ylab=" ")
# plot aB
par(new=TRUE)# save the last plot to overlay
plot(g,plotaB,type="b",lwd=3,ylim=c(0,1),col="green",xlab=" ", ylab=" ")
# plot ab
par(new=TRUE)# save the last plot to overlay
plot(g,plotab,type="b",lwd=3,ylim=c(0,1),col="orange",xlab=" ", ylab=" ")
# plot D
par(new=TRUE)# save the last plot to overlay
plot(g,plotD,ylim=c(0,1),type='b',col='gray',lwd=3,xlab=" ", ylab=" ")
## Legend
legend('topright',bg='white',legend=c('AB','Ab','aB','ab','D'),
col=c('blue','red','green','orange','gray'),lty=1,lwd=3)
}
# total observations
sum <- AABB+AaBB+aaBB+AABb+AaBb+aaBb+AAbb+Aabb+aabb
# total observations
sum <- AABB+AaBB+aaBB+AABb+AaBb+aaBb+AAbb+Aabb+aabb
# guess initial haplotype frequencies
AB <- 1/4
Ab <- 1/4
aB <- 1/4
ab <- 1/4
# initial probabilities of the genotypes
pAABB <- AB*AB
pAaBB <- 2*AB*aB
paaBB <- aB*aB
pAABb <- 2*AB*Ab
pAaBb <- 2*AB*ab+2*Ab*aB
paaBb <- 2*aB*ab
pAAbb <- Ab*Ab
pAabb <- 2*Ab*ab
paabb <- ab*ab
# vector of the probabilities
x <- c(pAABB,pAaBB,paaBB,pAABb,pAaBb,paaBb,pAAbb,pAabb,paabb)
# iterations for plotting
g <- c(1:10)
plotAB <- list()
plotAb <- list()
D-calc <- function(AABB, AaBB, aaBB, AABb, AaBb, aaBb, AAbb, Aabb, aabb){
# total observations
sum <- AABB+AaBB+aaBB+AABb+AaBb+aaBb+AAbb+Aabb+aabb
# guess initial haplotype frequencies
AB <- 1/4
Ab <- 1/4
aB <- 1/4
ab <- 1/4
# initial probabilities of the genotypes
pAABB <- AB*AB
pAaBB <- 2*AB*aB
paaBB <- aB*aB
pAABb <- 2*AB*Ab
pAaBb <- 2*AB*ab+2*Ab*aB
paaBb <- 2*aB*ab
pAAbb <- Ab*Ab
pAabb <- 2*Ab*ab
paabb <- ab*ab
# vector of the probabilities
x <- c(pAABB,pAaBB,paaBB,pAABb,pAaBb,paaBb,pAAbb,pAabb,paabb)
# iterations for plotting
g <- c(1:10)
plotAB <- list()
plotAb <- list()
plotaB <- list()
plotab <- list()
plotD <- list()
plotlike <- list()
for(i in 1:10){
# estimate the fraction of double heterozygotes in the 'AB/ab' phase
ABphase <- AB*ab/(AB*ab+aB*Ab)
# calculate D
D <- abs(AB*ab-Ab*aB)
# calculate the likelihood of the data
like <- dmultinom(c(AABB,AaBB,aaBB,AABb,AaBb,aaBb,AAbb,Aabb,aabb),prob=x)
# store current iteration results
plotAB[i] <- AB
plotAb[i] <- Ab
plotaB[i] <- aB
plotab[i] <- ab
plotD[i] <- D
plotlike[i] <- like
# show current iteration results
print(paste('AB',AB,'Ab',Ab,'aB',aB,'ab',ab,'AB_phase',ABphase,
'D',D,'like',like))
# update haplotype frequency estimates
AB <- (2*AABB+AABb+AaBB+AaBb*ABphase)/(2*sum)
Ab <- (2*AAbb+AABb++Aabb+AaBb*(1-ABphase))/(2*sum)
aB <- (2*aaBB+aaBb+AaBB+AaBb*(1-ABphase))/(2*sum)
ab <- (2*aabb+aaBb+Aabb+AaBb*ABphase)/(2*sum)
# update genotype frequency estimates
pAABB <- AB*AB
pAaBB <- 2*AB*aB
paaBB <- aB*aB
pAABb <- 2*AB*Ab
pAaBb <- 2*AB*ab+2*Ab*aB
paaBb <- 2*aB*ab
pAAbb <- Ab*Ab
pAabb <- 2*Ab*ab
paabb <- ab*ab
# save genotype frequencies in a vector for the multinomial
x <- c(pAABB,pAaBB,paaBB,pAABb,pAaBb,paaBb,pAAbb,pAabb,paabb)
}
# plot AB frequency
plot(g, plotAB, ylim=c(0,1), type='b', col='blue', lwd=3, xlab="iterations",
ylab="Haplotype frequency or D")
# plot Ab
par(new=TRUE)# save the last plot to overlay
plot(g, plotAb, type="b", lwd=3, ylim=c(0,1), col="red", xlab=" ", ylab=" ")
# plot aB
par(new=TRUE)# save the last plot to overlay
plot(g, plotaB, type="b", lwd=3, ylim=c(0,1), col="green", xlab=" ", ylab=" ")
# plot ab
par(new=TRUE)# save the last plot to overlay
plot(g, plotab, type="b", lwd=3, ylim=c(0,1), col="orange", xlab=" ", ylab=" ")
# plot D
par(new=TRUE)# save the last plot to overlay
plot(g, plotD, ylim=c(0,1), type='b', col='gray', lwd=3, xlab=" ", ylab=" ")
## Legend
legend('topright', bg='white', legend=c('AB','Ab','aB','ab','D'),
col=c('blue','red','green','orange','gray'), lty=1, lwd=3)
}
Dcalc <- function(AABB, AaBB, aaBB, AABb, AaBb, aaBb, AAbb, Aabb, aabb){
# total observations
sum <- AABB+AaBB+aaBB+AABb+AaBb+aaBb+AAbb+Aabb+aabb
# guess initial haplotype frequencies
AB <- 1/4
Ab <- 1/4
aB <- 1/4
ab <- 1/4
# initial probabilities of the genotypes
pAABB <- AB*AB
pAaBB <- 2*AB*aB
paaBB <- aB*aB
pAABb <- 2*AB*Ab
pAaBb <- 2*AB*ab+2*Ab*aB
paaBb <- 2*aB*ab
pAAbb <- Ab*Ab
pAabb <- 2*Ab*ab
paabb <- ab*ab
# vector of the probabilities
x <- c(pAABB,pAaBB,paaBB,pAABb,pAaBb,paaBb,pAAbb,pAabb,paabb)
# iterations for plotting
g <- c(1:10)
plotAB <- list()
plotAb <- list()
plotaB <- list()
plotab <- list()
plotD <- list()
plotlike <- list()
for(i in 1:10){
# estimate the fraction of double heterozygotes in the 'AB/ab' phase
ABphase <- AB*ab/(AB*ab+aB*Ab)
# calculate D
D <- abs(AB*ab-Ab*aB)
# calculate the likelihood of the data
like <- dmultinom(c(AABB,AaBB,aaBB,AABb,AaBb,aaBb,AAbb,Aabb,aabb),prob=x)
# store current iteration results
plotAB[i] <- AB
plotAb[i] <- Ab
plotaB[i] <- aB
plotab[i] <- ab
plotD[i] <- D
plotlike[i] <- like
# show current iteration results
print(paste('AB',AB,'Ab',Ab,'aB',aB,'ab',ab,'AB_phase',ABphase,
'D',D,'like',like))
# update haplotype frequency estimates
AB <- (2*AABB+AABb+AaBB+AaBb*ABphase)/(2*sum)
Ab <- (2*AAbb+AABb++Aabb+AaBb*(1-ABphase))/(2*sum)
aB <- (2*aaBB+aaBb+AaBB+AaBb*(1-ABphase))/(2*sum)
ab <- (2*aabb+aaBb+Aabb+AaBb*ABphase)/(2*sum)
# update genotype frequency estimates
pAABB <- AB*AB
pAaBB <- 2*AB*aB
paaBB <- aB*aB
pAABb <- 2*AB*Ab
pAaBb <- 2*AB*ab+2*Ab*aB
paaBb <- 2*aB*ab
pAAbb <- Ab*Ab
pAabb <- 2*Ab*ab
paabb <- ab*ab
# save genotype frequencies in a vector for the multinomial
x <- c(pAABB,pAaBB,paaBB,pAABb,pAaBb,paaBb,pAAbb,pAabb,paabb)
}
# plot AB frequency
plot(g, plotAB, ylim=c(0,1), type='b', col='blue', lwd=3, xlab="iterations",
ylab="Haplotype frequency or D")
# plot Ab
par(new=TRUE)# save the last plot to overlay
plot(g, plotAb, type="b", lwd=3, ylim=c(0,1), col="red", xlab=" ", ylab=" ")
# plot aB
par(new=TRUE)# save the last plot to overlay
plot(g, plotaB, type="b", lwd=3, ylim=c(0,1), col="green", xlab=" ", ylab=" ")
# plot ab
par(new=TRUE)# save the last plot to overlay
plot(g, plotab, type="b", lwd=3, ylim=c(0,1), col="orange", xlab=" ", ylab=" ")
# plot D
par(new=TRUE)# save the last plot to overlay
plot(g, plotD, ylim=c(0,1), type='b', col='gray', lwd=3, xlab=" ", ylab=" ")
## Legend
legend('topright', bg='white', legend=c('AB','Ab','aB','ab','D'),
col=c('blue','red','green','orange','gray'), lty=1, lwd=3)
}
Dcalc(AABB, AaBB, aaBB, AABb, AaBb, aaBb, AAbb, Aabb, aabb)
install.packages("pegas")
detach("package:ade4", unload = TRUE)
detach("package:adegenet", unload = TRUE)
install.packages("diveRsity")
remotes::install_github("thierrygosselin/radiator")
detach("package:ade4", unload = TRUE)
detach("package:adegenet", unload = TRUE)
memory.limit()
memory.size()
memory.size(T)
require(hierfstat)
install.packages("hierfstat")
require(hierfstat)
load("E:/Research_AJL/TTT_Offset_Vulnerability_GF_Sims/results/R_results/1940819310024.RData")
require(doParallel, lib.loc=library.path)
install.packages("doParallel")
require(doParallel, lib.loc=library.path)
.libPaths()
# Post_geno<-data.frame(PopsALL,Gt2f)
# colnames(Post_geno)[1]<-"Locality"
cores <- 7
cl <- makeCluster(cores)
registerDoParallel(cl)
require(doParallel)
cl <- makeCluster(cores)
registerDoParallel(cl)
start_time <- Sys.time()
Pre_FST<-pairwise.WCfst(Pre_geno,diploid = T)
end_time <- Sys.time()
print(paste("Run time:",end_time - start_time))
stopCluster(cl)
.libPaths()
#library.path <- c("C:/Users/18084/Documents/R/win-library/3.6","E:/R-3.6.2/library")
library.path <- .libPaths()
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
memory)=
memory()
Memory()
?Memory
memory.limit()
memory.size()
memory.size(T)
memory.size(T)
gc()
memory.size()
?gc
gc(T)
install.packages(c("adegenet", "ape", "asremlPlus", "backports", "bayestestR", "broom", "calibrate", "cubature", "dae", "dbplyr", "deldir", "dplyr", "DT", "effectsize", "ellipsis", "emmeans", "fs", "gganimate", "ggeffects", "glue", "gplots", "haven", "htmltools", "httpuv", "insight", "isoband", "jsonlite", "knitr", "later", "lubridate", "magick", "modelr", "mvtnorm", "nloptr", "openssl", "parameters", "performance", "pillar", "pinfsc50", "pkgbuild", "pkgload", "processx", "promises", "ps", "raster", "Rcpp", "RcppArmadillo", "rlang", "rmarkdown", "roxygen2", "rversions", "scales", "segmented", "sf", "shiny", "sjlabelled", "sjmisc", "sjPlot", "sp", "spData", "spdep", "tibble", "tidyr", "tidyselect", "tinytex", "transformr", "units", "vctrs", "xfun"))
install.packages(c("nlme", "survival"), lib="E:/R-3.6.2/library")
library(hierfstat)
detach("package:hierfstat", unload = TRUE)
install.packages(hierfstat)
install.packages("hierfstat")
library(devtools)
install_github("jgx65/hierfstat")
library(hierfstat)
.libPaths()
library(devtools)
>install_github()
?install_github()
install_github("jgx65/hierfstat")
require(hierfstat)
install.packages("hierfstat")
require(hierfstat)
library(hierfstat)
.libPaths()
#library.path <- c("C:/Users/18084/Documents/R/win-library/3.6","E:/R-3.6.2/library")
library.path <- .libPaths()
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
install.packages(c("data.table", "gdm", "gridExtra", "modEvA", "pbapply", "PresenceAbsence", "ROCR"))
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
install.packages(c("cowplot", "qqman"))
install.packages(c("data.table", "gdm", "gridExtra", "modEvA", "pbapply", "PresenceAbsence", "ROCR"))
library(devtools)
install_github("jgx65/hierfstat")
install.packages("devtools")
library(devtools)
install_github("jgx65/hierfstat")
detach("package:hierfstat", unload = TRUE)
library(devtools)
install_github("jgx65/hierfstat")
require(hierfstat)
remove.packages("hierfstat")
install.packages("hierfstat")
require(hierfstat)
library(hierfstat)
remove.packages("hierfstat")
library.path <- .libPaths()
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
require(foreach)
require(doParallel)
require(pbapply)
require(gdata)
require(data.table)
require(PresenceAbsence)
require(ROCR)
require(modEvA)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(stringr)
require(reshape2)
require(hierfstat)
load("E:/Research_AJL/TTT_Offset_Vulnerability_GF_Sims/results/R_results/6698486070847_Case4.RData")
#setwd("/Users/akijarl/Desktop/PostDoc/TTT_Offset_Vulnerability_GF_Sims/")
#setwd("/Users/akijarl/Desktop/TTT_Offset_Vulnerability_GF_Sims/")
setwd("E:/Research_AJL/TTT_Offset_Vulnerability_GF_Sims/")
Cores
Edges
Cores <- c(34, 35, 36, 37, 44, 45, 46, 47, 54, 55, 56, 57, 64, 65, 66, 67)
Pre_geno_Cores <- Pre_geno[Pre_geno$Locality%in%Cores,]
start_time <- Sys.time()
Pre_FST_Cores<-pairwise.WCfst(Pre_geno_Cores,diploid = T)
end_time <- Sys.time()
print(end_time - start_time)
Pre_FST_Cores
#save.image("~/Desktop/PostDoc/SLiMstuff/SLiM_output/250K/VCF_output/300K/1727520158823.RData")
save.image(paste("results/R_results/",seed,".RData",sep=""))
