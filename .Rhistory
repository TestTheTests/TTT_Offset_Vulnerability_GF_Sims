value.name = "Fitness")
cg_df$Transplant<-factor(cg_df$Transplant,levels=unique(cg_df$Transplant))
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop1<-data.frame(fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop1) <- "envPop1"
fakeEnv1 <- envPop1$envPop1 + rnorm(nrow(envPop1),0,1.3)
cor(envPop1$envPop1, fakeEnv1)
envPop2<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop2) <- "envPop2"
fakeEnv2 <- envPop2$envPop2 + rnorm(nrow(envPop2),0,1.3)
# this standard deviation generally produces a correlation between 0.3 and 0.6
cor(envPop2$envPop2, fakeEnv2)
Pop <- levels(fitt$Location)
Popsenv <- data.frame(Pop, envPop1,envPop2,fakeEnv1,fakeEnv2)
nfake <- 10
Popsenv[,6:(5+nfake)] <- NA
cov1 <- genPositiveDefMat(nfake,covMethod="unifcorrmat" )
head(cov1)
a<- mvrnorm(nrow(Popsenv),mu=rep(0, nfake), Sigma=cov1$Sigma)
Popsenv[,6:(5+nfake)] <- a
plot(Popsenv$fakeEnv2,type="l", ylab="")
lines(Popsenv$fakeEnv1, col="grey")
lines(Popsenv$envPop1, col="red")
lines(Popsenv$envPop2, col="blue")
seed_table$V2[21]
seed_table
seed=seed_table$V2[21]
#seed=seed_table$V2[21]
#seed=commandArgs(trailingOnly=T)
fit<-read.table(paste("results/SLiM_output/Sim_sum/",seed,"_Freq_ML_WF.txt",sep=""), header=T)
N<-data.frame(fit$n[1]*100)
colnames(N)<-"N"
if(ncol(fit)==613){
(specs<-data.frame(seed,fit[1,1:2],N,fit[1,3:12]))
plotTitle <- paste(colnames(specs)[1],":",specs[[1]],", ", colnames(specs)[2],":",specs[2],", ",colnames(specs)[3],":",specs[3],", ",colnames(specs)[4],":",specs[4],",",colnames(specs)[5],":",specs[5],"\n",colnames(specs)[6],":",specs[6],", ",colnames(specs)[7],":",specs[7],", ",colnames(specs)[8],":",specs[8],", ",colnames(specs)[9],":",specs[9],", ",colnames(specs)[10],":",specs[10], sep="")
fitt<-data.frame(t(fit[,-1:-13]))
} else {
(specs<-data.frame(seed,fit[1,1:2],N,fit[1,3:13])) # for case4
plotTitle <- paste(colnames(specs)[1],":",specs[[1]],", ", colnames(specs)[2],":",specs[2],", ",colnames(specs)[3],":",specs[3],", ",colnames(specs)[4],":",specs[4],",",colnames(specs)[5],":",specs[5],"\n",colnames(specs)[6],":",specs[6],", ",colnames(specs)[7],":",specs[7],", ",colnames(specs)[8],":",specs[8],", ",colnames(specs)[9],":",specs[9],", ",colnames(specs)[10],":",specs[10],", ",colnames(specs)[11],":",specs[11],sep="") # for case4
fitt<-data.frame(t(fit[,-1:-14])) # for case4
}
gen_nam <- paste("Gen",fit$Generation,sep="")
colnames(fitt)<-gen_nam
fitt$Location <- factor(rep(paste("P",1:100,sep=""),6), levels = unique(rep(paste("P",1:100,sep=""),6)))
fitt$Type <- as.factor(c(rep("Fit",100),rep("Freq",100),rep("Phen1",100), rep("Phen2",100),rep("Env1",100), rep("Env2",100)))
#######################################################
# Set up environmental vartiables for Gradient Forest
#######################################################
cg<-read.table(paste("results/SLiM_output/CG_files/",seed,"_fitnessmat_pop.txt",sep=""),header=F)
colnames(cg)<-rep(paste("H",seq(1:100),sep=""))
cg$Transplant<-paste("T",seq(1:100),sep="")
cg_df <- melt(cg,  id.vars ="Transplant",  variable.name = "Home",
value.name = "Fitness")
cg_df$Transplant<-factor(cg_df$Transplant,levels=unique(cg_df$Transplant))
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop1<-data.frame(fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop1) <- "envPop1"
fakeEnv1 <- envPop1$envPop1 + rnorm(nrow(envPop1),0,1.3)
cor(envPop1$envPop1, fakeEnv1)
envPop2<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop2) <- "envPop2"
fakeEnv2 <- envPop2$envPop2 + rnorm(nrow(envPop2),0,1.3)
# this standard deviation generally produces a correlation between 0.3 and 0.6
cor(envPop2$envPop2, fakeEnv2)
Pop <- levels(fitt$Location)
Popsenv <- data.frame(Pop, envPop1,envPop2,fakeEnv1,fakeEnv2)
nfake <- 10
Popsenv[,6:(5+nfake)] <- NA
cov1 <- genPositiveDefMat(nfake,covMethod="unifcorrmat" )
head(cov1)
a<- mvrnorm(nrow(Popsenv),mu=rep(0, nfake), Sigma=cov1$Sigma)
Popsenv[,6:(5+nfake)] <- a
sel_env_cols <- 2:3
all_env_cols <- 2:ncol(Popsenv)
sel_env_cols_plus2 <- 2:5
cov_allEnv <- cov(Popsenv[,all_env_cols])
cov_selEnv <- cov(Popsenv[,sel_env_cols])
cov_selEnv_plus2 <- cov(Popsenv[,sel_env_cols_plus2])
cov_selEnv
cov(Popsenv[,all_env_cols])
cov(Popsenv[,sel_env_cols])
cov(Popsenv[,sel_env_cols_plus2])
cov(Popsenv[,sel_env_cols_plus2])
?cov
i=1
# get the row in PopsenvStnd for the common garden genotype
row1 = which(Popsenv==gsub("T","P",as.character(cg_df$Transplant[i])))
# get the row in PopsenvStnd for the genotype source
row2 = which(Popsenv==gsub("H","P",as.character(cg_df$Home[i])))
row1
row2
# Look up the envi (all var)
(envpop1_all <- Popsenv[row1,all_env_cols])
(envpop2_all <- Popsenv[row2,all_env_cols])
# Look up the envi selected only
(envpop1_sel <- Popsenv[row1,sel_env_cols])
(envpop2_sel <- Popsenv[row2,sel_env_cols])
# Look up the envi selected plus 2 correlated env
(envpop1_sel_plus2 <- Popsenv[row1,sel_env_cols_plus2])
(envpop2_sel_plus2 <- Popsenv[row2,sel_env_cols_plus2])
dist(rbind(envpop1_sel,
envpop2_sel))
mahalanobis(as.numeric(envpop1_sel),
as.numeric(envpop2_sel),
cov_selEnv)
dist(rbind(envpop1_all,
envpop2_all))
i=1
# get the row in PopsenvStnd for the common garden genotype
row1 = which(Popsenv==gsub("T","P",as.character(cg_df$Transplant[i])))
# get the row in PopsenvStnd for the genotype source
row2 = which(Popsenv==gsub("H","P",as.character(cg_df$Home[i])))
# Look up the envi (all var)
(envpop1_all <- Popsenv[row1,all_env_cols])
(envpop2_all <- Popsenv[row2,all_env_cols])
row1
i
i=2
# get the row in PopsenvStnd for the common garden genotype
row1 = which(Popsenv==gsub("T","P",as.character(cg_df$Transplant[i])))
# get the row in PopsenvStnd for the genotype source
row2 = which(Popsenv==gsub("H","P",as.character(cg_df$Home[i])))
# Look up the envi (all var)
(envpop1_all <- Popsenv[row1,all_env_cols])
(envpop2_all <- Popsenv[row2,all_env_cols])
View(cg_df)
row1
row2
# get the row in PopsenvStnd for the genotype source
row2 = which(Popsenv==gsub("H","P",as.character(cg_df$Home[i])))
row2
which(Popsenv==gsub("H","P",as.character(cg_df$Home[i])))
gsub("H","P",as.character(cg_df$Home[i]))
# Look up the envi (all var)
(envpop1_all <- Popsenv[row1,all_env_cols])
(envpop2_all <- Popsenv[row2,all_env_cols])
# Look up the envi selected only
(envpop1_sel <- Popsenv[row1,sel_env_cols])
(envpop2_sel <- Popsenv[row2,sel_env_cols])
# Look up the envi selected plus 2 correlated env
(envpop1_sel_plus2 <- Popsenv[row1,sel_env_cols_plus2])
(envpop2_sel_plus2 <- Popsenv[row2,sel_env_cols_plus2])
dist(rbind(envpop1_sel,
envpop2_sel))
mahalanobis(as.numeric(envpop1_sel),
as.numeric(envpop2_sel),
cov_selEnv)
dist(rbind(envpop1_sel_plus2,
envpop2_sel_plus2))
mahalanobis(as.numeric(envpop1_sel_plus2),
as.numeric(envpop2_sel_plus2),
cov_selEnv_plus2)
dist(rbind(envpop1_all,
envpop2_all))
mahalanobis(as.numeric(envpop1_all),
as.numeric(envpop2_all),
cov_allEnv)
dist(rbind(envpop1_sel,
envpop2_sel))
mahalanobis(as.numeric(envpop1_sel),
as.numeric(envpop2_sel),
cov_selEnv)
View(cg_df)
#######################################################
# Set up environmental vartiables for Gradient Forest
#######################################################
cg<-read.table(paste("results/SLiM_output/CG_files/",seed,"_fitnessmat_pop.txt",sep=""),header=F)
colnames(cg)<-rep(paste("H",seq(1:100),sep=""))
cg$Transplant<-paste("T",seq(1:100),sep="")
cg_df <- melt(cg,  id.vars ="Transplant",  variable.name = "Home",
value.name = "Fitness")
cg_df$Transplant<-factor(cg_df$Transplant,levels=unique(cg_df$Transplant))
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop1<-data.frame(fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop1) <- "envPop1"
fakeEnv1 <- envPop1$envPop1 + rnorm(nrow(envPop1),0,1.3)
cor(envPop1$envPop1, fakeEnv1)
envPop2<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop2) <- "envPop2"
fakeEnv2 <- envPop2$envPop2 + rnorm(nrow(envPop2),0,1.3)
# this standard deviation generally produces a correlation between 0.3 and 0.6
cor(envPop2$envPop2, fakeEnv2)
Pop <- levels(fitt$Location)
Popsenv <- data.frame(Pop, envPop1,envPop2,fakeEnv1,fakeEnv2)
nfake <- 10
Popsenv[,6:(5+nfake)] <- NA
cov1 <- genPositiveDefMat(nfake,covMethod="unifcorrmat" )
head(cov1)
a<- mvrnorm(nrow(Popsenv),mu=rep(0, nfake), Sigma=cov1$Sigma)
Popsenv[,6:(5+nfake)] <- a
sel_env_cols <- 2:3
all_env_cols <- 2:ncol(Popsenv)
sel_env_cols_plus2 <- 2:5
cov_allEnv <- cov(Popsenv[,all_env_cols])
cov_selEnv <- cov(Popsenv[,sel_env_cols])
cov_selEnv_plus2 <- cov(Popsenv[,sel_env_cols_plus2])
cov_allEnv
cov_selEnv_plus2
start_time <- Sys.time()
for (i in 1:nrow(cg_df)){
# get the row in PopsenvStnd for the common garden genotype
row1 = which(Popsenv==gsub("T","P",as.character(cg_df$Transplant[i])))
# get the row in PopsenvStnd for the genotype source
row2 = which(Popsenv==gsub("H","P",as.character(cg_df$Home[i])))
# Look up the envi (all var)
(envpop1_all <- Popsenv[row1,all_env_cols])
(envpop2_all <- Popsenv[row2,all_env_cols])
# Look up the envi selected only
(envpop1_sel <- Popsenv[row1,sel_env_cols])
(envpop2_sel <- Popsenv[row2,sel_env_cols])
# Look up the envi selected plus 2 correlated env
(envpop1_sel_plus2 <- Popsenv[row1,sel_env_cols_plus2])
(envpop2_sel_plus2 <- Popsenv[row2,sel_env_cols_plus2])
### Calculate the environmental distance between the two rows
# Euclidean distance for selective environments
cg_df$EdSelEnv[i] <- dist(rbind(envpop1_sel,
envpop2_sel))
# Mahalanobis distance for selective environments
cg_df$MdSelEnv[i] <- mahalanobis(as.numeric(envpop1_sel),
as.numeric(envpop2_sel),
cov_selEnv)
# Euclidean distance for ALL environments
cg_df$EdAllEnv[i] <- dist(rbind(envpop1_all,
envpop2_all))
# Mahalanobis distance for ALL environments
cg_df$MdAllEnv[i] <- mahalanobis(as.numeric(envpop1_all),
as.numeric(envpop2_all),
cov_allEnv)
# Euclidean distance for selective environments + 2 env
cg_df$EdSelEnvPlus2[i] <- dist(rbind(envpop1_sel_plus2,
envpop2_sel_plus2))
# Mahalanobis distance for selective environments + 2 env
cg_df$MdSelEnvPlus2[i] <- mahalanobis(as.numeric(envpop1_sel_plus2),
as.numeric(envpop2_sel_plus2),
cov_selEnv_plus2)
}
end_time <- Sys.time()
writeLines("Environmental distance calculation:")
print(end_time - start_time)
write.csv(cg_df,"CGfit_Dist.csv",row.names = F)
cg_df_Edges <- cg_df[as.numeric(substr(as.character(cg_df$Home),2,nchar(as.character(cg_df$Home))))%in%c(Edges,Cores),]
cg_df_Edges <- cg_df_Edges[as.numeric(substr(as.character(cg_df_Edges$Transplant),2,nchar(as.character(cg_df_Edges$Transplant))))%in%Edges,]
cg_df_Edges <- cg_df[as.numeric(substr(as.character(cg_df$Home),2,nchar(as.character(cg_df$Home))))%in%c(Edges,Cores),]
Edges <- c(1,5,6,10,12,19,41,50,51,60,82,89,91,95,96,100)
Cores <- c(34, 35, 36, 37, 44, 45, 46, 47, 54, 55, 56, 57, 64, 65, 66, 67)
cg_df_Edges <- cg_df[as.numeric(substr(as.character(cg_df$Home),2,nchar(as.character(cg_df$Home))))%in%c(Edges,Cores),]
cg_df_Edges <- cg_df_Edges[as.numeric(substr(as.character(cg_df_Edges$Transplant),2,nchar(as.character(cg_df_Edges$Transplant))))%in%Edges,]
cg_df_Cores <- cg_df[as.numeric(substr(as.character(cg_df$Home),2,nchar(as.character(cg_df$Home))))%in%c(Edges,Cores),]
cg_df_Cores <- cg_df_Cores[as.numeric(substr(as.character(cg_df_Cores$Transplant),2,nchar(as.character(cg_df_Cores$Transplant))))%in%Cores,]
View(cg_df_Edges)
View(cg_df_Cores)
View(cg_df)
dat_sum<-cor.test(x=cg_df$EdSelEnv, y=cg_df$Fitness, method = "spearman")
plot(x=cg_df$EdSelEnv, y=cg_df$Fitness, method = "spearman")
plot(x=cg_df$MdSelEnv, y=cg_df$Fitness, method = "spearman")
seed
plot(x=cg_df$EdSelEnvPlus2, y=cg_df$Fitness, method = "spearman")
plot(x=cg_df$MdSelEnvPlus2, y=cg_df$Fitness, method = "spearman")
seed=seed_table$V2[1]
#seed=seed_table$V2[21]
#seed=commandArgs(trailingOnly=T)
fit<-read.table(paste("results/SLiM_output/Sim_sum/",seed,"_Freq_ML_WF.txt",sep=""), header=T)
N<-data.frame(fit$n[1]*100)
colnames(N)<-"N"
if(ncol(fit)==613){
(specs<-data.frame(seed,fit[1,1:2],N,fit[1,3:12]))
plotTitle <- paste(colnames(specs)[1],":",specs[[1]],", ", colnames(specs)[2],":",specs[2],", ",colnames(specs)[3],":",specs[3],", ",colnames(specs)[4],":",specs[4],",",colnames(specs)[5],":",specs[5],"\n",colnames(specs)[6],":",specs[6],", ",colnames(specs)[7],":",specs[7],", ",colnames(specs)[8],":",specs[8],", ",colnames(specs)[9],":",specs[9],", ",colnames(specs)[10],":",specs[10], sep="")
fitt<-data.frame(t(fit[,-1:-13]))
} else {
(specs<-data.frame(seed,fit[1,1:2],N,fit[1,3:13])) # for case4
plotTitle <- paste(colnames(specs)[1],":",specs[[1]],", ", colnames(specs)[2],":",specs[2],", ",colnames(specs)[3],":",specs[3],", ",colnames(specs)[4],":",specs[4],",",colnames(specs)[5],":",specs[5],"\n",colnames(specs)[6],":",specs[6],", ",colnames(specs)[7],":",specs[7],", ",colnames(specs)[8],":",specs[8],", ",colnames(specs)[9],":",specs[9],", ",colnames(specs)[10],":",specs[10],", ",colnames(specs)[11],":",specs[11],sep="") # for case4
fitt<-data.frame(t(fit[,-1:-14])) # for case4
}
gen_nam <- paste("Gen",fit$Generation,sep="")
colnames(fitt)<-gen_nam
fitt$Location <- factor(rep(paste("P",1:100,sep=""),6), levels = unique(rep(paste("P",1:100,sep=""),6)))
fitt$Type <- as.factor(c(rep("Fit",100),rep("Freq",100),rep("Phen1",100), rep("Phen2",100),rep("Env1",100), rep("Env2",100)))
#######################################################
# Set up environmental vartiables for Gradient Forest
#######################################################
cg<-read.table(paste("results/SLiM_output/CG_files/",seed,"_fitnessmat_pop.txt",sep=""),header=F)
colnames(cg)<-rep(paste("H",seq(1:100),sep=""))
cg$Transplant<-paste("T",seq(1:100),sep="")
cg_df <- melt(cg,  id.vars ="Transplant",  variable.name = "Home",
value.name = "Fitness")
cg_df$Transplant<-factor(cg_df$Transplant,levels=unique(cg_df$Transplant))
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop1<-data.frame(fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop1) <- "envPop1"
fakeEnv1 <- envPop1$envPop1 + rnorm(nrow(envPop1),0,1.3)
cor(envPop1$envPop1, fakeEnv1)
envPop2<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop2) <- "envPop2"
fakeEnv2 <- envPop2$envPop2 + rnorm(nrow(envPop2),0,1.3)
# this standard deviation generally produces a correlation between 0.3 and 0.6
cor(envPop2$envPop2, fakeEnv2)
Pop <- levels(fitt$Location)
Popsenv <- data.frame(Pop, envPop1,envPop2,fakeEnv1,fakeEnv2)
nfake <- 10
Popsenv[,6:(5+nfake)] <- NA
cov1 <- genPositiveDefMat(nfake,covMethod="unifcorrmat" )
head(cov1)
a<- mvrnorm(nrow(Popsenv),mu=rep(0, nfake), Sigma=cov1$Sigma)
Popsenv[,6:(5+nfake)] <- a
sel_env_cols <- 2:3
all_env_cols <- 2:ncol(Popsenv)
sel_env_cols_plus2 <- 2:5
cov_allEnv <- cov(Popsenv[,all_env_cols])
cov_selEnv <- cov(Popsenv[,sel_env_cols])
cov_selEnv_plus2 <- cov(Popsenv[,sel_env_cols_plus2])
start_time <- Sys.time()
for (i in 1:nrow(cg_df)){
# get the row in PopsenvStnd for the common garden genotype
row1 = which(Popsenv==gsub("T","P",as.character(cg_df$Transplant[i])))
# get the row in PopsenvStnd for the genotype source
row2 = which(Popsenv==gsub("H","P",as.character(cg_df$Home[i])))
# Look up the envi (all var)
(envpop1_all <- Popsenv[row1,all_env_cols])
(envpop2_all <- Popsenv[row2,all_env_cols])
# Look up the envi selected only
(envpop1_sel <- Popsenv[row1,sel_env_cols])
(envpop2_sel <- Popsenv[row2,sel_env_cols])
# Look up the envi selected plus 2 correlated env
(envpop1_sel_plus2 <- Popsenv[row1,sel_env_cols_plus2])
(envpop2_sel_plus2 <- Popsenv[row2,sel_env_cols_plus2])
### Calculate the environmental distance between the two rows
# Euclidean distance for selective environments
cg_df$EdSelEnv[i] <- dist(rbind(envpop1_sel,
envpop2_sel))
# Mahalanobis distance for selective environments
cg_df$MdSelEnv[i] <- mahalanobis(as.numeric(envpop1_sel),
as.numeric(envpop2_sel),
cov_selEnv)
# Euclidean distance for ALL environments
cg_df$EdAllEnv[i] <- dist(rbind(envpop1_all,
envpop2_all))
# Mahalanobis distance for ALL environments
cg_df$MdAllEnv[i] <- mahalanobis(as.numeric(envpop1_all),
as.numeric(envpop2_all),
cov_allEnv)
# Euclidean distance for selective environments + 2 env
cg_df$EdSelEnvPlus2[i] <- dist(rbind(envpop1_sel_plus2,
envpop2_sel_plus2))
# Mahalanobis distance for selective environments + 2 env
cg_df$MdSelEnvPlus2[i] <- mahalanobis(as.numeric(envpop1_sel_plus2),
as.numeric(envpop2_sel_plus2),
cov_selEnv_plus2)
}
end_time <- Sys.time()
writeLines("Environmental distance calculation:")
print(end_time - start_time)
plot(x=cg_df$EdSelEnv, y=cg_df$Fitness, method = "spearman")
plot(x=cg_df$MdSelEnv, y=cg_df$Fitness, method = "spearman")
plot(x=cg_df$EdSelEnvPlus2, y=cg_df$Fitness, method = "spearman")
plot(x=cg_df$MdSelEnvPlus2, y=cg_df$Fitness, method = "spearman")
?cor.test
load("E:/Research_AJL/TTT_Offset_Vulnerability_GF_Sims/results/R_results/2889863491989.RData")
plot(x=cg_df$D_CI_allEnv, y=cg_df$Fitness)
plot(x=cg_df$D_CI_causEnv, y=cg_df$Fitness)
plot(x=cg_df$D_CI_caus_allEnv, y=cg_df$Fitness)
plot(x=cg_df$D_CI_caus_causEnv, y=cg_df$Fitness)
plot(x=cg_df$EdSelEnv, y=cg_df$Fitness)
plot(x=cg_df$MdSelEnv, y=cg_df$Fitness)
plot(x=cg_df$EdAllEnv, y=cg_df$Fitness)
plot(x=cg_df$MdAllEnv, y=cg_df$Fitness)
plot(plot(x=cg_df$MdAllEnv, y=cg_df$Fitness)
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
dat_sum<-cor.test(x=cg_df$MdSelEnvPlus2, y=cg_df$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Pre_FST_Cores[is.na(Pre_FST_Cores)]<-0
Pre_FST_Edge[is.na(Pre_FST_Edge)]<-0
Pre_FST_sel_Cores[is.na(Pre_FST_sel_Cores)]<-0
Pre_FST_sel_Edge[is.na(Pre_FST_sel_Edge)]<-0
cg_df_Edges <- cg_df[as.numeric(substr(as.character(cg_df$Home),2,nchar(as.character(cg_df$Home))))%in%c(Edges,Cores),]
cg_df_Edges <- cg_df_Edges[as.numeric(substr(as.character(cg_df_Edges$Transplant),2,nchar(as.character(cg_df_Edges$Transplant))))%in%Edges,]
cg_df_Edges$Pre_FST <- as.vector(Pre_FST_Edge)
cg_df_Edges$Pre_FSt_sel <- as.vector(Pre_FST_sel_Edge)
cg_df_Cores <- cg_df[as.numeric(substr(as.character(cg_df$Home),2,nchar(as.character(cg_df$Home))))%in%c(Edges,Cores),]
cg_df_Cores <- cg_df_Cores[as.numeric(substr(as.character(cg_df_Cores$Transplant),2,nchar(as.character(cg_df_Cores$Transplant))))%in%Cores,]
cg_df_Cores$Pre_FST <- as.vector(Pre_FST_Cores)
cg_df_Cores$Pre_FSt_sel <- as.vector(Pre_FST_sel_Cores)
#compare edge pops
dat_sum<-cor.test(x=cg_df_Edges$D_CI_allEnv, y=cg_df_Edges$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
summary(dat_sum)
GF_off_genome_allEnv_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$D_CI_causEnv, y=cg_df_Edges$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
GF_off_genome_causEnv_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$D_CI_caus_allEnv, y=cg_df_Edges$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
GF_off_causal_allEnv_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$D_CI_caus_causEnv, y=cg_df_Edges$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
GF_off_causal_causEnv_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$EdSelEnv, y=cg_df_Edges$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_ED_caus_env_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$MdSelEnv, y=cg_df_Edges$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_MD_caus_env_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$EdAllEnv, y=cg_df_Edges$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_ED_all_env_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$MdAllEnv, y=cg_df_Edges$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_MD_all_env_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$EdSelEnvPlus2, y=cg_df_Edges$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_ED_causP2_env_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$MdSelEnvPlus2, y=cg_df_Edges$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_MD_causP2_env_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$Pre_FST, y=cg_df_Edges$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
FST_genome_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$Pre_FSt_sel, y=cg_df_Edges$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
FST_causal_Edges <- round(dat_sum$estimate[[1]],3)
#compare core pops
dat_sum<-cor.test(x=cg_df_Cores$D_CI_allEnv, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
GF_off_genome_allEnv_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$D_CI_causEnv, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
GF_off_genome_causEnv_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$D_CI_caus_allEnv, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
GF_off_causal_allEnv_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$D_CI_caus_causEnv, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
GF_off_causal_causEnv_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$EdSelEnv, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_ED_caus_env_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$MdSelEnv, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_MD_caus_env_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$EdAllEnv, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_ED_all_env_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$MdAllEnv, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_MD_all_env_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$EdSelEnvPlus2, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_ED_causP2_env_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$MdSelEnvPlus2, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_MD_causP2_env_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$Pre_FST, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
FST_genome_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$Pre_FSt_sel, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
FST_causal_Cores <- round(dat_sum$estimate[[1]],3)
case <- data.frame(GF_off_genome_allEnv_Edges,
GF_off_genome_causEnv_Edges,
GF_off_causal_allEnv_Edges,
GF_off_causal_causEnv_Edges,
Env_ED_caus_env_Edges,
Env_MD_caus_env_Edges,
Env_ED_all_env_Edges,
Env_MD_all_env_Edges,
Env_ED_causP2_env_Edges,
Env_MD_causP2_env_Edges,
FST_genome_Edges,
FST_causal_Edges,
GF_off_genome_allEnv_Cores,
GF_off_genome_causEnv_Cores,
GF_off_causal_allEnv_Cores,
GF_off_causal_causEnv_Cores,
Env_ED_caus_env_Cores,
Env_MD_caus_env_Cores,
Env_ED_all_env_Cores,
Env_MD_all_env_Cores,
Env_ED_causP2_env_Cores,
Env_MD_causP2_env_Cores,
FST_genome_Cores,
FST_causal_Cores)
write.csv(case, paste("results/R_results/Case",seed_table$V5[w],"_",seed,"_corr_allEnv.csv",sep=""),row.names = F)
save.image(paste("results/R_results/",seed,".RData",sep=""))
rm(list=ls())
gc()
}
?cor
print("Hello World!")
seq(from = 1, to = 7, by = 2)
print("Hello World!")
seq(from = 1, to = 7, by = 2) #We'll cover this soon
x <- seq(10)
print(x)
print(x*3)
seq(1,10,1)
help(seq)
?seq
seq(to=10,by=1,from=1)
y <- seq(from = 2, to = 20, by = 2)
ls()
data.frame(x,y)
datf <- data.frame(x,y)
class(datf)
class(x)
class(y)
letters
LETTERS
z <- letters[1:10]
(z <- letters[1:10])
class(z)
datf <- data.frame(x,y,z)
summary(datf)
str(datf)
