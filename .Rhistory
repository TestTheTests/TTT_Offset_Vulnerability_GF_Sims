colnames(gfTrans1)<-"C.Imp_genome_before"
gfTrans2 <- predict(gfMod, envPop.shift)
colnames(gfTrans2)<-"C.Imp_genome_after"
# offset needs to be considered using absolute values ()
offset <- gfTrans2-gfTrans1
offset <- gfTrans2-gfTrans1
colnames(offset)<-"D_C.Imp_genome"
#Create an object listing every population in the whole dataset
PopsALL <- NULL
for(j in rep(1:100)){
for(i in rep(j,100)){
PopsALL <- c(PopsALL,i)
}
}
#Create an object splitting a single population into a Pre ("T1") and Post ("T2") "population"
PopsP <- c(rep("T1",100),rep("T2",100))
#geno1 <- vcf1@gt[,-1]
geno2 <- vcf2@gt[,-1]
position2 <- getPOS(vcf2) # Positions in bp
chromosome2 <- getCHROM(vcf2) # Chromosome information
G2 <- matrix(NA, nrow = nrow(geno2), ncol = ncol(geno2))
G2[geno2 %in% c("0/0", "0|0")] <- 0
G2[geno2  %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G2[geno2 %in% c("1/1", "1|1")] <- 2
#Calculate allele frequencies across the whole meta population
a_freq1 <- rowSums(G1)/(2*ncol(G1))
a_freq2 <- rowSums(G2)/(2*ncol(G2))
#Prepare the Pre (G1) and Post (G2) G matrices for FST calculation
Gt1<-t(G1)
rownames(Gt1)<-PopsALL
#colnames(Gt1)<-MID_pre
colnames(Gt1)<-paste("M",position1,sep="")
Gt2<-t(G2)
rownames(Gt2)<-PopsALL
#colnames(Gt2)<-MID_post
colnames(Gt2)<-paste("M",position2,sep="")
#Add loop to iterate across each TRUE population, not just x-location
#Filter by population (same pop. before and after env. shift)
listGt<-list()
for(i in 1:100){
Gt1_i<-data.frame(Gt1[rownames(Gt1)==i,])
Gt2_i<-data.frame(Gt2[rownames(Gt2)==i,])
Gt1_i[setdiff(names(Gt2_i), names(Gt1_i))] <- 0
Gt2_i[setdiff(names(Gt1_i), names(Gt2_i))] <- 0
listGt[[i]]<-rbind(Gt1_i,Gt2_i)
}
#Filter the files based on Major and Minor AF filtration, then seed the files so that all variants are present at both time points to be compared
a_freq<-list()
a_freq_filt<-list()
listGt_filt<-list()
for(i in 1:100){
a_freq[[i]] <- colSums(listGt[[i]])/(2*nrow(listGt[[i]]))
a_freq_filt[[i]] <- a_freq[[i]][a_freq[[i]]>0.05 & a_freq[[i]]<0.95]
listGt_filt[[i]]<-listGt[[i]][colnames(listGt[[i]])%in%names(a_freq_filt[[i]])]
}
#Calculate per locus FST values
listPfst<-list()
for(i in 1:100){
listPfst[[i]]<-MakeDiploidFSTMat(SNPmat = listGt_filt[[i]], locusNames = colnames(listGt_filt[[i]]), popNames = PopsP)
}
#Filter out NA values
listPfst_noNa<-list()
for(i in 1:100){
listPfst_noNa<-lapply(listPfst,function(x) x[!is.na(x$FST),])
}
#Calculate FST values for each populations
FST_genome_pop<-NULL
for(i in 1:100){
FST_genome_pop<-c(FST_genome_pop,mean(listPfst_noNa[[i]]$T1)/mean(listPfst_noNa[[i]]$T2))
}
#Pull out only the M2 allele
Gt1_m2<-matrix(Gt1[,positionM2])
colnames(Gt1_m2)<-positionM2
rownames(Gt1_m2)<-PopsALL
Gt2_m2<-matrix(Gt2[,positionM2])
colnames(Gt2_m2)<-positionM2
rownames(Gt2_m2)<-PopsALL
listGt_m2<-list()
for(i in 1:100){
Gt1_m2i<-matrix(Gt1_m2[rownames(Gt1_m2)==i,])
colnames(Gt1_m2i)<-positionM2
rownames(Gt1_m2i)<-PopsALL[which(PopsALL==i)]
Gt2_m2i<-matrix(Gt2_m2[rownames(Gt2_m2)==i,])
colnames(Gt2_m2i)<-positionM2
rownames(Gt2_m2i)<-PopsALL[which(PopsALL==i)]
listGt_m2[[i]]<-rbind(Gt1_m2i,Gt2_m2i)
}
#test<-data.frame(listGt_m2[[17]],PopsP)
getFSTs_diploids = function(popNameList, SNPDataColumn){
#eliminating the missing data for this locus
popnames=unlist(as.character(popNameList))
popNameTemp=popnames[which(SNPDataColumn!=9)]
snpDataTemp=SNPDataColumn[SNPDataColumn!=9]
HetCounts <- tapply(snpDataTemp, list(popNameTemp,snpDataTemp), length)
HetCounts[is.na(HetCounts)] = 0
#Case: all individuals are genetically identical at this locus
if(dim(HetCounts)[2]==1){
return (list(He=NA,FST=NA, T1=NA, T2=NA,FSTNoCorr=NA, T1NoCorr=NA, T2NoCorr=NA,meanAlleleFreq = NA))
}
if(dim(HetCounts)[2]==2){
if(paste(colnames(HetCounts),collapse="")=="01"){HetCounts=cbind(HetCounts,"2"=0)}
if(paste(colnames(HetCounts),collapse="")=="12"){HetCounts=cbind("0"=0,HetCounts)}
if(paste(colnames(HetCounts),collapse="")=="02"){HetCounts=cbind(HetCounts[,1],"1"=0, HetCounts[,2])}
}
out = WC_FST_Diploids_2Alleles(HetCounts)
return(out)
}
MakeDiploidFSTMat_2<-function(SNPmat,locusNames,popNames){
locusname <- unlist(locusNames)
popname <- unlist(popNames)
snplevs <- levels(as.factor(unlist(SNPmat)))
if(any(!(snplevs%in%c(0,1,2,9)))==TRUE) {
print("Error: Your snp matrix has a character other than 0,1,2 or 9")
break
}
if (dim(SNPmat)[1] != length(popname)) {
print("Error: your population names do not match your SNP matrix")
break
}
if (dim(SNPmat)[2] != length(locusname)) {
print("Error:  your locus names do not match your SNP matrix")
break
}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat <- matrix(NA, nrow = nloci, ncol = 8)
for (i in 1:nloci) {
FSTmat[i, ] = unlist(getFSTs_diploids(popname, SNPmat[,i]))
if (i%%10000 == 0) {
print(paste(i, "done of", nloci))
}
}
outTemp = as.data.frame(FSTmat)
outTemp = cbind(locusname, outTemp)
colnames(outTemp) = c("LocusName", "He", "FST", "T1", "T2",
"FSTNoCorr", "T1NoCorr", "T2NoCorr", "meanAlleleFreq")
return(outTemp)
}
#Calculate M2 locus FST values
list_M2_Pfst<-list()
for(i in 1:100){
list_M2_Pfst[[i]]<-MakeDiploidFSTMat_2(SNPmat = listGt_m2[[i]], locusNames = colnames(listGt_m2[[i]]), popNames = PopsP)
}
#Filter out NA values
list_M2_Pfst_noNa<-list()
for(i in 1:100){
list_M2_Pfst_noNa<-lapply(list_M2_Pfst,function(x) x[!is.na(x$FST),])
}
#Calculate M2 FST values for each populations
FST_M2_pop<-NULL
for(i in 1:100){
FST_M2_pop<-c(FST_M2_pop,mean(list_M2_Pfst_noNa[[i]]$T1)/mean(list_M2_Pfst_noNa[[i]]$T2))
}
for(i in 1:length(FST_M2_pop)){
if(is.na(FST_M2_pop[i])){
FST_M2_pop[i]<-0
}
}
##
#Get per population FST pre and post environmental shift
#Fst_Pre<-list()
#for(i in 1:100){
Fst_Pre<-MakeDiploidFSTMat_2(SNPmat = Gt1, locusNames = colnames(Gt1), popNames = PopsALL)
#}
########################################################
Gt1f<-t(G1f)
rownames(Gt1f)<-PopsALL
colnames(Gt1f)<-paste("M",position1_filt,sep="")
#colnames(Gt1f)<-MID_pre_filt
#Calculate per locus FST values pre environmental shift
Pfst_pre_filt<-MakeDiploidFSTMat(SNPmat = Gt1f, locusNames = colnames(Gt1f), popNames = PopsALL)
#Filter out NA values
Pfst_pre_noNa<-Pfst_pre_filt[!is.na(Pfst_pre_filt$FST),]
#ink_bef<-data.frame(cor(Gt1_m2,Gt1f[,colnames(Gt1f)!=M2_MID],method="pearson"))
#Heterozgosity per allele before env. shift
Het_bef<-Pfst_pre_filt$He
#Calculate FST value for each allele pre environmental shift
F_ST_ll1<-Pfst_pre_noNa$T1/Pfst_pre_noNa$T2
#Calculate FST values averaged across each allele pre environmental shift
F_ST_l1<-mean(Pfst_pre_noNa$T1)/mean(Pfst_pre_noNa$T2)
Gt2f<-t(G2f)
rownames(Gt2f)<-PopsALL
#colnames(Gt2f)<-MID_post_filt
colnames(Gt2f)<-paste("M",position2_filt,sep="")
#Calculate per locus FST values post environmental shift
Pfst_post<-MakeDiploidFSTMat(SNPmat = Gt2f, locusNames = colnames(Gt2f), popNames = PopsALL)
#Filter out NA values
Pfst_post_noNa<-Pfst_post[!is.na(Pfst_post$FST),]
#Heterozgosity per allele after env. shift
Het_aft<-Pfst_post_noNa$He
#Calculate FST value for each allele pre environmental shift
F_ST_ll2<-Pfst_post_noNa$T1/Pfst_post_noNa$T2
#Calculate FST values for each  allele pre environmental shift
F_ST_l2<-mean(Pfst_post_noNa$T1)/mean(Pfst_post_noNa$T2)
#Pop_afreq2 is not filtered for MAF in order to properly compare all AF shifts from Pop_afreq1
Pop_afreq2<-NULL
for(i in 1:100){
Pop_afreq2<-rbind(Pop_afreq2,rowSums(G2[,Start[i]:Stop[i]])/(2*ncol(G2[,Start[i]:Stop[i]])))
}
Pop_afreq2<-data.frame(Pop_afreq2)
colnames(Pop_afreq2)<-paste("M",position2,sep="")
#stopCluster(cl)
##################################
#Population specific summary stats
##################################
#Location values
Loc <- NULL
for(j in 1:10){
for(i in 1:10){
Loc <- c(Loc,paste("A",i,sep=""))
}
}
Loc<-factor(Loc,levels=Loc[1:10])
#Population values
Pop <- NULL
for(i in 1:100){
Pop <- c(Pop,paste("P",i,sep=""))
}
X <- NULL
for(j in 1:10){
for(i in 1:10){
X <- c(X,i)
}
}
Y <- NULL
for(j in 1:10){
Y<-c(Y,rep(j,10))
}
Env_before<-envPop$envSelect
Env_after<-envPop.shift$envSelect
Diff_env<-Env_after-Env_before
Env_range<- envPop$envSelect%in%round(envPop.shift$envSelect,1)&round(envPop.shift$envSelect,1)%in%envPop$envSelect
M2_AF_before<-data.frame(Pop_afreq1[,c(which(colnames(Pop_afreq1)==positionM2))])
colnames(M2_AF_before)<-"M2_AF_before"
M2_AF_after<-data.frame(Pop_afreq2[,c(which(colnames(Pop_afreq2)==positionM2))])
colnames(M2_AF_after)<-"M2_AF_after"
M2_AF_diff<-M2_AF_after-M2_AF_before
colnames(M2_AF_diff)<-"M2_AF_diff"
M1_AF_before_all<-Pop_afreq1[,-which(colnames(Pop_afreq1)==positionM2)]
M1_AF_after_all<-Pop_afreq2[,-which(colnames(Pop_afreq2)==positionM2)]
#If neutral
M1_AF_before_all<-Pop_afreq1
M1_AF_after_all<-Pop_afreq2
M1_AF_before_shared<-M1_AF_before_all[colnames(M1_AF_before_all)%in%colnames(M1_AF_after_all)]
M1_AF_after_shared<-M1_AF_after_all[colnames(M1_AF_after_all)%in%colnames(M1_AF_before_all)]
M1_AF_before<-data.frame(rowMeans(M1_AF_before_shared))
colnames(M1_AF_before)<-"M1_AF_before"
M1_AF_after<-data.frame(rowMeans(M1_AF_after_shared))
colnames(M1_AF_after)<-"M1_AF_after"
M1_AF_diff<-M1_AF_after-M1_AF_before
colnames(M1_AF_diff)<-"M1_AF_diff"
F_ST_genome_bef.aft.<-data.frame(FST_genome_pop)
colnames(F_ST_genome_bef.aft.)<-"F_ST_genome_bef.aft."
F_ST_M2_bef.aft.<-data.frame(FST_M2_pop)
colnames(F_ST_M2_bef.aft.)<-"F_ST_M2_bef.aft."
Rel_Fit_before <- data.frame(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)-30]])
colnames(Rel_Fit_before)<-"Rel_Fit_before"
Rel_Fit_after <- data.frame(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)]])
colnames(Rel_Fit_after)<-"Rel_Fit_after"
Rel_Fit_diff<-Rel_Fit_after-Rel_Fit_before
colnames(Rel_Fit_diff)<-"Rel_Fit_diff"
Pop_size<-rep(specs$n,100)
Summary_Pop<-cbind(Pop,X,Y,Env_before,Env_after,Diff_env,Env_range,gfTrans1,gfTrans2,offset,gfM2Trans1,gfM2Trans2,M2offset,M2_AF_before,M2_AF_after,M2_AF_diff,M1_AF_before,M1_AF_after,M1_AF_diff,F_ST_genome_bef.aft.,F_ST_M2_bef.aft.,Rel_Fit_before,Rel_Fit_after,Rel_Fit_diff)
#If neutral:
Pop_size<-unlist(rep(unname(specs[9:18]),10))
Summary_Pop<-cbind(Pop,X,Y,Pop_size,Env_before,Env_after,Diff_env,Env_range,gfTrans1,gfTrans2,offset,gfM2Trans1=0,gfM2Trans2=0,M2offset=0,M2_AF_before=0,M2_AF_after=0,M2_AF_diff=0,M1_AF_before,M1_AF_after,M1_AF_diff,F_ST_genome_bef.aft.,F_ST_M2_bef.aft.=0,Rel_Fit_before,Rel_Fit_after,Rel_Fit_diff)
#Summary_Pop<-cbind(Pop,X,Y,Env_before,Env_after,Diff_env,Env_range,gfTrans1,gfTrans2,offset,gfM2Trans1=0,gfM2Trans2=0,M2offset=0,M2_AF_before=0,M2_AF_after=0,M2_AF_diff=0,M1_AF_before,M1_AF_after,M1_AF_diff,F_ST_genome_bef.aft.,F_ST_M2_bef.aft.=0,Rel_Fit_before,Rel_Fit_after,Rel_Fit_diff)
#write.csv(Summary_Pop,file=paste("Summary_Pop_",seed,".csv",sep=""),row.names=F)
#Summary_Pop<-read.csv("Summary_Pop_1576675870126.csv")
##################################
# Allele specific summary stats
##################################
R2<-data.frame(gfMod$result)
colnames(R2)<-"R2"
R0<-colnames(alFreq[,!colnames(alFreq)%in%names(gfMod$result)])
R0<-data.frame(rep(0,length(R0)),row.names = colnames(alFreq[,!colnames(alFreq)%in%names(gfMod$result)]))
colnames(R0)<-"R2"
R2_all<-rbind(R2,R0)
Rho_Env<-cor(as.matrix(alFreq),envPop,method = "spearman")
colnames(Rho_Env)<-"Rho_Env"
temp<-merge(R2_all,Rho_Env,by="row.names")
#PreN
#F_ST_llb
#F_ST_lla
Linkage<-NULL
position1_filt_scaled<-NULL
for(i in 1:length(position1_filt)){
if(position1_filt[i]>0 & position1_filt[i]<50001){
Linkage<-c(Linkage,1)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i])
}
if(position1_filt[i]>50000 & position1_filt[i]<100001){
Linkage<-c(Linkage,2)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-50000)
}
if(position1_filt[i]>100000 & position1_filt[i]<150001){
Linkage<-c(Linkage,3)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-100000)
}
if(position1_filt[i]>150000 & position1_filt[i]<200001){
Linkage<-c(Linkage,4)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-150000)
}
if(position1_filt[i]>200000 & position1_filt[i]<250001){
Linkage<-c(Linkage,5)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-200000)
}
if(position1_filt[i]>250000 & position1_filt[i]<300001){
Linkage<-c(Linkage,6)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-250000)
}
if(position1_filt[i]>300000 & position1_filt[i]<350001){
Linkage<-c(Linkage,7)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-300000)
}
if(position1_filt[i]>350000 & position1_filt[i]<400001){
Linkage<-c(Linkage,8)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-350000)
}
if(position1_filt[i]>400000 & position1_filt[i]<450001){
Linkage<-c(Linkage,9)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-400000)
}
if(position1_filt[i]>450000 & position1_filt[i]<500001){
Linkage<-c(Linkage,10)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-450000)
}
}
#PreN$LG<-Linkage
#PreN[rownames(PreN)!=Pfst_pre_filt$LocusName,]
#PreN$FST<-Pfst_pre_filt$FST
#PreN$DistM2<-abs(PreN$PP-PreN$PP[PreN$LT=="M2"])
##################################
# Simulation specific summary stats
##################################
No_A<-unname(dim(vcf1_filt)[1])
PR2<-gfMod$species.pos.rsq/No_A
#PR2_UL
F_ST_l1
F_ST_l2
Rel.Fit_l1<-mean(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)-30]])
Rel.Fit_l2<-mean(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)]])
Rho_EnvR2<-cor(temp$Rho_Env,temp$R2,method = "spearman")
require(ggplot2)
require(cowplot)
require(qqman)
require(RColorBrewer)
colfunc<-colorRampPalette(c("orange","cyan"))
#plot(c(1:10),rep(1,10),col=colfunc(10),pch=19,cex=5) #Get color gradients for matrix image
#fit[1,210:309]<-fit[2,210:309]
plot(fit$Gen,fit$P19_env,type="l", main=plotTitle, xlab="Generations",ylab="Environmental variable",col="white",ylim=c(-5,10))
k=1
for(i in 209:308){
lines(fit$Gen,fit[,i],lwd=2,col=colfunc(10)[k])
k=k+1
}
#par(fig = c(0,1,0,1))
plot(fit$Gen,fit$P19_fit,type="l",main=plotTitle ,xlab="Generations",ylab="Relative Fitness",col="red",ylim=c(min(fit[,c(9:108)]),max(fit[,c(9:108)])))
x=1:10
y=1:10
for(i in x){
for(j in y){
k=((i - 1) + (j - 1) * 10 + 9)
print(k)
lines(fit$Gen,fit[,k],col=colfunc(10)[i])
}
}
lines(fit$Gen,fit$P19_fit, col="red")
#par(fig = c(0,1,0,1))
plot(fit$Gen,fit$P19_freq,type="l", main=plotTitle, xlab="Generations",ylab="Mutant allele frequency",col="red",ylim=c(0,1))
x=1:10
y=1:10
for(i in x){
for(j in y){
k=((i - 1) + (j - 1) * 10 + 109)
lines(fit$Gen,fit[,k],col=colfunc(10)[i])
}
}
lines(fit$Gen,fit$P19_freq, col="red")
ggplot()+
geom_boxplot(aes(x=fitt[fitt$Type=="Env",]$Location,y=fitt[fitt$Type=="Freq",]$Gen301,col=fitt[fitt$Type=="Freq",]$Location))+
scale_colour_manual(values = colfunc(10))+
xlab("Environment type")+
ylab("Allele frequency of allele under selection")+
theme_classic()+
theme(legend.position = "none")
ggplot()+
geom_boxplot(aes(x=fitt[fitt$Type=="Env",]$Location,y=fitt[fitt$Type=="Freq",]$Gen601,col=fitt[fitt$Type=="Freq",]$Location))+
scale_colour_manual(values = colfunc(10))+
xlab("Environment type")+
ylab("Allele frequency of allele under selection")+
theme_classic()+
theme(legend.position = "none")
ggplot()+
geom_boxplot(aes(x=fitt[fitt$Type=="Env",]$Location,y=Pop_afreq1$M224999,col=fitt[fitt$Type=="Freq",]$Location))+
scale_colour_manual(values = colfunc(10))+
xlab("Environment type")+
ylab("Allele frequency of allele under selection")+
theme_classic()+
theme(legend.position = "none")
ggplot()+
geom_boxplot(aes(x=fitt[fitt$Type=="Env",]$Location,y=Pop_afreq2$M224999,col=fitt[fitt$Type=="Freq",]$Location))+
scale_colour_manual(values = colfunc(10))+
xlab("Environment type")+
ylab("Allele frequency of allele under selection")+
theme_classic()+
theme(legend.position = "none")
fitt[fitt$Type=="Freq",]$Gen301 - Pop_afreq1$M224999
fitt[fitt$Type=="Freq",]$Gen601 - Pop_afreq2$M224999
ggplot() +
geom_line(aes(x=Env_before, y=gfM2Trans1$C.Imp_M2_before), colour=rgb(0,0,0,0.4), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="Cumulative Importance", x="Environment") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
ggtitle(paste(plotTitle,"Gen. 300")) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
ggplot() +
geom_line(aes(x=Env_before, y=gfTrans1$C.Imp_genome_before), colour=rgb(0,0,0,0.4), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="GF Cumulative Importance", x="Environment") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
ggtitle(paste(plotTitle,"Gen. 300")) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
plotTitle
specs
specs[7]
colnames(specs)[8]
specs[2]
colnames(specs)[2]
N
colnames(N)<-"N"
(specs<-data.frame(seed,N,fit[1,c(1,12:16)],fit[1,c(2:11)]))
plotTitle <- paste(colnames(specs)[1],":",specs[[1]],", ", colnames(specs)[2],":",specs[2],", ",colnames(specs)[3],":",specs[3],", ",colnames(specs)[4],":",1e-7,",",colnames(specs)[5],":",specs[5],", ",colnames(specs)[6],":",specs[6],", ",colnames(specs)[7],":",specs[7],", ",colnames(specs)[8],":",specs[8],sep="")
ggplot() +
geom_line(aes(x=Env_before, y=gfTrans1$C.Imp_genome_before), colour=rgb(0,0,0,0.4), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="GF Cumulative Importance", x="Environment") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
ggtitle(paste(plotTitle,"Gen. 300")) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
#par(mfrow=c(2,2),bty="l",mar=c(4,4,1,1))
plot(Summary_Pop$F_ST_genome_bef.aft.,Summary_Pop$D_C.Imp_genome,col=colfunc(10),pch=19, cex=2,ylab="GF Gen offset Genome",xlab=expression(paste("True Gen offset (F"[ST]," Genome)")))
#abline(lm(Summary_Pop$D_C.Imp_genome~Summary_Pop$F_ST_genome_bef.aft.),col="red")
rho_test<-cor.test(Summary_Pop$D_C.Imp_genome,Summary_Pop$F_ST_genome_bef.aft., method = "spearman" )
text(adj=0, max(Summary_Pop$F_ST_genome_bef.aft.)-max(Summary_Pop$F_ST_genome_bef.aft.)*0.15,max(Summary_Pop$D_C.Imp_genome)-max(Summary_Pop$D_C.Imp_genome)*0.1,paste("Rho = ",round(rho_test$estimate,2), "\np-value = ",round(rho_test$p.value,2), sep=""))
rho_test<-cor.test(Summary_Pop$D_C.Imp_genome,Summary_Pop$F_ST_genome_bef.aft., method = "spearman" )
ggplot(data=Summary_Pop,aes(x=Summary_Pop$F_ST_genome_bef.aft.,y=Summary_Pop$D_C.Imp_genome,color=Summary_Pop$X,size=2))+
geom_point()+
ylab("GF Gen offset Genome")+
xlab(expression(paste("True Gen offset (F"[ST]," Genome)")))+
scale_colour_gradientn(colours = colfunc(10))+
theme_classic(base_size = 16)+
theme(legend.position = "none")+
geom_smooth(method='lm',col="red",size=1,se=F)+
annotate("text", x = max(Summary_Pop$F_ST_genome_bef.aft.)-max(Summary_Pop$F_ST_genome_bef.aft.)*0.15, y = min(Summary_Pop$D_C.Imp_genome)+min(Summary_Pop$D_C.Imp_genome)*0.1, label = paste("Rho = ",round(rho_test$estimate,3), "\np-value = ",round(rho_test$p.value,7), sep=""))
CHR_data <- data.frame (SNP = Pfst_pre_filt$LocusName , CHR=Linkage, BP= position1_filt_scaled, P=Pfst_pre_filt$FST)
# Plot !
manhattan(CHR_data , suggestiveline = F, genomewideline = F , logp=F, col=brewer.pal(5, "Set2") , cex=0.7, main=plotTitle, ylab=expression(paste("True Gen offset (F"[ST],")")))
abline(h=0.15,col="red")
#plot(PreN$DistM2,PreN$FST)
rho_test<-cor.test(Summary_Pop$D_C.Imp_genome,Summary_Pop$Pop_size, method = "spearman" )
ggplot(data=Summary_Pop,aes(x=Summary_Pop$D_C.Imp_genome,y=Summary_Pop$Pop_size,color=Summary_Pop$X,size=2))+
geom_point()+
ylab("Deme size")+
xlab(expression(paste("GF Gen offset Genome")))+
scale_colour_gradientn(colours = colfunc(10))+
theme_classic(base_size = 16)+
theme(legend.position = "none")+
geom_smooth(method='lm',col="red",size=1,se=F)+
annotate("text", x = max(Summary_Pop$D_C.Imp_genome)-max(Summary_Pop$D_C.Imp_genome)*0.15, y = max(Summary_Pop$Pop_size)-max(Summary_Pop$Pop_size)*0.1, label = paste("Rho = ",round(rho_test$estimate,3), "\np-value = ",round(rho_test$p.value,18), sep=""))
