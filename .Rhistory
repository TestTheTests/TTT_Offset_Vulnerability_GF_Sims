require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
require(foreach)
require(doParallel)
require(pbapply)
require(gdata)
require(data.table)
require(PresenceAbsence)
require(ROCR)
require(modEvA)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(stringr)
require(reshape2)
require(hierfstat)
#setwd("/Users/akijarl/Desktop/PostDoc/TTT_Offset_Vulnerability_GF_Sims/")
#setwd("/Users/akijarl/Desktop/TTT_Offset_Vulnerability_GF_Sims/")
setwd("E:/Research_AJL/TTT_Offset_Vulnerability_GF_Sims/")
seed = 1599298910931
#fit<-read.table(paste("Fit_SP_100_",seed,".txt",sep=""),fill=T)
fit<-read.table(paste("results/SLiM_output/Sim_sum/",seed,"_Freq_ML_WF.txt",sep=""))
fit_nam <- NULL
for(i in 1:100){
fit_nam <- c(fit_nam,paste("P",i,"_fit",sep=""))
}
freq_nam <- NULL
for(i in 1:100){
freq_nam <- c(freq_nam,paste("P",i,"_freq",sep=""))
}
phen1_nam <- NULL
for(i in 1:100){
phen1_nam <- c(phen1_nam,paste("P",i,"_phen",sep=""))
}
phen2_nam <- NULL
for(i in 1:100){
phen2_nam <- c(phen2_nam,paste("P",i,"_phen",sep=""))
}
env1_nam <- NULL
for(i in 1:100){
env1_nam <- c(env1_nam,paste("P",i,"_env1",sep=""))
}
env2_nam <- NULL
for(i in 1:100){
env2_nam <- c(env2_nam,paste("P",i,"_env2",sep=""))
}
colnames(fit)<-c("m","n","u","r","mean_Eff", "var_Eff", "var_Opt", "Env_rate","Burnin","Env_shift", "Generation", fit_nam, freq_nam, phen1_nam, phen2_nam, env1_nam, env2_nam)
N<-data.frame(fit$n[1]*100)
colnames(N)<-"N"
(specs<-data.frame(seed,fit[1,1:2],N,fit[1,3:10]))
plotTitle <- paste(colnames(specs)[1],":",specs[[1]],", ", colnames(specs)[2],":",specs[2],", ",colnames(specs)[3],":",specs[3],", ",colnames(specs)[4],":",1e-7,",",colnames(specs)[5],":",specs[5],", ",colnames(specs)[6],":",specs[6],", ",colnames(specs)[7],":",specs[7],", ",colnames(specs)[8],":",specs[8],", ",colnames(specs)[9],":",specs[9],", ",colnames(specs)[10],":",specs[10],sep="")
gen_nam <- paste("Gen",fit$Generation,sep="")
gc()
vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,".recode.vcf",sep=""))
geno1_filt <- vcf1_filt@gt[,-1] # Remove 1st column, which is 'Format'
position1_filt <- as.numeric(getPOS(vcf1_filt)) # Positions in bp
chromosome1_filt <- as.numeric(getCHROM(vcf1_filt)) # Chromosome information
No_A<-unname(dim(vcf1_filt)[1]) #Get the number of filtered alleles
rm(vcf1_filt)
G1f <- matrix(NA, nrow = nrow(geno1_filt), ncol = ncol(geno1_filt))
G1f[geno1_filt %in% c("0/0", "0|0")] <- 0
G1f[geno1_filt %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G1f[geno1_filt %in% c("1/1", "1|1")] <- 2
#Check number of duplicate positions
sum(duplicated(position1_filt))
position1_filt[duplicated(position1_filt)]
Start<-seq(1,ncol(geno1_filt),100)
Stop<-seq(100,ncol(geno1_filt),100)
Pop_afreq1<-NULL
for(i in 1:100){
Pop_afreq1<-rbind(Pop_afreq1,rowSums(G1f[,Start[i]:Stop[i]])/(2*ncol(G1f[,Start[i]:Stop[i]])))
}
Pop_afreq1<-data.frame(Pop_afreq1)
colnames(Pop_afreq1)<-paste("M",position1_filt,sep="")
View(Pop_afreq1)
View(fit)
fitt$Location
fitt<-data.frame(t(fit[,-1:-11]))
colnames(fitt)<-gen_nam
View(fitt)
fitt$Location <- as.factor(rep(paste("A",seq(1,10,1),sep=""),60))
fitt$Location <- factor(fitt$Location, levels = unique(fitt$Location))
factor(rep(paste("A",seq(1,10,1),sep=""),60), levels = unique(fitt$Location))
fitt$Location
fitt$Location <- factor(rep(paste("A",seq(1,10,1),sep=""),60), levels = unique(fitt$Location))
fitt$Location
fitt$Type <- as.factor(c(rep("Fit",100),rep("Freq",100),rep("Phen0",100), rep("Phen1",100),rep("Env1",100), rep("Env2",100)))
gen_nam[length(gen_nam)-30]
gen_nam[length(gen_nam)-29]
data.frame(fitt[fitt$Type=="Env",gen_nam[length(gen_nam)-29]])
fitt[fitt$Type=="Env",]
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop<-data.frame(fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)-29]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
envPop
names(envPop) <- "envSelect"
envPop.shift<-data.frame(fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)]])
names(envPop.shift) <- "envSelect"
#Merge the population specific allele frequencies of all neutral (M1) alleles with the population specific frequency of the selected (M2) allele
alFreq<-cbind(data.frame(Pop_afreq1))
gfMod <- gradientForest(data=data.frame(envPop, alFreq),
predictor.vars=colnames(envPop),
response.vars=colnames(alFreq),
corr.threshold=0.5,
ntree=500,
trace=T)
cImp <- cumimp(gfMod, "envSelect", type="Species")
cImp <- data.frame(rbindlist(cImp, idcol="allele"))
gfTrans1 <- predict(gfMod, envPop)
colnames(gfTrans1)<-"C.Imp_genome_before"
gfTrans2 <- predict(gfMod, envPop.shift)
colnames(gfTrans2)<-"C.Imp_genome_after"
# offset needs to be considered using absolute values ()
offset <- gfTrans2-gfTrans1
offset <- gfTrans2-gfTrans1
colnames(offset)<-"D_C.Imp_genome"
#Visualizing multilocus data
require(ggplot2)
require(cowplot)
require(RColorBrewer)
colfunc<-colorRampPalette(c("orange","cyan"))
plot(fit$Gen,fit$P19_phen,type="l", main=plotTitle, xlab="Generations",ylab="Phenotype",col="white",ylim=c(-5,10))
k=1
for(i in 212:311){
lines(fit$Gen,fit[,i],lwd=2,col=colfunc(10)[k])
k=k+1
}
plot(fit$Gen,fit$P19_phen,type="l", main=plotTitle, xlab="Generations",ylab="Phenotype",col="white",ylim=c(-1,1))
k=1
for(i in 212:311){
lines(fit$Gen,fit[,i],lwd=2,col=colfunc(10)[k])
k=k+1
}
ggplot() +
geom_line(aes(x=Env_before, y=gfTrans1$C.Imp_genome_before), colour=rgb(0,0,0,0.4), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="GF Cumulative Importance", x="Environment") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
ggtitle(paste(plotTitle,"Gen. 300")) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
Env_before<-envPop$envSelect
Env_after<-envPop.shift$envSelect
Diff_env<-Env_after-Env_before
Env_range<- envPop$envSelect%in%round(envPop.shift$envSelect,1)&round(envPop.shift$envSelect,1)%in%envPop$envSelect
ggplot() +
geom_line(aes(x=Env_before, y=gfTrans1$C.Imp_genome_before), colour=rgb(0,0,0,0.4), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="GF Cumulative Importance", x="Environment") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
ggtitle(paste(plotTitle,"Gen. 300")) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
cg<-read.table(paste("results/SLiM_output/CG_files/",seed,"_SL_WF_CG_AtagP_Gen300.txt",sep=""),header=F)
cg<-read.table(paste("results/SLiM_output/CG_files/",seed,"_CG_AtagP_Gen600.txt",sep=""),header=F)
cg<-read.table(paste("results/SLiM_output/CG_files/",seed,"_CG_Gen600.txt",sep=""),header=F)
seed
cg<-read.table(paste("results/SLiM_output/CG_files/",seed,"_ML_WF_CG_sum_Gen",sep=""),header=F)
cg<-read.table(paste("results/SLiM_output/CG_files/",seed,"_ML_WF_CG_sum_Gen.txt",sep=""),header=F)
cg<-read.table(paste("results/SLiM_output/CG_files/",seed,"_ML_WF_CG_sum_Gen.txt",sep=""),header=F)
View(cg)
rep(paste("T",seq(1:10),sep=""),10)
ggplot() +
geom_line(aes(x=Env_before, y=gfTrans1$C.Imp_genome_before), colour=rgb(0,0,0,0.4), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="GF Cumulative Importance", x="Environment 1") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
ggtitle(plotTitle) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-29]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop) <- "envSelect"
envPop.shift<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)]])
names(envPop.shift) <- "envSelect"
envPop
gfMod <- gradientForest(data=data.frame(envPop, alFreq),
predictor.vars=colnames(envPop),
response.vars=colnames(alFreq),
corr.threshold=0.5,
ntree=500,
trace=T)
# Calculate genomic offset
# note that I am doing this for the avearge across all alleles since
# GF was fit to all alleles simultaneously
# The more correct way is to calculate offset for adaptive alleles only,
# either individually or for a model fit to just those alleles.
gfTrans1 <- predict(gfMod, envPop)
colnames(gfTrans1)<-"C.Imp_genome_before"
ggplot() +
geom_line(aes(x=Env_before, y=gfTrans1$C.Imp_genome_before), colour=rgb(0,0,0,0.4), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="GF Cumulative Importance", x="Environment 2") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
ggtitle(plotTitle) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
envPop
alFreq
install.packages("qqman")
require(qqman)
rep(c(0.1,0.5),5)
alFreq<-data.frame(rep(c(0.1,0.5),5))
alFreq
colnames(alFreq)<-"M5"
all_freq
envPop <- data.frame(seq(-1,1,length.out=10))
names(envPop) <- "envSelect"
alFreq<-data.frame(seq(0.1,1.0,0.1))
colnames(alFreq)<-"M1"
all_freq<-alFreq
alFreq<-data.frame(seq(1.0,0.1,-0.1))
colnames(alFreq)<-"M2"
all_freq$M2<-alFreq$M2
alFreq<-data.frame(c(seq(0.5,0.1,-0.1),seq(0.1,0.5,0.1)))
colnames(alFreq)<-"M3"
all_freq$M3<-alFreq$M3
alFreq<-data.frame(c(seq(0.1,0.5,0.1),seq(0.5,0.1,-0.1)))
colnames(alFreq)<-"M4"
all_freq$M4<-alFreq$M4
alFreq<-data.frame(rep(c(0.1,0.5),5))
colnames(alFreq)<-"M5"
all_freq$M5<-alFreq$M5
all_freq
envPop
alFreq
##############################################
# Chunk to fit GF models to minor allele frequencies at the level of
# populations
# GF is fit to each SNP individually to
# ease computational / memory burden
gfMod_N <- gradientForest(data=data.frame(envPop, alFreq),
predictor.vars=colnames(envPop),
response.vars=colnames(alFreq),
corr.threshold=0.5,
ntree=500,
trace=T)
gfMod_N
#Merge the population specific allele frequencies of all neutral (M1) alleles with the population specific frequency of the selected (M2) allele
alFreq<-cbind(data.frame(Pop_afreq1))
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-29]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop) <- "envSelect"
View(alFreq)
data.frame(envPop, alFreq)
test=data.frame(envPop, alFreq)
View(test)
gen_nam[length(gen_nam)-29]
fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-29]]
fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-28]]
fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-30]]
fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)-30]]
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-30]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop) <- "envSelect"
envPop.shift<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)]])
names(envPop.shift) <- "envSelect"
Start
View(G1f)
View(gfTrans1)
gfTrans1$C.Imp_genome_before
Env_before<-envPop$envSelect
ggplot() +
geom_line(aes(x=Env_before, y=gfTrans1$C.Imp_genome_before), colour=rgb(0,0,0,0.4), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="GF Cumulative Importance", x="Environment 2") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
ggtitle(plotTitle) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
ggplot() +
geom_line(aes(x=envPop$envSelect, y=gfTrans1$C.Imp_genome_before), colour=rgb(0,0,0,0.4), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="GF Cumulative Importance", x="Environment 2") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
ggtitle(plotTitle) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
#Get per population FST pre and post environmental shift
Pfst_pre_filt<-MakeDiploidFSTMat(SNPmat = Gt1f, locusNames = colnames(Gt1f), popNames = PopsALL)
Gt1f<-t(G1f)
colnames(Gt1f)<-paste("M",position1_filt,sep="")
Pre_geno<-data.frame(PopsALL,Gt1f)
colnames(Pre_geno)[1]<-"Locality"
#Create an object listing every population in the whole dataset
PopsALL <- NULL
for(j in rep(1:100)){
for(i in rep(j,100)){
PopsALL <- c(PopsALL,i)
}
}
#Create an object splitting a single population into a Pre ("T1") and Post ("T2") "population"
PopsP <- c(rep("T1",100),rep("T2",100))
vcf2_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T2_",seed,".recode.vcf",sep=""))
geno2_filt <- vcf2_filt@gt[,-1] # Remove 1st column, which is 'Format'
position2_filt <- as.numeric(getPOS(vcf2_filt)) # Positions in bp
chromosome2_filt <- as.numeric(getCHROM(vcf2_filt)) # Chromosome information
rm(vcf2_filt)
gc()
G2f <- matrix(NA, nrow = nrow(geno2_filt), ncol = ncol(geno2_filt))
G2f[geno2_filt %in% c("0/0", "0|0")] <- 0
G2f[geno2_filt %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G2f[geno2_filt %in% c("1/1", "1|1")] <- 2
sum(duplicated(position2_filt))
#Read in positions of m2 mutations
pos<-read.table(paste("results/SLiM_output/Sim_sum/",seed,"_Pos_ML_WF.txt",sep=""))
View(pos)
pos_T1<-pos
rm(pos)
View(pos_T1)
pos_T1%in%position1_filt
pos_T1[pos_T1%in%position1_filt]
select_pos <- pos_T1[pos_T1%in%position1_filt]
View(select_pos)
select_pos <- pos_T1[which(pos_T1%in%position1_filt)]
#Check number of duplicate positions
sum(duplicated(position1_filt))
sum(duplicated(pos_T1))
pos_T1
pos_T1<-scan(paste("results/SLiM_output/Sim_sum/",seed,"_Pos_ML_WF_T1.txt",sep=""))
pos_T1<-scan(paste("results/SLiM_output/Sim_sum/",seed,"_Pos_ML_WF.txt",sep=""))
sum(duplicated(pos_T1))
