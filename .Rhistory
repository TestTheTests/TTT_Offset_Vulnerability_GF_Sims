Env_MD_all_env_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$EdSelEnvPlus2, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_ED_causP2_env_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$MdSelEnvPlus2, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_MD_causP2_env_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$Pre_FST, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
FST_genome_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$Pre_FSt_sel, y=cg_df_Cores$Fitness, method = "spearman")
paste("r = ",round(dat_sum$estimate[[1]],3),"\nslope = ", round(dat_sum$statistic[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
FST_causal_Cores <- round(dat_sum$estimate[[1]],3)
case <- data.frame(GF_off_genome_allEnv_Edges,
GF_off_genome_causEnv_Edges,
GF_off_causal_allEnv_Edges,
GF_off_causal_causEnv_Edges,
Env_ED_caus_env_Edges,
Env_MD_caus_env_Edges,
Env_ED_all_env_Edges,
Env_MD_all_env_Edges,
Env_ED_causP2_env_Edges,
Env_MD_causP2_env_Edges,
FST_genome_Edges,
FST_causal_Edges,
GF_off_genome_allEnv_Cores,
GF_off_genome_causEnv_Cores,
GF_off_causal_allEnv_Cores,
GF_off_causal_causEnv_Cores,
Env_ED_caus_env_Cores,
Env_MD_caus_env_Cores,
Env_ED_all_env_Cores,
Env_MD_all_env_Cores,
Env_ED_causP2_env_Cores,
Env_MD_causP2_env_Cores,
FST_genome_Cores,
FST_causal_Cores)
case
seed_table$V5[w]
write.csv(case, paste("results/R_results/Case",seed_table$V5[w],"_",seed,"_corr_allEnv.csv",sep=""),row.names = F)
save.image(paste("results/R_results/",seed,".RData",sep=""))
rm(list=ls())
gc()
View(AF_all)
################################################################################################
p <- 0.5
p ^ 2
f <- 1/1000
sqrt(f)
curve
?curve()
curve(x^2)
curve(x^2, 0, 1, xlab = "Allele frequencies", ylab = "Genotype frequencies", col = "green", lwd = 2 )
text(0.6,0.2,"Homozygotes",col="green")
curve(2*x*(1-x), 0, 1, add=TRUE, xlab="Allele frequencies", ylab="Genotype frequencies", col="blue", lwd=2)
text(0.25, 0.5, "Heterozygotes", col = "blue")
################################################################################################
p <- 0.5
p ^ 2
f <- 1/1000
sqrt(f)
curve
?curve()
curve(x^2)
curve(x^2, 0, 1, xlab = "Allele frequencies", ylab = "Genotype frequencies", col = "green", lwd = 2 )
text(0.6,0.2,"Homozygotes",col="green")
curve(2*x*(1-x), 0, 1, add=TRUE, xlab="Allele frequencies", ylab="Genotype frequencies", col="blue", lwd=2)
text(0.25, 0.5, "Heterozygotes", col = "blue")
2+2 == 4
2+2==5
p == 1/2
p <- 2/3
p^2 == 2*p*(1-p)
p
p^2 == 2*p*(1-p)
class(p)
summary(p)
?all.equal
all.equal(p^2 , 2*p*(1-p))
round(p^2)
round(p^2, 6)
p^2
2*p*(1-p)
round(p^2, 6) == round(2*p*(1-p)),6)
round(p^2, 6) == round(2*p*(1-p),6)
round(p^2, 9) == round(2*p*(1-p),9)
all.equal(p^2 , 2*p*(1-p))
points(p,p^2,lwd=2,cex=2)
allele <- c("A","A","a","a","a","a","a","a","a","a")
allele <- c(rep("A",2),rep("a",8))
print(allele)
popsize <- 100
pop <- matrix(nrow=popsize,ncol=2)
for( i in 1:popsize){
pop[i,1] <- sample(allele,1)
pop[i,2] <- sample(allele,1)
}
pop
popsize <- 100
pop <- matrix(nrow=popsize,ncol=2)
pop
for( i in 1:popsize){
pop[i,1] <- sample(allele,1)
pop[i,2] <- sample(allele,1)
}
pop
Acount <- 0
for( i in 1:popsize){
if(pop[i,1] == "A"){
Acount <- Acount+1
}
if(pop[i,2] == "A"){
Acount <- Acount+1
}
}
AFreq
Acount
AFreq <- Acount/(popsize*2)
Hcount <- 0
AAcount <- 0
for(i in 1:popsize){
if(pop[i,1]=="A"){
if(pop[i,2]=="a"){
Hcount <- Hcount +1
}else{
AAcount <- AAcount + 1
}
}
if(pop[i,1]=="a"){
if(pop[i,2]=="A"){
Hcount <- Hcount + 1
}
}
}
HetFreq <- Hcount/(popsize)
AAFreq <- AAcount/(popsize)
print(c(Afreq,HetFreq,AAFreq))
AFreq <- Acount/(popsize*2)
Hcount <- 0
AAcount <- 0
for(i in 1:popsize){
if(pop[i,1]=="A"){
if(pop[i,2]=="a"){
Hcount <- Hcount +1
}else{
AAcount <- AAcount + 1
}
}
if(pop[i,1]=="a"){
if(pop[i,2]=="A"){
Hcount <- Hcount + 1
}
}
}
HetFreq <- Hcount/(popsize)
AAFreq <- AAcount/(popsize)
print(c(Afreq,HetFreq,AAFreq))
print(c(AFreq,HetFreq,AAFreq))
plot(AFreq, HetFreq, xlab="allele frequency", ylab=" ",ylim=c(0,1),xlim=c(0,1),col="blue")
par(new=TRUE)
plot(AFreq, AAFreq, xlab=" ", ylab = "", ylim=c(0,1),xlim=c(0,1),col="green")
par(new=TRUE)
plot(AFreq, 1-AAFreq-HetFreq, xlab=" ", ylab = "genotype frequency", ylim=c(0,1),xlim=c(0,1),col="red")
curve(2*x*(1-x), 0, 1 , add=TRUE, ylab=NULL, lwd=2, ylim=c(0,1), col="darkblue")
curve(x**2, 0, 1 , add=TRUE, ylab=NULL, lwd=2, ylim=c(0,1), col="darkgreen")
curve((1-x)**2, 0, 1 , add=TRUE, ylab=NULL, lwd=2, ylim=c(0,1), col="darkred")
text(0.5,0.7,"Aa",col="blue")
text(0.9,0.7,"AA",col="green")
text(0.1,0.7,"aa",col="red")
AFreq <- numeric()
HetFreq <- numeric()
AAFreq <- numeric()
replicates <- 10
for(j in 1:replicates){
for(i in 1:popsize){
pop[i,1] <- sample(allele,1)
pop[i,2] <- sample(allele,1)
}
Acount <- 0
for( i in 1:popsize){
if(pop[i,1] == "A"){
Acount <- Acount+1
}
if(pop[i,2] == "A"){
Acount <- Acount+1
}
}
AFreq[j] <- Acount/(popsize*2)
Hcount <- 0
AAcount <- 0
for(i in 1:popsize){
if(pop[i,1]=="A"){
if(pop[i,2]=="a"){
Hcount <- Hcount +1
}else{
AAcount <- AAcount + 1
}
}
if(pop[i,1]=="a"){
if(pop[i,2]=="A"){
Hcount <- Hcount + 1
}
}
}
HetFreq[j] <- Hcount/(popsize)
AAFreq[j] <- AAcount/(popsize)
}
plot(AFreq, HetFreq, xlab="allele frequency", ylab=" ",ylim=c(0,1),xlim=c(0,1),col="blue")
par(new=TRUE)
plot(AFreq, AAFreq, xlab=" ", ylab = "", ylim=c(0,1),xlim=c(0,1),col="green")
par(new=TRUE)
plot(AFreq, 1-AAFreq-HetFreq, xlab=" ", ylab = "genotype frequency", ylim=c(0,1),xlim=c(0,1),col="red")
curve(2*x*(1-x), 0, 1 , add=TRUE, ylab=NULL, lwd=2, ylim=c(0,1), col="darkblue")
curve(x**2, 0, 1 , add=TRUE, ylab=NULL, lwd=2, ylim=c(0,1), col="darkgreen")
curve((1-x)**2, 0, 1 , add=TRUE, ylab=NULL, lwd=2, ylim=c(0,1), col="darkred")
text(0.5,0.7,"Aa",col="blue")
text(0.9,0.7,"AA",col="green")
text(0.1,0.7,"aa",col="red")
replicates <- 1000
for(j in 1:replicates){
p <- runif(1)
for(i in 1:popsize){
if(runif(1)<p){
pop[i,1] <- "A"
}else{
pop[i,1] <- "a"
}
if(runif(1)<p){
pop[i,2] <- "A"
}else{
pop[i,2] <- "a"
}
}
Acount <- 0
for( i in 1:popsize){
if(pop[i,1] == "A"){
Acount <- Acount+1
}
if(pop[i,2] == "A"){
Acount <- Acount+1
}
}
AFreq[j] <- Acount/(popsize*2)
Hcount <- 0
AAcount <- 0
for(i in 1:popsize){
if(pop[i,1]=="A"){
if(pop[i,2]=="a"){
Hcount <- Hcount +1
}else{
AAcount <- AAcount + 1
}
}
if(pop[i,1]=="a"){
if(pop[i,2]=="A"){
Hcount <- Hcount + 1
}
}
}
HetFreq[j] <- Hcount/(popsize)
AAFreq[j] <- AAcount/(popsize)
}
plot(AFreq, HetFreq, xlab="allele frequency", ylab=" ",ylim=c(0,1),xlim=c(0,1),col="blue")
par(new=TRUE)
plot(AFreq, AAFreq, xlab=" ", ylab = "", ylim=c(0,1),xlim=c(0,1),col="green")
par(new=TRUE)
plot(AFreq, 1-AAFreq-HetFreq, xlab=" ", ylab = "genotype frequency", ylim=c(0,1),xlim=c(0,1),col="red")
curve(2*x*(1-x), 0, 1 , add=TRUE, ylab=NULL, lwd=2, ylim=c(0,1), col="darkblue")
curve(x**2, 0, 1 , add=TRUE, ylab=NULL, lwd=2, ylim=c(0,1), col="darkgreen")
curve((1-x)**2, 0, 1 , add=TRUE, ylab=NULL, lwd=2, ylim=c(0,1), col="darkred")
text(0.5,0.7,"Aa",col="blue")
text(0.9,0.7,"AA",col="green")
text(0.1,0.7,"aa",col="red")
#cystic fibrosis example
p <- (9+842/2)/23369
2*p*(1-p)
curve(2/x, 1e-7, 0.01, log="y")
library("popgenr")
data(snp)
class(snp)
head(snp)
head(snp, 10)
str(snp)
plot(snp$type)
curve(x^2, 0, 1, xlab="Allele frequencies", ylab="Genotype frequencies", lwd=2, col="green")
text(0.6,0.2,"Homozygote",col="green")
curve(2*x*(1-x), 0, 1 , add=TRUE, xlab="Allele frequencies", ylab="Genotype frequencies", lwd=2, col="blue")
text(0.25,0.5,"Heterozygote",col="blue")
points(snp$p, snp$hom, pch=19, col="green")
points(snp$p, snp$het, pch=19, col="blue")
?snp
#Statistical tests and algorithms (Taiwo et al. (2011) Journal of community genetics. "Frequency of sickle cell genotype among the Yorubas in Lagos: implications for the level of awareness and genetic counseling for sickle cell disease in Nigeria")
AA <- 366
AS <- 123
SS <- 12
n <- AA+AS+SS
print(paste("n:",n))
p <- (SS + (AS/2))/n
print(paste("p:",p))
EAA <- n*(1-p)^2
EAS <- n*2*p*(1-p)
ESS <- n*p^2
print(paste("Expected:",EAA,EAS,ESS))
chi2 <- (EAA-AA)^2/EAA+
(EAS-AS)^2/EAS+
(ESS-SS)^2/ESS
print(paste("chi-square:", chi2))
pvalue <- pchisq(chi2, df = 1, lower.tail = FALSE)
print(paste("P-value:", pvalue))
geno <-c(AA,AS,SS)
expe <- c(EAA,EAS,ESS)
chi2
sum((expe-geno)^2)
expe-geno
(EAA-AA)
(expe-geno)^2
sum(((expe-geno)^2)/expe)
#chi2 <- sum(((expe-geno)^2)/expe)
G <- 2*sum(geno*log(geno/expe))
print(paste("G:",G))
pvalue <- pchisq(G, df=1, lower.tail = F)
print(paste("P-value:",pvalue))
#Daphnia pulex data from Hebert & Crease (1983) "Clonal diversity in populations of Daphnia pulex reproducing by obligate parthenogenesis"
AA <- 34
AS <- 100
SS <- 0
n <- AA+AS+SS
p <- (SS + (AS/2))/n
EAA <- n*(1-p)^2
EAS <- n*2*p*(1-p)
ESS <- n*p^2
geno <- c(AA,AS,SS)
expe <- c(EAA,EAS,ESS)
chi2 <- sum((expe-geno)^2/expe)
print(paste("chi-square:",chi2))
pvalue <- pchisq(chi2, df=1, lower.tail=FALSE)
print(paste("P-value:",pvalue))
dat <- matrix(c(geno,expe), nrow = 2, byrow = T)
barplot(dat,beside=T,
col=c("turquoise4", "sienna1"),
names.arg=c("AA", "SA", "SS"))
barplot(expe)
dat
expe
barplot(expe, ylim=c(0,100))
dat <- matrix(c(geno,expe), nrow = 2, byrow = T)
barplot(dat,beside=T,
col=c("turquoise4", "sienna1"),
names.arg=c("AA", "SA", "SS"))
barplot(expe, ylim=c(0,100), names.arg=c("AA", "SA", "SS"), col="sienna1")
dat <- matrix(c(geno,expe), nrow = 2, byrow = T)
barplot(dat,beside=T,
col=c("turquoise4", "sienna1"),
names.arg=c("AA", "SA", "SS"))
legend(x="topright", legend=c("Observed","Expected"),
pch=15, col=c("turquoise4","sienna1"))
genotypes
str(genotypes)
p <- (9+842/2)/23369
2*p*(1-p)
curve(2/x, 1e-7, 0.01, log="y")
library("popgenr")
data(snp)
class(snp)
head(snp)
head(snp, 10)
str(snp)
plot(snp$type)
curve(x^2, 0, 1, xlab="Allele frequencies", ylab="Genotype frequencies", lwd=2, col="green")
text(0.6,0.2,"Homozygote",col="green")
curve(2*x*(1-x), 0, 1 , add=TRUE, xlab="Allele frequencies", ylab="Genotype frequencies", lwd=2, col="blue")
text(0.25,0.5,"Heterozygote",col="blue")
points(snp$p, snp$hom, pch=19, col="green")
points(snp$p, snp$het, pch=19, col="blue")
#Statistical tests and algorithms (Taiwo et al. (2011) Journal of community genetics. "Frequency of sickle cell genotype among the Yorubas in Lagos: implications for the level of awareness and genetic counseling for sickle cell disease in Nigeria")
AA <- 366
?chisq.test
?pchisq
?apply
?sapply
x1 <- seq(0,10)
rev(x1)
polygon(c(x1,rev(x1)),c(dchisq(x1,df=10),rep(0,length(dchisq(seq(0,10),df=10)))),col="red")
curve(dchisq(x,df=10),from=0,to=40)
polygon(c(x1,rev(x1)),c(dchisq(x1,df=10),rep(0,length(dchisq(seq(0,10),df=10)))),col="red")
polygon(c(x1,rev(x1)),c(dchisq(x1,df=10),rep(0,length(dchisq(x1,df=10)))),col="lightred")
polygon(c(x1,rev(x1)),c(dchisq(x1,df=10),rep(0,length(dchisq(x1,df=10)))),col="pink")
polygon(c(x1,rev(x1)),c(dchisq(x1,df=10),rep(0,length(dchisq(x1,df=10)))),col="pink", border=NA)
p1 <- dchisq(x1,df=10)
c(p1,rep(0,length(p1)))
x1 <- seq(10,40)
p1 <- dchisq(x1,df=10)
curve(dchisq(x,df=10),from=0,to=40)
polygon(c(x1,rev(x1)),c(p1,rep(0,length(p1))),col="pink", border=NA)
x1 <- seq(20,40)
p1 <- dchisq(x1,df=10)
curve(dchisq(x,df=10),from=0,to=40)
polygon(c(x1,rev(x1)),c(p1,rep(0,length(p1))),col="pink", border=NA)
x1 <- seq(15,40)
p1 <- dchisq(x1,df=10)
curve(dchisq(x,df=10),from=0,to=40)
polygon(c(x1,rev(x1)),c(p1,rep(0,length(p1))),col="pink", border=NA)
curve(dchisq(x,df=1))
curve(dchisq(x,df=1),from=0,to=40)
curve(dchisq(x,df=5),from=0,to=40)
curve(dchisq(x,df=2),from=0,to=40)
curve(dchisq(x,df=1),from=0,to=40)
curve(dchisq(x,df=2),from=0,to=40)
curve(dchisq(x,df=3),from=0,to=40)
?pchisq
rchisq(2,1)
rchisq(2,1)
curve(dchisq(x,df=3),from=0,to=20)
x1 <- seq(7,20)
p1 <- dchisq(x1,df=3)
curve(dchisq(x,df=3),from=0,to=20)
x1 <- seq(7,20)
p1 <- dchisq(x1,df=3)
polygon(c(x1,rev(x1)),c(p1,rep(0,length(p1))),col="pink", border=NA)
curve(dchisq(x,df=5),from=0,to=20)
x1 <- seq(7,20)
p1 <- dchisq(x1,df=5)
polygon(c(x1,rev(x1)),c(p1,rep(0,length(p1))),col="pink", border=NA)
#aleppo pine data from Gershberg et al. (2016) Frontiers in Plant Science "Genetic structure of a naturally regenerating post-fire seedling population: Pinus halepensis as a case study"
genotypes
str(genotypes)
rownames(genotypes) <- genotypes$ID
rownames(genotypes)
genotypes[,-c(1,2)]
genotypes
N <- 10 #Ten diploid individual
possible <- 0:(2*N) #Number of possible copies of an allele
P <- NULL #Vector to hold our probabilities
for(i in possible){
P <- c(P,dbinom(possible, size=2*N, prob=i/(2*N)))
}
#Our transition matrix should be 21 rows by 21 columns
Q <- matrix(P, ncol=2*N+1, byrow=T)
#Create our starting state matrix
x <- matrix(c(rep(0,2*N+1)), ncol=2*N+1, byrow=T)
x[2] <- 1 #Set the prob. of starting with one copy to 100%
#x[11] <- 1
R <- x%*%Q #Get our first gen. transition probabilities
#Change our color and shape parameters to include all the entries between our first "Extinct" state, and our final "Fixed" state
color <- c("brown", rep("blue",ncol(R)-2),"grey")
shape <- c(15, rep(19,ncol(R)-2), 17)
#Start with generation 1 for all states
g <- rep(1,ncol(R))
#Let's increase our x-axis range to 100
plot(g, R, xlim=c(1,100), ylim=c(0,1),
ylab="Probability",
xlab="Generations")
#The unique() function avoids replicates for color & shape
legend("bottomleft",legend=c("Extinct","Intermediate","Fixed"),
col=unique(color), pch=unique(shape),
inset=c(0,1), xpd=TRUE, bty="n")
while(g[1]<100){
R <- R%*%Q
g <- g+1
points(g, R, col=color, pch=shape)
}
?pchisq
curve(dchisq(x,df=5),from=0,to=20)
x1 <- seq(7,20)
p1 <- dchisq(x1,df=5)
polygon(c(x1,rev(x1)),c(p1,rep(0,length(p1))),col="pink", border=NA)
N <- 1 #One diploid individual
possible <- 0:(2*N)
P <- NULL #Vector to hold our probabilities
for(i in possible){
P <- c(P,dbinom(possible, size=2*N, prob=i/(2*N)))
}
require(popgenr)
?EM
AB <- 5
A <- 30
B <- 7
O <- 36
N <- AB + A + B + O
Pi <- sqrt(O/N)
Pa <- sqrt((A + O)/N) - Pi
Pb <- sqrt((B + O)/N) - Pi
Pi0 <- 0
Pa0 <- 0
Pb0 <- 0
counter <- 0
EM <- function(Pi, Pa, Pb){
while((round(Pi0,12) == round(Pi,12))==FALSE &&
(round(Pa0,12) == round(Pa,12))==FALSE &&
(round(Pb0,12) == round(Pb,12))==FALSE){
Pi0 <- Pi
Pa0 <- Pa
Pb0 <- Pb
Paa <- A*(Pa0^2/((Pa0^2)+(2*(Pa0*Pi0))))
Pai <- A*(2*(Pa0*Pi0))/((Pa0^2)+(2*(Pa0*Pi0)))
Pbb <- B*(Pb0^2/((Pb0^2)+(2*(Pb0*Pi0))))
Pbi <- B*(2*(Pb0*Pi0))/((Pb0^2)+(2*(Pb0*Pi0)))
Pii <- O
Pab <- AB
(Pa <- ((2*Paa)+Pai+Pab)/(2*N))
(Pb <- ((2*Pbb)+Pbi+Pab)/(2*N))
(Pi <- ((2*Pii)+Pai+Pbi)/(2*N))
counter <- counter+1
}
return(c(paste("Pi =",Pi, ", Pa =", Pa, ", Pb=", Pb, ", Number of loops =", counter)))
}
c(Pi, Pa, Pb) # Our initial estimates
EM(Pi,Pa,Pb)
output <- EM(Pi,Pa,Pb)
output
sum(output
)
