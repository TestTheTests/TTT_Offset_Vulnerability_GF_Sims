geom_vline(xintercept = 3000, linetype='dashed')+
ylim(-1,1)+
xlab("Generations")+
ylab("Correlation of phenotypes to optima")+
annotate("text", y=-1, x=500, label= "Burnin", size=2.75)+
annotate("text", y=-1, x=1500, label= "Env.\nTrans.", size=2.75)+
annotate("text", y=-1, x=2200, label= "Adaptation", size=2.75)+
annotate("text", y=-1, x=3200, label= "Climate\nChange", size=2.75)+
ggtitle(paste(plotTitle)) +
theme_classic()
#VCF files are filtered with vcftools, as it is much faster than R. The filtering for MAF > 0.05 is accomplished with the following code:
vcf1 <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_unfiltered_subset.recode.vcf",sep=""), verbose = T)
geno1 <- vcf1@gt[,-1] # Remove 1st column, which is 'Format'
position1 <- getPOS(vcf1) # Positions in bp
chromosome1 <- getCHROM(vcf1) # Chromosome information
rm(vcf1)
gc()
vcf2 <- read.vcfR(paste("results/SLiM_output/VCF_files/T2_",seed,"_unfiltered_subset.recode.vcf",sep=""))
geno2 <- vcf2@gt[,-1] # Remove 1st column, which is 'Format'
position2 <- getPOS(vcf2) # Positions in bp
chromosome2 <- getCHROM(vcf2) # Chromosome information
rm(vcf2)
gc()
vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,".recode.vcf",sep=""))
#vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_filtered_subset.recode.vcf",sep=""))
geno1_filt <- vcf1_filt@gt[,-1] # Remove 1st column, which is 'Format'
position1_filt <- as.numeric(getPOS(vcf1_filt)) # Positions in bp
chromosome1_filt <- as.numeric(getCHROM(vcf1_filt)) # Chromosome information
No_A<-unname(dim(vcf1_filt)[1]) #Get the number of filtered alleles
rm(vcf1_filt)
gc()
vcf2_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T2_",seed,".recode.vcf",sep=""))
#vcf2_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T2_",seed,"_filtered_subset.recode.vcf",sep=""))
geno2_filt <- vcf2_filt@gt[,-1] # Remove 1st column, which is 'Format'
position2_filt <- as.numeric(getPOS(vcf2_filt)) # Positions in bp
chromosome2_filt <- as.numeric(getCHROM(vcf2_filt)) # Chromosome information
rm(vcf2_filt)
gc()
### Convert VCF to 012 format ####
# Character matrix containing the genotypes
# individuals in columns
#Create Genotype matrix
G1f <- matrix(NA, nrow = nrow(geno1_filt), ncol = ncol(geno1_filt))
G1f[geno1_filt %in% c("0/0", "0|0")] <- 0
G1f[geno1_filt %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G1f[geno1_filt %in% c("1/1", "1|1")] <- 2
#Create Genotype matrix
G2f <- matrix(NA, nrow = nrow(geno2_filt), ncol = ncol(geno2_filt))
G2f[geno2_filt %in% c("0/0", "0|0")] <- 0
G2f[geno2_filt %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G2f[geno2_filt %in% c("1/1", "1|1")] <- 2
#stopCluster(cl)
#Check number of duplicate positions
sum(duplicated(position1_filt))
position1_filt[duplicated(position1_filt)]
sum(duplicated(position2_filt))
#Read in positions of m2 mutations
pos_T1<-scan(paste("results/SLiM_output/Sim_sum/",seed,"_T1_Pos_ML_WF.txt",sep=""))
sum(duplicated(pos_T1))
select_pos <-unique(pos_T1)
duplic_pos <- position1_filt[duplicated(position1_filt)]
select_pos <- paste("M",unique(pos_T1),sep="")
#select_pos[select_pos%in%duplic_pos]
for(i in 1:length(position1_filt)){
if(duplicated(position1_filt)[i]){
position1_filt[i]<-paste(position1_filt[i],"a",sep="")
}
}
#Create Genotype matrix
G1 <- matrix(NA, nrow = nrow(geno1), ncol = ncol(geno1))
G1[geno1 %in% c("0/0", "0|0")] <- 0
G1[geno1  %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G1[geno1 %in% c("1/1", "1|1")] <- 2
Start<-seq(1,ncol(geno1_filt),10)
#Stop<-seq(100,ncol(geno1_filt),10)
Stop<-seq(10,ncol(geno1_filt),10)
Pop_afreq1<-NULL
for(i in 1:100){
Pop_afreq1<-rbind(Pop_afreq1,rowSums(G1f[,Start[i]:Stop[i]])/(2*ncol(G1f[,Start[i]:Stop[i]])))
#print(paste("Start:", Start[i],", Stop:", Stop[i]))
}
Pop_afreq1<-data.frame(Pop_afreq1)
colnames(Pop_afreq1)<-paste("M",position1_filt,sep="")
# Pop_afreq1<-NULL
# for(i in 1:100){
#   Pop_afreq1<-rbind(Pop_afreq1,rowSums(G1[,Start[i]:Stop[i]])/(2*ncol(G1[,Start[i]:Stop[i]])))
#   #print(paste("Start:", Start[i],", Stop:", Stop[i]))
# }
# Pop_afreq1<-data.frame(Pop_afreq1)
# colnames(Pop_afreq1)<-paste("M",position1_filt,sep="")
# Pop_afreq1ALL<-Pop_afreq1
Pop_afreq2<-NULL
for(i in 1:100){
Pop_afreq2<-rbind(Pop_afreq2,rowSums(G2f[,Start[i]:Stop[i]])/(2*ncol(G2f[,Start[i]:Stop[i]])))
}
Pop_afreq2<-data.frame(Pop_afreq2)
colnames(Pop_afreq2)<-paste("M",position2_filt,sep="")
#Pop_afreq2_inP1<-Pop_afreq2[colnames(Pop_afreq2)%in%colnames(Pop_afreq1)]
#Combine allele frequency, genomic position, & meta data into one data frame
#PreN<-data.frame(colMeans(Pop_afreq1),position1_filt,PO_pre_filt,GO_pre_filt,MT_pre_filt,row.names=MID_pre_filt,stringsAsFactors = F)
#colnames(PreN)<-c("AF_l","PP","PO","GO","LT")
#PreN[grep("MT=2",PreN$ID1),]
#PostN<-data.frame(a_freq2,position2,ID2)
#PostN[grep("MT=2",ID2),]
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop1<-data.frame(fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop1) <- "envSelect"
envPop1.shift<-data.frame(fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)]])
names(envPop1.shift) <- "envSelect"
#Merge the population specific allele frequencies of all neutral (M1) alleles with the population specific frequency of the selected (M2) allele
alFreq<-cbind(data.frame(Pop_afreq1))
##############################################
# Chunk to fit GF models to minor allele frequencies at the level of
# populations
# GF is fit to each SNP individually to
# ease computational / memory burden
#cl <- makeCluster(cores)
#registerDoParallel(cl)
##### added by MCF, running all loci in on model ##########
gfMod1 <- gradientForest(data=data.frame(envPop1, alFreq),
predictor.vars=colnames(envPop1),
response.vars=colnames(alFreq),
corr.threshold=0.5 ,
ntree=500,
trace=T)
#cImp <- cumimp(gfMod, "envSelect", type="Species")
#cImp <- data.frame(rbindlist(cImp, idcol="allele"))
#stopCluster(cl)
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop2<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop2) <- "envSelect"
envPop2.shift<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)]])
names(envPop2.shift) <- "envSelect"
##### added by MCF, running all loci in on model ##########
gfMod2 <- gradientForest(data=data.frame(envPop2, alFreq),
predictor.vars=colnames(envPop2),
response.vars=colnames(alFreq),
corr.threshold=0.5,
ntree=500,
trace=T)
# Calculate genomic offset
# note that I am doing this for the avearge across all alleles since
# GF was fit to all alleles simultaneously
# The more correct way is to calculate offset for adaptive alleles only,
# either individually or for a model fit to just those alleles.
gfTrans1e1 <- predict(gfMod1, envPop1)
colnames(gfTrans1e1)<-"C.Imp_genome_before"
gfTrans2e1 <- predict(gfMod1, envPop1.shift)
colnames(gfTrans2e1)<-"C.Imp_genome_after"
gfTrans1e2 <- predict(gfMod2, envPop2)
colnames(gfTrans1e2)<-"C.Imp_genome_before"
gfTrans2e2 <- predict(gfMod2, envPop2.shift)
colnames(gfTrans2e2)<-"C.Imp_genome_after"
# offset needs to be considered using absolute values ()
offset <- gfTrans2-gfTrans1
colnames(offset)<-"D_C.Imp_genome"
alFreq_sel<-alFreq[colnames(alFreq)%in%select_pos]
gfMod_sel <- gradientForest(data=data.frame(envPop, alFreq_sel),
predictor.vars=colnames(envPop),
response.vars=colnames(alFreq_sel),
corr.threshold=0.5,
ntree=500,
trace=T)
gfTrans1_sel <- predict(gfMod_sel, envPop)
colnames(gfTrans1_sel)<-"C.Imp_genome_before"
gfTrans2_sel <- predict(gfMod_sel, envPop.shift)
colnames(gfTrans2_sel)<-"C.Imp_genome_after"
# offset needs to be considered using absolute values ()
offset_sel <- gfTrans2_sel-gfTrans1_sel
offset_sel <- gfTrans2_sel-gfTrans1_sel
colnames(offset_sel)<-"D_C.Imp_genome"
getwd()
seed
getwd()
#VCF files are filtered with vcftools, as it is much faster than R. The filtering for MAF > 0.05 is accomplished with the following code:
vcf1 <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_unfiltered_subset.recode.vcf",sep=""), verbose = T)
list.files()
list.files(paste("results/SLiM_output/VCF_files/T1_",seed,"_unfiltered_subset.recode.vcf",sep=""))
paste("results/SLiM_output/VCF_files/T1_",seed,"_unfiltered_subset.recode.vcf",sep="")
list.files()("results/SLiM_output/VCF_files/")
list.files("results/SLiM_output/VCF_files/")
#VCF files are filtered with vcftools, as it is much faster than R. The filtering for MAF > 0.05 is accomplished with the following code:
vcf1 <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_unfiltered_subset.recode.vcf",sep=""), verbose = T)
geno1 <- vcf1@gt[,-1] # Remove 1st column, which is 'Format'
position1 <- getPOS(vcf1) # Positions in bp
chromosome1 <- getCHROM(vcf1) # Chromosome information
rm(vcf1)
gc()
vcf2 <- read.vcfR(paste("results/SLiM_output/VCF_files/T2_",seed,"_unfiltered_subset.recode.vcf",sep=""))
geno2 <- vcf2@gt[,-1] # Remove 1st column, which is 'Format'
position2 <- getPOS(vcf2) # Positions in bp
chromosome2 <- getCHROM(vcf2) # Chromosome information
rm(vcf2)
gc()
vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,".recode.vcf",sep=""))
#vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_filtered_subset.recode.vcf",sep=""))
geno1_filt <- vcf1_filt@gt[,-1] # Remove 1st column, which is 'Format'
position1_filt <- as.numeric(getPOS(vcf1_filt)) # Positions in bp
chromosome1_filt <- as.numeric(getCHROM(vcf1_filt)) # Chromosome information
No_A<-unname(dim(vcf1_filt)[1]) #Get the number of filtered alleles
rm(vcf1_filt)
gc()
vcf2_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T2_",seed,".recode.vcf",sep=""))
#vcf2_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T2_",seed,"_filtered_subset.recode.vcf",sep=""))
geno2_filt <- vcf2_filt@gt[,-1] # Remove 1st column, which is 'Format'
position2_filt <- as.numeric(getPOS(vcf2_filt)) # Positions in bp
chromosome2_filt <- as.numeric(getCHROM(vcf2_filt)) # Chromosome information
rm(vcf2_filt)
gc()
### Convert VCF to 012 format ####
# Character matrix containing the genotypes
# individuals in columns
#Create Genotype matrix
G1f <- matrix(NA, nrow = nrow(geno1_filt), ncol = ncol(geno1_filt))
G1f[geno1_filt %in% c("0/0", "0|0")] <- 0
G1f[geno1_filt %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G1f[geno1_filt %in% c("1/1", "1|1")] <- 2
#Create Genotype matrix
G2f <- matrix(NA, nrow = nrow(geno2_filt), ncol = ncol(geno2_filt))
G2f[geno2_filt %in% c("0/0", "0|0")] <- 0
G2f[geno2_filt %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G2f[geno2_filt %in% c("1/1", "1|1")] <- 2
#stopCluster(cl)
#Check number of duplicate positions
sum(duplicated(position1_filt))
position1_filt[duplicated(position1_filt)]
sum(duplicated(position2_filt))
#Read in positions of m2 mutations
pos_T1<-scan(paste("results/SLiM_output/Sim_sum/",seed,"_T1_Pos_ML_WF.txt",sep=""))
sum(duplicated(pos_T1))
select_pos <-unique(pos_T1)
duplic_pos <- position1_filt[duplicated(position1_filt)]
select_pos <- paste("M",unique(pos_T1),sep="")
#select_pos[select_pos%in%duplic_pos]
for(i in 1:length(position1_filt)){
if(duplicated(position1_filt)[i]){
position1_filt[i]<-paste(position1_filt[i],"a",sep="")
}
}
#Create Genotype matrix
G1 <- matrix(NA, nrow = nrow(geno1), ncol = ncol(geno1))
G1[geno1 %in% c("0/0", "0|0")] <- 0
G1[geno1  %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G1[geno1 %in% c("1/1", "1|1")] <- 2
Start<-seq(1,ncol(geno1_filt),10)
#Stop<-seq(100,ncol(geno1_filt),10)
Stop<-seq(10,ncol(geno1_filt),10)
Pop_afreq1<-NULL
for(i in 1:100){
Pop_afreq1<-rbind(Pop_afreq1,rowSums(G1f[,Start[i]:Stop[i]])/(2*ncol(G1f[,Start[i]:Stop[i]])))
#print(paste("Start:", Start[i],", Stop:", Stop[i]))
}
Pop_afreq1<-data.frame(Pop_afreq1)
colnames(Pop_afreq1)<-paste("M",position1_filt,sep="")
# Pop_afreq1<-NULL
# for(i in 1:100){
#   Pop_afreq1<-rbind(Pop_afreq1,rowSums(G1[,Start[i]:Stop[i]])/(2*ncol(G1[,Start[i]:Stop[i]])))
#   #print(paste("Start:", Start[i],", Stop:", Stop[i]))
# }
# Pop_afreq1<-data.frame(Pop_afreq1)
# colnames(Pop_afreq1)<-paste("M",position1_filt,sep="")
# Pop_afreq1ALL<-Pop_afreq1
Pop_afreq2<-NULL
for(i in 1:100){
Pop_afreq2<-rbind(Pop_afreq2,rowSums(G2f[,Start[i]:Stop[i]])/(2*ncol(G2f[,Start[i]:Stop[i]])))
}
Pop_afreq2<-data.frame(Pop_afreq2)
colnames(Pop_afreq2)<-paste("M",position2_filt,sep="")
#Pop_afreq2_inP1<-Pop_afreq2[colnames(Pop_afreq2)%in%colnames(Pop_afreq1)]
#Combine allele frequency, genomic position, & meta data into one data frame
#PreN<-data.frame(colMeans(Pop_afreq1),position1_filt,PO_pre_filt,GO_pre_filt,MT_pre_filt,row.names=MID_pre_filt,stringsAsFactors = F)
#colnames(PreN)<-c("AF_l","PP","PO","GO","LT")
#PreN[grep("MT=2",PreN$ID1),]
#PostN<-data.frame(a_freq2,position2,ID2)
#PostN[grep("MT=2",ID2),]
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop1<-data.frame(fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop1) <- "envSelect"
envPop1.shift<-data.frame(fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)]])
names(envPop1.shift) <- "envSelect"
#Merge the population specific allele frequencies of all neutral (M1) alleles with the population specific frequency of the selected (M2) allele
alFreq<-cbind(data.frame(Pop_afreq1))
##############################################
# Chunk to fit GF models to minor allele frequencies at the level of
# populations
# GF is fit to each SNP individually to
# ease computational / memory burden
#cl <- makeCluster(cores)
#registerDoParallel(cl)
##### added by MCF, running all loci in on model ##########
gfMod1 <- gradientForest(data=data.frame(envPop1, alFreq),
predictor.vars=colnames(envPop1),
response.vars=colnames(alFreq),
corr.threshold=0.5 ,
ntree=500,
trace=T)
#cImp <- cumimp(gfMod, "envSelect", type="Species")
#cImp <- data.frame(rbindlist(cImp, idcol="allele"))
#stopCluster(cl)
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop2<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop2) <- "envSelect"
envPop2.shift<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)]])
names(envPop2.shift) <- "envSelect"
##### added by MCF, running all loci in on model ##########
gfMod2 <- gradientForest(data=data.frame(envPop2, alFreq),
predictor.vars=colnames(envPop2),
response.vars=colnames(alFreq),
corr.threshold=0.5,
ntree=500,
trace=T)
# Calculate genomic offset
# note that I am doing this for the avearge across all alleles since
# GF was fit to all alleles simultaneously
# The more correct way is to calculate offset for adaptive alleles only,
# either individually or for a model fit to just those alleles.
gfTrans1e1 <- predict(gfMod1, envPop1)
colnames(gfTrans1e1)<-"C.Imp_genome_before"
gfTrans2e1 <- predict(gfMod1, envPop1.shift)
colnames(gfTrans2e1)<-"C.Imp_genome_after"
gfTrans1e2 <- predict(gfMod2, envPop2)
colnames(gfTrans1e2)<-"C.Imp_genome_before"
gfTrans2e2 <- predict(gfMod2, envPop2.shift)
colnames(gfTrans2e2)<-"C.Imp_genome_after"
# offset needs to be considered using absolute values ()
offset <- gfTrans2-gfTrans1
colnames(offset)<-"D_C.Imp_genome"
alFreq_sel<-alFreq[colnames(alFreq)%in%select_pos]
gfMod_sel <- gradientForest(data=data.frame(envPop, alFreq_sel),
predictor.vars=colnames(envPop),
response.vars=colnames(alFreq_sel),
corr.threshold=0.5,
ntree=500,
trace=T)
gfTrans1_sel <- predict(gfMod_sel, envPop)
colnames(gfTrans1_sel)<-"C.Imp_genome_before"
gfTrans2_sel <- predict(gfMod_sel, envPop.shift)
colnames(gfTrans2_sel)<-"C.Imp_genome_after"
# offset needs to be considered using absolute values ()
offset_sel <- gfTrans2_sel-gfTrans1_sel
offset_sel <- gfTrans2_sel-gfTrans1_sel
colnames(offset_sel)<-"D_C.Imp_genome"
gfMod1
envPop1
alFreq
gfMod1 <- gradientForest(data=data.frame(envPop1, alFreq),
predictor.vars=colnames(envPop1),
response.vars=colnames(alFreq),
corr.threshold=0.5 ,
ntree=500,
trace=T)
warnings()
vcf1 <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_unfiltered_subset.recode.vcf",sep=""), verbose = T)
geno1 <- vcf1@gt[,-1] # Remove 1st column, which is 'Format'
position1 <- getPOS(vcf1) # Positions in bp
chromosome1 <- getCHROM(vcf1) # Chromosome information
rm(vcf1)
gc()
vcf2 <- read.vcfR(paste("results/SLiM_output/VCF_files/T2_",seed,"_unfiltered_subset.recode.vcf",sep=""))
geno2 <- vcf2@gt[,-1] # Remove 1st column, which is 'Format'
position2 <- getPOS(vcf2) # Positions in bp
chromosome2 <- getCHROM(vcf2) # Chromosome information
rm(vcf2)
gc()
vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,".recode.vcf",sep=""))
#vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_filtered_subset.recode.vcf",sep=""))
geno1_filt <- vcf1_filt@gt[,-1] # Remove 1st column, which is 'Format'
position1_filt <- as.numeric(getPOS(vcf1_filt)) # Positions in bp
chromosome1_filt <- as.numeric(getCHROM(vcf1_filt)) # Chromosome information
No_A<-unname(dim(vcf1_filt)[1]) #Get the number of filtered alleles
rm(vcf1_filt)
gc()
vcf2_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T2_",seed,".recode.vcf",sep=""))
#vcf2_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T2_",seed,"_filtered_subset.recode.vcf",sep=""))
geno2_filt <- vcf2_filt@gt[,-1] # Remove 1st column, which is 'Format'
position2_filt <- as.numeric(getPOS(vcf2_filt)) # Positions in bp
chromosome2_filt <- as.numeric(getCHROM(vcf2_filt)) # Chromosome information
rm(vcf2_filt)
gc()
### Convert VCF to 012 format ####
# Character matrix containing the genotypes
# individuals in columns
#Create Genotype matrix
G1f <- matrix(NA, nrow = nrow(geno1_filt), ncol = ncol(geno1_filt))
G1f[geno1_filt %in% c("0/0", "0|0")] <- 0
G1f[geno1_filt %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G1f[geno1_filt %in% c("1/1", "1|1")] <- 2
#Create Genotype matrix
G2f <- matrix(NA, nrow = nrow(geno2_filt), ncol = ncol(geno2_filt))
G2f[geno2_filt %in% c("0/0", "0|0")] <- 0
G2f[geno2_filt %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G2f[geno2_filt %in% c("1/1", "1|1")] <- 2
#stopCluster(cl)
#Check number of duplicate positions
sum(duplicated(position1_filt))
position1_filt[duplicated(position1_filt)]
sum(duplicated(position2_filt))
#Read in positions of m2 mutations
pos_T1<-scan(paste("results/SLiM_output/Sim_sum/",seed,"_T1_Pos_ML_WF.txt",sep=""))
sum(duplicated(pos_T1))
select_pos <-unique(pos_T1)
duplic_pos <- position1_filt[duplicated(position1_filt)]
select_pos <- paste("M",unique(pos_T1),sep="")
#select_pos[select_pos%in%duplic_pos]
for(i in 1:length(position1_filt)){
if(duplicated(position1_filt)[i]){
position1_filt[i]<-paste(position1_filt[i],"a",sep="")
}
}
#Create Genotype matrix
G1 <- matrix(NA, nrow = nrow(geno1), ncol = ncol(geno1))
G1[geno1 %in% c("0/0", "0|0")] <- 0
G1[geno1  %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G1[geno1 %in% c("1/1", "1|1")] <- 2
Start<-seq(1,ncol(geno1_filt),10)
#Stop<-seq(100,ncol(geno1_filt),10)
Stop<-seq(10,ncol(geno1_filt),10)
Pop_afreq1<-NULL
for(i in 1:100){
Pop_afreq1<-rbind(Pop_afreq1,rowSums(G1f[,Start[i]:Stop[i]])/(2*ncol(G1f[,Start[i]:Stop[i]])))
#print(paste("Start:", Start[i],", Stop:", Stop[i]))
}
Pop_afreq1<-data.frame(Pop_afreq1)
colnames(Pop_afreq1)<-paste("M",position1_filt,sep="")
# Pop_afreq1<-NULL
# for(i in 1:100){
#   Pop_afreq1<-rbind(Pop_afreq1,rowSums(G1[,Start[i]:Stop[i]])/(2*ncol(G1[,Start[i]:Stop[i]])))
#   #print(paste("Start:", Start[i],", Stop:", Stop[i]))
# }
# Pop_afreq1<-data.frame(Pop_afreq1)
# colnames(Pop_afreq1)<-paste("M",position1_filt,sep="")
# Pop_afreq1ALL<-Pop_afreq1
Pop_afreq2<-NULL
for(i in 1:100){
Pop_afreq2<-rbind(Pop_afreq2,rowSums(G2f[,Start[i]:Stop[i]])/(2*ncol(G2f[,Start[i]:Stop[i]])))
}
Pop_afreq2<-data.frame(Pop_afreq2)
colnames(Pop_afreq2)<-paste("M",position2_filt,sep="")
#Pop_afreq2_inP1<-Pop_afreq2[colnames(Pop_afreq2)%in%colnames(Pop_afreq1)]
#Combine allele frequency, genomic position, & meta data into one data frame
#PreN<-data.frame(colMeans(Pop_afreq1),position1_filt,PO_pre_filt,GO_pre_filt,MT_pre_filt,row.names=MID_pre_filt,stringsAsFactors = F)
#colnames(PreN)<-c("AF_l","PP","PO","GO","LT")
#PreN[grep("MT=2",PreN$ID1),]
#PostN<-data.frame(a_freq2,position2,ID2)
#PostN[grep("MT=2",ID2),]
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop1<-data.frame(fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop1) <- "envSelect"
envPop1.shift<-data.frame(fitt[fitt$Type=="Env1",gen_nam[length(gen_nam)]])
names(envPop1.shift) <- "envSelect"
#Merge the population specific allele frequencies of all neutral (M1) alleles with the population specific frequency of the selected (M2) allele
alFreq<-cbind(data.frame(Pop_afreq1))
##############################################
# Chunk to fit GF models to minor allele frequencies at the level of
# populations
# GF is fit to each SNP individually to
# ease computational / memory burden
#cl <- makeCluster(cores)
#registerDoParallel(cl)
##### added by MCF, running all loci in on model ##########
gfMod1 <- gradientForest(data=data.frame(envPop1, alFreq),
predictor.vars=colnames(envPop1),
response.vars=colnames(alFreq),
corr.threshold=0.5 ,
ntree=500,
trace=T)
#cImp <- cumimp(gfMod, "envSelect", type="Species")
#cImp <- data.frame(rbindlist(cImp, idcol="allele"))
#stopCluster(cl)
#Subset the environmental variables for the generation you're considering (make sure the M2 AF and environmental data are not being compare across generations)
envPop2<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)-3]]) #300 years prior to the end of the simulation is taken as the "before environmental shift" time
names(envPop2) <- "envSelect"
envPop2.shift<-data.frame(fitt[fitt$Type=="Env2",gen_nam[length(gen_nam)]])
names(envPop2.shift) <- "envSelect"
##### added by MCF, running all loci in on model ##########
gfMod2 <- gradientForest(data=data.frame(envPop2, alFreq),
predictor.vars=colnames(envPop2),
response.vars=colnames(alFreq),
corr.threshold=0.5,
ntree=500,
trace=T)
# Calculate genomic offset
# note that I am doing this for the avearge across all alleles since
# GF was fit to all alleles simultaneously
# The more correct way is to calculate offset for adaptive alleles only,
# either individually or for a model fit to just those alleles.
gfTrans1e1 <- predict(gfMod1, envPop1)
colnames(gfTrans1e1)<-"C.Imp_genome_before"
gfTrans2e1 <- predict(gfMod1, envPop1.shift)
colnames(gfTrans2e1)<-"C.Imp_genome_after"
gfTrans1e2 <- predict(gfMod2, envPop2)
colnames(gfTrans1e2)<-"C.Imp_genome_before"
gfTrans2e2 <- predict(gfMod2, envPop2.shift)
colnames(gfTrans2e2)<-"C.Imp_genome_after"
# offset needs to be considered using absolute values ()
offset <- gfTrans2-gfTrans1
colnames(offset)<-"D_C.Imp_genome"
alFreq_sel<-alFreq[colnames(alFreq)%in%select_pos]
gfMod_sel <- gradientForest(data=data.frame(envPop, alFreq_sel),
predictor.vars=colnames(envPop),
response.vars=colnames(alFreq_sel),
corr.threshold=0.5,
ntree=500,
trace=T)
gfTrans1_sel <- predict(gfMod_sel, envPop)
colnames(gfTrans1_sel)<-"C.Imp_genome_before"
gfTrans2_sel <- predict(gfMod_sel, envPop.shift)
colnames(gfTrans2_sel)<-"C.Imp_genome_after"
# offset needs to be considered using absolute values ()
offset_sel <- gfTrans2_sel-gfTrans1_sel
offset_sel <- gfTrans2_sel-gfTrans1_sel
colnames(offset_sel)<-"D_C.Imp_genome"
