x <- c(pAABB,pAaBB,paaBB,pAABb,pAaBb,paaBb,pAAbb,pAabb,paabb)
}
# plot AB frequency
plot(g, plotAB, ylim=c(0,1), type='b', col='blue', lwd=3, xlab="iterations",
ylab="Haplotype frequency or D")
# plot Ab
par(new=TRUE)# save the last plot to overlay
plot(g, plotAb, type="b", lwd=3, ylim=c(0,1), col="red", xlab=" ", ylab=" ")
# plot aB
par(new=TRUE)# save the last plot to overlay
plot(g, plotaB, type="b", lwd=3, ylim=c(0,1), col="green", xlab=" ", ylab=" ")
# plot ab
par(new=TRUE)# save the last plot to overlay
plot(g, plotab, type="b", lwd=3, ylim=c(0,1), col="orange", xlab=" ", ylab=" ")
# plot D
par(new=TRUE)# save the last plot to overlay
plot(g, plotD, ylim=c(0,1), type='b', col='gray', lwd=3, xlab=" ", ylab=" ")
## Legend
legend('topright', bg='white', legend=c('AB','Ab','aB','ab','D'),
col=c('blue','red','green','orange','gray'), lty=1, lwd=3)
}
Dcalc <- function(AABB, AaBB, aaBB, AABb, AaBb, aaBb, AAbb, Aabb, aabb){
# total observations
sum <- AABB+AaBB+aaBB+AABb+AaBb+aaBb+AAbb+Aabb+aabb
# guess initial haplotype frequencies
AB <- 1/4
Ab <- 1/4
aB <- 1/4
ab <- 1/4
# initial probabilities of the genotypes
pAABB <- AB*AB
pAaBB <- 2*AB*aB
paaBB <- aB*aB
pAABb <- 2*AB*Ab
pAaBb <- 2*AB*ab+2*Ab*aB
paaBb <- 2*aB*ab
pAAbb <- Ab*Ab
pAabb <- 2*Ab*ab
paabb <- ab*ab
# vector of the probabilities
x <- c(pAABB,pAaBB,paaBB,pAABb,pAaBb,paaBb,pAAbb,pAabb,paabb)
# iterations for plotting
g <- c(1:10)
plotAB <- list()
plotAb <- list()
plotaB <- list()
plotab <- list()
plotD <- list()
plotlike <- list()
for(i in 1:10){
# estimate the fraction of double heterozygotes in the 'AB/ab' phase
ABphase <- AB*ab/(AB*ab+aB*Ab)
# calculate D
D <- abs(AB*ab-Ab*aB)
# calculate the likelihood of the data
like <- dmultinom(c(AABB,AaBB,aaBB,AABb,AaBb,aaBb,AAbb,Aabb,aabb),prob=x)
# store current iteration results
plotAB[i] <- AB
plotAb[i] <- Ab
plotaB[i] <- aB
plotab[i] <- ab
plotD[i] <- D
plotlike[i] <- like
# show current iteration results
print(paste('AB',AB,'Ab',Ab,'aB',aB,'ab',ab,'AB_phase',ABphase,
'D',D,'like',like))
# update haplotype frequency estimates
AB <- (2*AABB+AABb+AaBB+AaBb*ABphase)/(2*sum)
Ab <- (2*AAbb+AABb++Aabb+AaBb*(1-ABphase))/(2*sum)
aB <- (2*aaBB+aaBb+AaBB+AaBb*(1-ABphase))/(2*sum)
ab <- (2*aabb+aaBb+Aabb+AaBb*ABphase)/(2*sum)
# update genotype frequency estimates
pAABB <- AB*AB
pAaBB <- 2*AB*aB
paaBB <- aB*aB
pAABb <- 2*AB*Ab
pAaBb <- 2*AB*ab+2*Ab*aB
paaBb <- 2*aB*ab
pAAbb <- Ab*Ab
pAabb <- 2*Ab*ab
paabb <- ab*ab
# save genotype frequencies in a vector for the multinomial
x <- c(pAABB,pAaBB,paaBB,pAABb,pAaBb,paaBb,pAAbb,pAabb,paabb)
}
# plot AB frequency
plot(g, plotAB, ylim=c(0,1), type='b', col='blue', lwd=3, xlab="iterations",
ylab="Haplotype frequency or D")
# plot Ab
par(new=TRUE)# save the last plot to overlay
plot(g, plotAb, type="b", lwd=3, ylim=c(0,1), col="red", xlab=" ", ylab=" ")
# plot aB
par(new=TRUE)# save the last plot to overlay
plot(g, plotaB, type="b", lwd=3, ylim=c(0,1), col="green", xlab=" ", ylab=" ")
# plot ab
par(new=TRUE)# save the last plot to overlay
plot(g, plotab, type="b", lwd=3, ylim=c(0,1), col="orange", xlab=" ", ylab=" ")
# plot D
par(new=TRUE)# save the last plot to overlay
plot(g, plotD, ylim=c(0,1), type='b', col='gray', lwd=3, xlab=" ", ylab=" ")
## Legend
legend('topright', bg='white', legend=c('AB','Ab','aB','ab','D'),
col=c('blue','red','green','orange','gray'), lty=1, lwd=3)
}
Dcalc(AABB, AaBB, aaBB, AABb, AaBb, aaBb, AAbb, Aabb, aabb)
install.packages("pegas")
detach("package:ade4", unload = TRUE)
detach("package:adegenet", unload = TRUE)
install.packages("diveRsity")
remotes::install_github("thierrygosselin/radiator")
detach("package:ade4", unload = TRUE)
detach("package:adegenet", unload = TRUE)
memory.limit()
memory.size()
memory.size(T)
require(hierfstat)
install.packages("hierfstat")
require(hierfstat)
load("E:/Research_AJL/TTT_Offset_Vulnerability_GF_Sims/results/R_results/1940819310024.RData")
require(doParallel, lib.loc=library.path)
install.packages("doParallel")
require(doParallel, lib.loc=library.path)
.libPaths()
# Post_geno<-data.frame(PopsALL,Gt2f)
# colnames(Post_geno)[1]<-"Locality"
cores <- 7
cl <- makeCluster(cores)
registerDoParallel(cl)
require(doParallel)
cl <- makeCluster(cores)
registerDoParallel(cl)
start_time <- Sys.time()
Pre_FST<-pairwise.WCfst(Pre_geno,diploid = T)
end_time <- Sys.time()
print(paste("Run time:",end_time - start_time))
stopCluster(cl)
.libPaths()
#library.path <- c("C:/Users/18084/Documents/R/win-library/3.6","E:/R-3.6.2/library")
library.path <- .libPaths()
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
memory)=
memory()
Memory()
?Memory
memory.limit()
memory.size()
memory.size(T)
memory.size(T)
gc()
memory.size()
?gc
gc(T)
install.packages(c("adegenet", "ape", "asremlPlus", "backports", "bayestestR", "broom", "calibrate", "cubature", "dae", "dbplyr", "deldir", "dplyr", "DT", "effectsize", "ellipsis", "emmeans", "fs", "gganimate", "ggeffects", "glue", "gplots", "haven", "htmltools", "httpuv", "insight", "isoband", "jsonlite", "knitr", "later", "lubridate", "magick", "modelr", "mvtnorm", "nloptr", "openssl", "parameters", "performance", "pillar", "pinfsc50", "pkgbuild", "pkgload", "processx", "promises", "ps", "raster", "Rcpp", "RcppArmadillo", "rlang", "rmarkdown", "roxygen2", "rversions", "scales", "segmented", "sf", "shiny", "sjlabelled", "sjmisc", "sjPlot", "sp", "spData", "spdep", "tibble", "tidyr", "tidyselect", "tinytex", "transformr", "units", "vctrs", "xfun"))
install.packages(c("nlme", "survival"), lib="E:/R-3.6.2/library")
library(hierfstat)
detach("package:hierfstat", unload = TRUE)
install.packages(hierfstat)
install.packages("hierfstat")
library(devtools)
install_github("jgx65/hierfstat")
library(hierfstat)
.libPaths()
library(devtools)
>install_github()
?install_github()
install_github("jgx65/hierfstat")
require(hierfstat)
install.packages("hierfstat")
require(hierfstat)
library(hierfstat)
.libPaths()
#library.path <- c("C:/Users/18084/Documents/R/win-library/3.6","E:/R-3.6.2/library")
library.path <- .libPaths()
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
install.packages(c("data.table", "gdm", "gridExtra", "modEvA", "pbapply", "PresenceAbsence", "ROCR"))
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
install.packages(c("cowplot", "qqman"))
install.packages(c("data.table", "gdm", "gridExtra", "modEvA", "pbapply", "PresenceAbsence", "ROCR"))
library(devtools)
install_github("jgx65/hierfstat")
install.packages("devtools")
library(devtools)
install_github("jgx65/hierfstat")
detach("package:hierfstat", unload = TRUE)
library(devtools)
install_github("jgx65/hierfstat")
require(hierfstat)
remove.packages("hierfstat")
install.packages("hierfstat")
require(hierfstat)
library(hierfstat)
remove.packages("hierfstat")
library.path <- .libPaths()
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
install.packages("devtools")
library(STICH)
library(STITCH)
install.packages("Rcpp")
install.packages("seqinr", dependencies = T)
seed_table <- read.table("seeds_source_R.txt")
#Visualizing multilocus data
require(ggplot2)
require(cowplot)
require(qqman)
require(RColorBrewer)
require(colorspace)
require(dplyr)
require(reshape2)
setwd("E:/Research_AJL/TTT_Offset_Vulnerability_GF_Sims/")
seed_table <- read.table("seeds_source_R.txt")
Corr_plots <- vector('list', nrow(seed_table))
for(w in 1:nrow(seed_table)){
seed <- seed_table$V2[w]
loc <- read.csv(paste("results/R_results/",seed,"_summary_Loc.csv",sep=""))
# print(summary(loc$F_ST_ll1)[c(1,6)])
# print(summary(loc$R2)[c(1,6)])
# }
pos_T1<-scan(paste("results/SLiM_output/Sim_sum/",seed,"_T1_Pos_ML_WF.txt",sep=""))
select_pos_num <-unique(pos_T1)
select_pos <- paste("M",unique(pos_T1),sep="")
loc_sel <- loc[loc$Locus %in% select_pos,]
Corr <- NULL
for(i in 1:nrow(loc)){
if(loc[i,]$Rho_Env1>0.2 & loc[i,]$Rho_Env2>0.2){
Corr <- c(Corr, "E1 & E2 positive")
}
else if(loc[i,]$Rho_Env1>0.2 & loc[i,]$Rho_Env2<(-0.2)){
Corr <- c(Corr, "E1 positive\nE2 negative")
}
else if(loc[i,]$Rho_Env1<(-0.2) & loc[i,]$Rho_Env2>0.2){
Corr <- c(Corr, "E1 negative\nE2 positive")
}
else if(loc[i,]$Rho_Env1<(-0.2) & loc[i,]$Rho_Env2<(-0.2)){
Corr <- c(Corr, "E1 & E2 negative")
}
else if(loc[i,]$Rho_Env1>0.2){
Corr <- c(Corr, "E1 positive")
}
else if(loc[i,]$Rho_Env1<(-0.2)){
Corr <- c(Corr, "E1 negative")
}
else if(loc[i,]$Rho_Env2>(0.2)){
Corr <- c(Corr, "E2 positive")
}
else if(loc[i,]$Rho_Env2<(-0.2)){
Corr <- c(Corr, "E2 negative")
}
else{
Corr <- c(Corr, "Not correlated")
}
}
loc$Corr <- Corr
Corr_plots[[w]] <- local({
w <- w
P <- ggplot(loc, aes(F_ST_ll1, R2))+
geom_point(aes(col=Corr, shape=Corr), size=2, stroke=2)+
scale_shape_manual(values=c(0,2,3,4,11,6,7,8,16))+
geom_point(data = loc_sel, aes(F_ST_ll1, R2), shape=21, size=6, stroke=2)+
xlab(expression(paste("F"[ST])))+
ylab(expression(paste("R"^2)))+
xlim(-0.025,0.31)+
ylim(0,0.8)+
labs(col="Environmental\nCorrelation", shape="Environmental\nCorrelation")+
ggtitle(paste("Case",seed_table$V5[w], "seed =",seed, sep=" "))+
theme_classic()
print(P)
})
}
Corr_plots[[1]]
dim(Corr_plots)
length(Corr_plots)
plot_grid(Corr_plots[[1]],Corr_plots[[2]],Corr_plots[[3]],Corr_plots[[4]],Corr_plots[[5]],Corr_plots[[6]],Corr_plots[[7]],Corr_plots[[8]],Corr_plots[[9]],Corr_plots[[10]],
Corr_plots[[11]],Corr_plots[[12]],Corr_plots[[13]],Corr_plots[[14]],Corr_plots[[15]],Corr_plots[[16]],Corr_plots[[17]],Corr_plots[[18]],Corr_plots[[19]],Corr_plots[[20]],
Corr_plots[[21]],Corr_plots[[22]],Corr_plots[[23]],Corr_plots[[24]],Corr_plots[[25]],Corr_plots[[26]],Corr_plots[[27]],Corr_plots[[28]],Corr_plots[[29]],Corr_plots[[30]],
Corr_plots[[31]],Corr_plots[[32]],Corr_plots[[33]],Corr_plots[[34]],Corr_plots[[35]],Corr_plots[[36]],Corr_plots[[37]],Corr_plots[[38]],Corr_plots[[39]],Corr_plots[[40]],
ncol=4)
P <- ggplot(loc, aes(F_ST_ll1, R2))+
geom_point(aes(col=Corr, shape=Corr), size=2, stroke=2)+
scale_shape_manual(values=c(0,2,3,4,11,6,7,8,16))+
geom_point(data = loc_sel, aes(F_ST_ll1, R2), shape=21, size=6, stroke=2)+
xlab(expression(paste("F"[ST])))+
ylab(expression(paste("R"^2)))+
xlim(-0.025,0.31)+
ylim(0,0.8)+
labs(col="Environmental\nCorrelation", shape="Environmental\nCorrelation")+
ggtitle(paste("Case",seed_table$V5[w], "seed =",seed, sep=" "))+
theme(legend.position = "none")+
theme_classic()
get_legend(P+theme(legend.margin=margin(t=5, r=0, b=0, l=0, unit="cm")))
leg<-get_legend(P+theme(legend.margin=margin(t=5, r=0, b=0, l=0, unit="cm")))
plot_grid(P,leg)
P
P <- ggplot(loc, aes(F_ST_ll1, R2))+
geom_point(aes(col=Corr, shape=Corr), size=2, stroke=2)+
scale_shape_manual(values=c(0,2,3,4,11,6,7,8,16))+
geom_point(data = loc_sel, aes(F_ST_ll1, R2), shape=21, size=6, stroke=2)+
xlab(expression(paste("F"[ST])))+
ylab(expression(paste("R"^2)))+
xlim(-0.025,0.31)+
ylim(0,0.8)+
labs(col="Environmental\nCorrelation", shape="Environmental\nCorrelation")+
ggtitle(paste("Case",seed_table$V5[w], "seed =",seed, sep=" "))+
theme_classic()+
theme(legend.position = "none")
print(P)
leg<-get_legend(P+theme(legend.margin=margin(t=5, r=0, b=0, l=0, unit="cm")))
plot_grid(P,leg)
P <- ggplot(loc, aes(F_ST_ll1, R2))+
geom_point(aes(col=Corr, shape=Corr), size=2, stroke=2)+
scale_shape_manual(values=c(0,2,3,4,11,6,7,8,16))+
geom_point(data = loc_sel, aes(F_ST_ll1, R2), shape=21, size=6, stroke=2)+
xlab(expression(paste("F"[ST])))+
ylab(expression(paste("R"^2)))+
xlim(-0.025,0.31)+
ylim(0,0.8)+
labs(col="Environmental\nCorrelation", shape="Environmental\nCorrelation")+
ggtitle(paste("Case",seed_table$V5[w], "seed =",seed, sep=" "))+
theme_classic()
print(P)
leg<-get_legend(P+theme(legend.margin=margin(t=5, r=0, b=0, l=0, unit="cm")))
plot_grid(P,leg)
P <- ggplot(loc, aes(F_ST_ll1, R2))+
geom_point(aes(col=Corr, shape=Corr), size=2, stroke=2)+
scale_shape_manual(values=c(0,2,3,4,11,6,7,8,16))+
geom_point(data = loc_sel, aes(F_ST_ll1, R2), shape=21, size=6, stroke=2)+
xlab(expression(paste("F"[ST])))+
ylab(expression(paste("R"^2)))+
xlim(-0.025,0.31)+
ylim(0,0.8)+
labs(col="Environmental\nCorrelation", shape="Environmental\nCorrelation")+
ggtitle(paste("Case",seed_table$V5[w], "seed =",seed, sep=" "))+
theme_classic()+
theme(legend.position = "none")
plot_grid(P,leg)
for(w in 1:nrow(seed_table)){
seed <- seed_table$V2[w]
loc <- read.csv(paste("results/R_results/",seed,"_summary_Loc.csv",sep=""))
# print(summary(loc$F_ST_ll1)[c(1,6)])
# print(summary(loc$R2)[c(1,6)])
# }
pos_T1<-scan(paste("results/SLiM_output/Sim_sum/",seed,"_T1_Pos_ML_WF.txt",sep=""))
select_pos_num <-unique(pos_T1)
select_pos <- paste("M",unique(pos_T1),sep="")
loc_sel <- loc[loc$Locus %in% select_pos,]
Corr <- NULL
for(i in 1:nrow(loc)){
if(loc[i,]$Rho_Env1>0.2 & loc[i,]$Rho_Env2>0.2){
Corr <- c(Corr, "E1 & E2 positive")
}
else if(loc[i,]$Rho_Env1>0.2 & loc[i,]$Rho_Env2<(-0.2)){
Corr <- c(Corr, "E1 positive\nE2 negative")
}
else if(loc[i,]$Rho_Env1<(-0.2) & loc[i,]$Rho_Env2>0.2){
Corr <- c(Corr, "E1 negative\nE2 positive")
}
else if(loc[i,]$Rho_Env1<(-0.2) & loc[i,]$Rho_Env2<(-0.2)){
Corr <- c(Corr, "E1 & E2 negative")
}
else if(loc[i,]$Rho_Env1>0.2){
Corr <- c(Corr, "E1 positive")
}
else if(loc[i,]$Rho_Env1<(-0.2)){
Corr <- c(Corr, "E1 negative")
}
else if(loc[i,]$Rho_Env2>(0.2)){
Corr <- c(Corr, "E2 positive")
}
else if(loc[i,]$Rho_Env2<(-0.2)){
Corr <- c(Corr, "E2 negative")
}
else{
Corr <- c(Corr, "Not correlated")
}
}
loc$Corr <- Corr
Corr_plots[[w]] <- local({
w <- w
P <- ggplot(loc, aes(F_ST_ll1, R2))+
geom_point(aes(col=Corr, shape=Corr), size=2, stroke=2)+
scale_shape_manual(values=c(0,2,3,4,11,6,7,8,16))+
geom_point(data = loc_sel, aes(F_ST_ll1, R2), shape=21, size=6, stroke=2)+
xlab(expression(paste("F"[ST])))+
ylab(expression(paste("R"^2)))+
xlim(-0.025,0.31)+
ylim(0,0.8)+
labs(col="Environmental\nCorrelation", shape="Environmental\nCorrelation")+
ggtitle(paste("Case",seed_table$V5[w], "seed =",seed, sep=" "))+
theme_classic()+
theme(legend.position = "none")
print(P)
})
}
plot_grid(Corr_plots[[1]],leg)
plot_grid(Corr_plots[[1]],Corr_plots[[2]],Corr_plots[[3]],Corr_plots[[4]],Corr_plots[[5]],Corr_plots[[6]],Corr_plots[[7]],Corr_plots[[8]],Corr_plots[[9]],Corr_plots[[10]],
Corr_plots[[11]],Corr_plots[[12]],Corr_plots[[13]],Corr_plots[[14]],Corr_plots[[15]],Corr_plots[[16]],Corr_plots[[17]],Corr_plots[[18]],Corr_plots[[19]],Corr_plots[[20]],
Corr_plots[[21]],Corr_plots[[22]],Corr_plots[[23]],Corr_plots[[24]],Corr_plots[[25]],Corr_plots[[26]],Corr_plots[[27]],Corr_plots[[28]],Corr_plots[[29]],Corr_plots[[30]],
Corr_plots[[31]],Corr_plots[[32]],Corr_plots[[33]],Corr_plots[[34]],Corr_plots[[35]],Corr_plots[[36]],Corr_plots[[37]],Corr_plots[[38]],Corr_plots[[39]],Corr_plots[[40]],
ncol=4)
plot_grid(Corr_plots[[1]],Corr_plots[[2]],Corr_plots[[3]],Corr_plots[[4]],Corr_plots[[5]],Corr_plots[[6]],Corr_plots[[7]],Corr_plots[[8]],Corr_plots[[9]],Corr_plots[[10]],
Corr_plots[[11]],Corr_plots[[12]],Corr_plots[[13]],Corr_plots[[14]],Corr_plots[[15]],Corr_plots[[16]],Corr_plots[[17]],Corr_plots[[18]],Corr_plots[[19]],Corr_plots[[20]],
nrow=5)
plot_grid(Corr_plots[[1]],Corr_plots[[2]],Corr_plots[[3]],Corr_plots[[4]],Corr_plots[[5]],Corr_plots[[6]],Corr_plots[[7]],Corr_plots[[8]],Corr_plots[[9]],Corr_plots[[10]],
Corr_plots[[11]],Corr_plots[[12]],Corr_plots[[13]],Corr_plots[[14]],Corr_plots[[15]],Corr_plots[[16]],Corr_plots[[17]],Corr_plots[[18]],Corr_plots[[19]],Corr_plots[[20]],
nrow=10, byrow = T)
plot_grid(Corr_plots[[1]],Corr_plots[[2]],Corr_plots[[3]],Corr_plots[[4]],Corr_plots[[5]],
Corr_plots[[11]],Corr_plots[[12]],Corr_plots[[13]],Corr_plots[[14]],Corr_plots[[15]],
nrow=5, byrow = F)
plot_grid(Corr_plots[[6]],Corr_plots[[7]],Corr_plots[[8]],Corr_plots[[9]],Corr_plots[[10]],
Corr_plots[[16]],Corr_plots[[17]],Corr_plots[[18]],Corr_plots[[19]],Corr_plots[[20]],
nrow=5, byrow = F)
plot_grid(Corr_plots[[21]],Corr_plots[[22]],Corr_plots[[23]],Corr_plots[[24]],Corr_plots[[25]],
Corr_plots[[31]],Corr_plots[[32]],Corr_plots[[33]],Corr_plots[[34]],Corr_plots[[35]],
nrow=5, byrow = F)
plot_grid(Corr_plots[[26]],Corr_plots[[27]],Corr_plots[[28]],Corr_plots[[29]],Corr_plots[[30]],
Corr_plots[[36]],Corr_plots[[37]],Corr_plots[[38]],Corr_plots[[39]],Corr_plots[[40]],
nrow=5, byrow = F)
plot_grid(Corr_plots[[1]],leg)
