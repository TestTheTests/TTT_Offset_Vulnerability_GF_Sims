require(OutFLANK)
require(vcfR)
install.packages(c("boot", "foreign", "KernSmooth", "mgcv", "nlme", "survival"))
install.packages("vcfR")
library(adegenet)
library("adegenet")
install.packages("adegenet")
install.packages("gdm")
install.packages("foreach")
install.packages("doParallel")
install.packages("pbapply")
install.packages("gdata")
install.packages("data.table")
install.packages("PresenceAbsence")
install.packages("ROCR")
install.packages("modEvA")
install.packages("dplyr")
install.packages("dplyr")
install.packages("grid")
install.packages("gridExtra")
install.packages("gtools")
install.packages("stringr")
install.packages("reshape2")
require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
require(foreach)
require(doParallel)
require(pbapply)
require(gdata)
require(data.table)
require(PresenceAbsence)
require(ROCR)
require(modEvA)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(stringr)
require(reshape2)
require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
require(foreach)
require(doParallel)
require(pbapply)
require(gdata)
require(data.table)
require(PresenceAbsence)
require(ROCR)
require(modEvA)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(stringr)
require(reshape2)
BiocManager::install()
install.packages("BiocManager")
BiocManager::install("OutFLANK")
require(OutFLANK)
source("http://bioconductor.org/biocLite.R")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("devtools")
biocLite("qvalue")
BiocManager::install("qvalue")
BiocManager::install("OutFLANK")
BiocInstaller::biocLite("OutFLANK")
source("https://bioconductor.org/biocLite.R")
BiocInstaller::biocLite("OutFLANK")
BiocManager::biocLite("OutFLANK")
install_github("whitlock/OutFLANK")
require(devtools)
install_github("whitlock/OutFLANK")
require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
install.packages("extendedForest", repos="http://R-Forge.R-project.org")
install.packages("gradientForest", repos="http://R-Forge.R-project.org")
require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
require(foreach)
require(doParallel)
require(pbapply)
require(gdata)
require(data.table)
require(PresenceAbsence)
require(ROCR)
require(modEvA)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(stringr)
require(reshape2)
require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
require(foreach)
require(doParallel)
require(pbapply)
require(gdata)
require(data.table)
require(PresenceAbsence)
require(ROCR)
require(modEvA)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(stringr)
require(reshape2)
gewd()
getwd()
setwd("/Users/akijarl/Desktop/TTT_Offset_Vulnerability_GF_Sims/")
#f1<-list.files()[grep(".txt",list.files())][11]
f1<-list.files("SLiM_output")[grep(".txt",list.files("SLiM_output"))][1]
#(seed<-substr(f1, start=12, stop=24))
(seed<-substr(f1, start=14, stop=26))
#g1<-substr(f1, start=25, stop=31)
#g1<-substr(f1, start=27, stop=33)
g1 <-"Gen300"
#fit<-read.table(paste("Fit_SP_100_",seed,".txt",sep=""),fill=T)
fit<-read.table(paste("SLiM_output/",f1,sep=""))
fit_nam <- NULL
for(i in 1:100){
fit_nam <- c(fit_nam,paste("P",i,"_fit",sep=""))
}
freq_nam <- NULL
for(i in 1:100){
freq_nam <- c(freq_nam,paste("P",i,"_freq",sep=""))
}
env_nam <- NULL
for(i in 1:100){
env_nam <- c(env_nam,paste("P",i,"_env",sep=""))
}
#colnames(fit)<-c("m","n","u","r","Env_rate","Burnin","Env_shift", "Generation", fit_nam, freq_nam, env_nam)
colnames(fit)<-c("m","n1","n2","n3","n4","n5","n6","n7","n8","n9","n10","u","r","Env_rate","Burnin","Env_shift", "Generation", fit_nam, freq_nam, env_nam)
#N<-data.frame(fit$n[1]*100)
N<-data.frame(sum(fit$n1[1],fit$n2[1],fit$n3[1],fit$n4[1],fit$n5[1],fit$n6[1],fit$n7[1],fit$n8[1],fit$n9[1],fit$n10[1])*10)
colnames(N)<-"N"
#(specs<-data.frame(seed,fit[1,1:2],N,fit[1,3:8]))
(specs<-data.frame(seed,N,fit[1,c(1,12:16)]))
#if neutral:
(specs<-cbind(specs,fit[1,c(2:11)]))
plotTitle <- paste(colnames(specs)[1],":",specs[[1]],", ", colnames(specs)[2],":",specs[2],", ",colnames(specs)[3],":",specs[3],", ",colnames(specs)[4],":",specs[4],", ",colnames(specs)[5],":",specs[5],", ",colnames(specs)[6],":",specs[6],", ",colnames(specs)[7],":",specs[7],", ",colnames(specs)[8],":",specs[8],sep="")
gen_nam <- paste("Gen",fit$Generation,sep="")
#fitt<-data.frame(t(fit[,-1:-8]))
fitt<-data.frame(t(fit[,-1:-17])) # For neutral simulation
colnames(fitt)<-gen_nam
fitt$Location <- as.factor(rep(paste("A",seq(1,10,1),sep=""),30))
fitt$Location <- factor(fitt$Location, levels = unique(fitt$Location))
fitt$Type <- as.factor(c(rep("Fit",100),rep("Freq",100),rep("Env",100)))
require(ggplot2)
require(cowplot)
require(qqman)
install.packages("cowplot")
install.packages("qqman")
require(ggplot2)
require(cowplot)
require(qqman)
require(RColorBrewer)
require(ggplot2)
require(cowplot)
require(qqman)
require(RColorBrewer)
colfunc<-colorRampPalette(c("orange","cyan"))
#plot(c(1:10),rep(1,10),col=colfunc(10),pch=19,cex=5) #Get color gradients for matrix image
#fit[1,210:309]<-fit[2,210:309]
plot(fit$Gen,fit$P19_env,type="l", main=plotTitle, xlab="Generations",ylab="Environmental variable",col="white",ylim=c(-5,10))
k=1
for(i in 209:308){
lines(fit$Gen,fit[,i],lwd=2,col=colfunc(10)[k])
k=k+1
}
#For neutral simulation
plot(fit$Gen,fit$P19_env,type="l", main=plotTitle, xlab="Generations",ylab="Environmental variable",col="white",ylim=c(-5,10))
k=1
for(i in 218:317){
lines(fit$Gen,fit[,i],lwd=2,col=colfunc(10)[k])
k=k+1
}
#par(fig = c(0,1,0,1))
plot(fit$Gen,fit$P19_fit,type="l",main=plotTitle ,xlab="Generations",ylab="Relative Fitness",col="red",ylim=c(min(fit[,c(9:108)]),max(fit[,c(9:108)])))
x=1:10
y=1:10
for(i in x){
for(j in y){
k=((i - 1) + (j - 1) * 10 + 9)
print(k)
lines(fit$Gen,fit[,k],col=colfunc(10)[i])
}
}
lines(fit$Gen,fit$P19_fit, col="red")
#par(fig = c(0,1,0,1))
plot(fit$Gen,fit$P19_freq,type="l", main=plotTitle, xlab="Generations",ylab="Mutant allele frequency",col="red",ylim=c(0,1))
x=1:10
y=1:10
for(i in x){
for(j in y){
k=((i - 1) + (j - 1) * 10 + 109)
lines(fit$Gen,fit[,k],col=colfunc(10)[i])
}
}
lines(fit$Gen,fit$P19_freq, col="red")
ggplot() +
geom_line(aes(x=Env_before, y=gfM2Trans1$C.Imp_M2_before), colour=rgb(0,0,0,0.4), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="Cumulative Importance", x="Environment") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
ggtitle(paste(plotTitle,"Gen. 300")) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
