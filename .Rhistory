require(doParallel)
cl <- makeCluster(cores)
registerDoParallel(cl)
start_time <- Sys.time()
Pre_FST<-pairwise.WCfst(Pre_geno,diploid = T)
end_time <- Sys.time()
print(paste("Run time:",end_time - start_time))
stopCluster(cl)
.libPaths()
#library.path <- c("C:/Users/18084/Documents/R/win-library/3.6","E:/R-3.6.2/library")
library.path <- .libPaths()
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
memory)=
memory()
Memory()
?Memory
memory.limit()
memory.size()
memory.size(T)
memory.size(T)
gc()
memory.size()
?gc
gc(T)
install.packages(c("adegenet", "ape", "asremlPlus", "backports", "bayestestR", "broom", "calibrate", "cubature", "dae", "dbplyr", "deldir", "dplyr", "DT", "effectsize", "ellipsis", "emmeans", "fs", "gganimate", "ggeffects", "glue", "gplots", "haven", "htmltools", "httpuv", "insight", "isoband", "jsonlite", "knitr", "later", "lubridate", "magick", "modelr", "mvtnorm", "nloptr", "openssl", "parameters", "performance", "pillar", "pinfsc50", "pkgbuild", "pkgload", "processx", "promises", "ps", "raster", "Rcpp", "RcppArmadillo", "rlang", "rmarkdown", "roxygen2", "rversions", "scales", "segmented", "sf", "shiny", "sjlabelled", "sjmisc", "sjPlot", "sp", "spData", "spdep", "tibble", "tidyr", "tidyselect", "tinytex", "transformr", "units", "vctrs", "xfun"))
install.packages(c("nlme", "survival"), lib="E:/R-3.6.2/library")
library(hierfstat)
detach("package:hierfstat", unload = TRUE)
install.packages(hierfstat)
install.packages("hierfstat")
library(devtools)
install_github("jgx65/hierfstat")
library(hierfstat)
.libPaths()
library(devtools)
>install_github()
?install_github()
install_github("jgx65/hierfstat")
require(hierfstat)
install.packages("hierfstat")
require(hierfstat)
library(hierfstat)
.libPaths()
#library.path <- c("C:/Users/18084/Documents/R/win-library/3.6","E:/R-3.6.2/library")
library.path <- .libPaths()
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
install.packages(c("data.table", "gdm", "gridExtra", "modEvA", "pbapply", "PresenceAbsence", "ROCR"))
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
install.packages(c("cowplot", "qqman"))
install.packages(c("data.table", "gdm", "gridExtra", "modEvA", "pbapply", "PresenceAbsence", "ROCR"))
library(devtools)
install_github("jgx65/hierfstat")
install.packages("devtools")
library(devtools)
install_github("jgx65/hierfstat")
detach("package:hierfstat", unload = TRUE)
library(devtools)
install_github("jgx65/hierfstat")
require(hierfstat)
remove.packages("hierfstat")
install.packages("hierfstat")
require(hierfstat)
library(hierfstat)
remove.packages("hierfstat")
library.path <- .libPaths()
require(OutFLANK, lib.loc=library.path)
require(vcfR, lib.loc=library.path)
require(adegenet, lib.loc=library.path)
require(gdm, lib.loc=library.path)
require(gradientForest, lib.loc=library.path)
require(foreach, lib.loc=library.path)
require(doParallel, lib.loc=library.path)
require(pbapply, lib.loc=library.path)
require(gdata, lib.loc=library.path)
require(data.table, lib.loc=library.path)
require(PresenceAbsence, lib.loc=library.path)
require(ROCR, lib.loc=library.path)
require(modEvA, lib.loc=library.path)
require(dplyr, lib.loc=library.path)
require(grid, lib.loc=library.path)
require(gridExtra, lib.loc=library.path)
require(gtools, lib.loc=library.path)
require(stringr, lib.loc=library.path)
require(reshape2, lib.loc=library.path)
require(hierfstat)
install.packages("devtools")
library(STICH)
library(STITCH)
install.packages("Rcpp")
########################################################################################\
# Novaseq sequences
########################################################################################
setwd("E:/Research_AJL/Cornell/NovaSeq/")
require(data.table)
reads_mol_NS1 <- read.table("ShadHap1_L002_reads.per.mol.log")
colnames(reads_mol_NS1) <- c("Molecules", "Reads")
molSize_count_NS1 <- read.table("ShadHap1_L002_1kb-bin.molecule.histogram")
colnames(molSize_count_SN1) <- c("Size", "Counts")
colnames(molSize_count_NS1) <- c("Size", "Counts")
ggplot(data=reads_mol_SN1)+
geom_point(aes(y=log(Molecules), x=Reads, size=2),show.legend = FALSE)+
ylim(0,15)+
xlim(0,10)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule - One-plex")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
require(tidyverse)
require(data.table)
require(tidyverse)
require(cowplot)
ggplot(data=reads_mol_SN1)+
geom_point(aes(y=log(Molecules), x=Reads, size=2),show.legend = FALSE)+
ylim(0,15)+
xlim(0,10)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule - One-plex")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_point(aes(y=log(Molecules), x=Reads, size=2),show.legend = FALSE)+
ylim(0,15)+
xlim(0,10)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule - One-plex")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_point(aes(y=(Molecules), x=Reads, size=2),show.legend = FALSE)+
ylim(0,15)+
xlim(0,10)+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_point(aes(y=(Molecules), x=Reads, size=2),show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_point(aes(y=log(Molecules), x=Reads, size=2),show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_bar(aes(y=(Molecules), x=Reads, size=2),show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_col(aes(y=(Molecules), x=Reads, size=2),show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_bar(aes((Molecules)),show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_col(aes((Molecules, Reads)),show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
?geom_col
ggplot(data=reads_mol_NS1, aes(Molecules, Reads))+
geom_col()+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1, aes(log(Molecules), Reads))+
geom_col()+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1, aes(log(Molecules), Reads))+
geom_col(size=2)+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
summary(reads_mol_NS1)
ggplot(data=reads_mol_NS1, aes(log(Molecules), Reads))+
geom_col(width = 2)+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1, aes(log(Molecules), Reads))+
geom_col(width = 1)+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()
ggplot(data=reads_mol_NS1)+
geom_col(aes(log(Molecules), Reads),width = 1)+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()
ggplot(data=reads_mol_NS1)+
geom_col(aes(log(Molecules), Reads))+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()
ggplot()+
geom_col(data=reads_mol_NS1,aes(log(Molecules), Reads))+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()
ggplot()+
geom_col(data=reads_mol_NS1,aes((Molecules), Reads))+
xlab("Reads per molecule")+
ylab("Number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()
colnames(reads_mol_NS1) <- c("Number of molecules", "Reads per molecule")
summary(reads_mol_NS1)
molSize_count_NS1 <- read.table("ShadHap1_L002_1kb-bin.molecule.histogram")
colnames(molSize_count_NS1) <- c("Size", "Counts")
sumary(molSize_count_NS1)
summary(molSize_count_NS1)
colnames(molSize_count_NS1) <- c("Molecule size", "Counts")
summary(molSize_count_NS1)
reads_mol_NS1 <- read.table("ShadHap1_L002_reads.per.mol.log")
View(reads_mol_NS1)
colnames(reads_mol_NS1) <- c("Reads per molecule", "Number of molecules")
summary(reads_mol_NS1)
colnames(reads_mol_NS1) <- c("Reads per molecule", "Number of molecules")
summary(reads_mol_NS1)
reads_mol_NS1
summary(molSize_count_NS1)
summary(reads_mol_NS1)
ggplot(data=reads_mol_NS1)+
geom_point(aes(y=log(Molecules), x=Reads, size=2),show.legend = FALSE)+
ylim(0,15)+
xlim(0,10)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
colnames(reads_mol_NS1) <- c("Reads", "Molecules")
ggplot(data=reads_mol_NS1)+
geom_point(aes(y=log(Molecules), x=Reads, size=2),show.legend = FALSE)+
ylim(0,15)+
xlim(0,10)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_point(aes(y=log(Molecules), x=Reads, size=2),show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
summary(reads_mol_NS1)
mean(reads_mol_NS1$Reads)
mean(reads_mol_NS1$Molecules)
(reads_mol_NS1$Molecules)
(reads_mol_NS1$Reads)
mean(reads_mol_NS1$Reads)
ggplot(data=reads_mol_NS1)+
geom_line(aes(y=log(Molecules), x=Reads, size=2),show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_line(aes(y=log(Molecules), x=Reads),show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_line(aes(y=log(Molecules), x=Reads, size=1),show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_line(aes(y=log(Molecules), x=Reads, size=0.5),show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_line(aes(y=log(Molecules), x=Reads),size=1,show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=reads_mol_NS1)+
geom_point(aes(y=log(Molecules), x=Reads, size=2),show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=molSize_count_NS1)+
geom_line(aes(y=log(Size), x=Reads),size=1,show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=molSize_count_NS1)+
geom_line(aes(y=log(Size), x=Counts),size=1,show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
colnames(molSize_count_NS1) <- c("Size", "Counts")
ggplot(data=molSize_count_NS1)+
geom_line(aes(y=log(Size), x=Counts),size=1,show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=molSize_count_NS1)+
geom_bar(aes(y=log(Size), x=Counts),size=1,show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=molSize_count_NS1)+
geom_bar(aes(log(Size)),size=1,show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=molSize_count_NS1)+
geom_points(aes(y=log(Size), x=Counts),size=1,show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=molSize_count_NS1)+
geom_point(aes(y=log(Size), x=Counts),size=1,show.legend = FALSE)+
xlab("Reads per molecule")+
ylab("Log number of molecules")+
ggtitle("Number of reads per molecule")+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
reads_mol_NS1$Molecules
reads_mol_NS1$Molecules * reads_mol_NS1$Reads
sum(reads_mol_NS1$Molecules * reads_mol_NS1$Reads)
sum(reads_mol_NS1$Molecules * reads_mol_NS1$Reads)/sum(reads_mol_NS1$Molecules)
require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
require(foreach)
require(doParallel)
require(pbapply)
require(gdata)
require(data.table)
require(PresenceAbsence)
require(ROCR)
require(modEvA)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(stringr)
require(reshape2)
require(hierfstat)
options(scipen = 999)
log(16777000)
require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
require(foreach)
require(doParallel)
require(pbapply)
require(gdata)
require(data.table)
require(PresenceAbsence)
require(ROCR)
require(modEvA)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(stringr)
require(reshape2)
require(hierfstat)
options(scipen = 999)
#cores <- 7
#cl <- makeCluster(cores)
#registerDoParallel(cl)
#setwd("/Users/akijarl/Desktop/PostDoc/TTT_Offset_Vulnerability_GF_Sims/")
#setwd("/Users/akijarl/Desktop/TTT_Offset_Vulnerability_GF_Sims/")
setwd("E:/Research_AJL/TTT_Offset_Vulnerability_GF_Sims/")
