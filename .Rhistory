<<<<<<< HEAD
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
#ggtitle(paste(plotTitle,", alleles under selection")) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
D <- ggplot() +
geom_line(aes(x=envPop2$envPop2, y=gfTrans1_sel2$C.Imp_genome_before), colour=rgb(0,0,0,0.4), lwd=1.5) +
#facet_grid(. ~ strSel) +
ylab("\n(Adaptive)\n") +
xlab("Environment 2")+
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
#theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
scale_y_continuous(position = "right", sec.axis = sec_axis(~., labels = NULL),limits = c(-0.002,0.05)) +
#ggtitle(plotTitle) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
title <- ggdraw() + draw_label(plotTitle, fontface='bold')
plot_grid(title,NULL,A,B,C,D,nrow=3,ncol=2,rel_heights = c(1,3,3))
## Visualize CI for individual alleles
cImp1sel <- cImp1[cImp1$allele%in%select_pos,]
A <- ggplot() +
geom_line(data=cImp1, aes(x=x , y=y, group=allele), color="grey", lwd=1.5) +
geom_line(data=cImp1sel, aes(x=x , y=y, group=allele),color="red",lwd=1.5) +
ylab("Cumulative Importance")+
xlab("Environment 1") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
ylim(0.0,0.5)
cImp2sel <- cImp2[cImp2$allele%in%select_pos,]
B <- ggplot() +
geom_line(data=cImp2, aes(x=x , y=y, group=allele), color="grey", lwd=1.5) +
geom_line(data=cImp2sel, aes(x=x , y=y, group=allele),color="red",lwd=1.5) +
ylab("Cumulative Importance")+
xlab("Environment 2") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
ylim(0.0,0.5)
title <- ggdraw() + draw_label(plotTitle, fontface='bold')
plot_grid(title,NULL,A,B,nrow=2,ncol=2,rel_heights = c(1,3))
A <- ggplot() +
geom_line(data=cImp1, aes(x=x , y=y, group=allele), color="grey", lwd=1.5) +
geom_line(data=cImp1sel, aes(x=x , y=y, group=allele),color="red",lwd=1.5) +
ylab("Cumulative Importance")+
xlab("Environment 1") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
ylim(0.0,0.4)
cImp2sel <- cImp2[cImp2$allele%in%select_pos,]
B <- ggplot() +
geom_line(data=cImp2, aes(x=x , y=y, group=allele), color="grey", lwd=1.5) +
geom_line(data=cImp2sel, aes(x=x , y=y, group=allele),color="red",lwd=1.5) +
ylab("Cumulative Importance")+
xlab("Environment 2") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
ylim(0.0,0.4)
title <- ggdraw() + draw_label(plotTitle, fontface='bold')
plot_grid(title,NULL,A,B,nrow=2,ncol=2,rel_heights = c(1,3))
#plot the allele frequencies of the ten alleles with the highest CI values
top_al1<-unique(cImp1[order(cImp1$y,decreasing = T),]$allele)[1:10]
length(unique(cImp1$allele))
alf1<-Pop_afreq1[,colnames(Pop_afreq1)%in%top_al1]
alf1$Env1 <- envPop1$envPop1
alf1b <- melt(alf1, id = "Env1", variable.name = "Allele")
alf1c <- alf1b %>%
group_by(Env1,Allele) %>%
summarise(average = mean(value))
A <-
ggplot() +
geom_line(data=alf1c, aes(x=Env1, y=average, linetype=Allele, color=Allele),lwd=1) +
ylab("Allele frequency (average)")+
xlab("Environment 1") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#scale_color_discrete_qualitative(palette = "Pastel")+
#geom_text(aes(x=rep(-0.75,10),y= c(seq(0.5,0.3,length.out =10)), label =top_al1))+
#annotate("text",x = -1, y =0.5, label=paste(top_al1))+
ylim(0.0,1)
top_al2<-unique(cImp2[order(cImp2$y,decreasing = T),]$allele)[1:10]
length(unique(cImp2$allele))
alf2<-Pop_afreq1[,colnames(Pop_afreq1)%in%top_al2]
alf2$Env2 <- envPop2$envPop2
alf2b <- melt(alf2, id = "Env2", variable.name = "Allele")
alf2c <- alf2b %>%
group_by(Env2,Allele) %>%
summarise(average = mean(value))
B <- ggplot() +
geom_line(data=alf2c, aes(x=Env2, y=average, linetype=Allele, color=Allele),lwd=1) +
ylab("")+
xlab("Environment 2") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
# theme(axis.text.y = element_text(size = 16, colour = "grey60"),
#       axis.title.y = element_text(size=24, vjust=1)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16))+
ylim(0.0,1)+
theme(plot.title = element_text(size=14, face="bold.italic"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
title <- ggdraw() + draw_label(plotTitle, fontface='bold')
plot_grid(title,NULL,A,B,nrow=2,ncol=2,rel_heights = c(1,3), rel_widths = c(1.1,1))
alf1s<-alFreq_sel
alf1s$Env1 <- envPop1$envPop1
alf1sb <- melt(alf1s, id = "Env1", variable.name = "Allele")
alf1sc <- alf1sb %>%
group_by(Env1,Allele) %>%
summarise(average = mean(value))
A <-
ggplot() +
geom_line(data=alf1sc, aes(x=Env1, y=average, color=Allele),lwd=1) +
ylab("Adapted allele frequency (average)")+
xlab("Environment 1") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#scale_color_discrete_qualitative(palette = "Pastel")+
#geom_text(aes(x=rep(-0.75,10),y= c(seq(0.5,0.3,length.out =10)), label =top_al1))+
#annotate("text",x = -1, y =0.5, label=paste(top_al1))+
guides(color = FALSE) +
ylim(0.0,1)
alf2s<-alFreq_sel
alf2s$Env2 <- envPop2$envPop2
alf2sb <- melt(alf2s, id = "Env2", variable.name = "Allele")
alf2sc <- alf2sb %>%
group_by(Env2,Allele) %>%
summarise(average = mean(value))
B <- ggplot() +
geom_line(data=alf2sc, aes(x=Env2, y=average, color=Allele),lwd=1) +
ylab("")+
xlab("Environment 2") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16))+
ylim(0.0,1)
title <- ggdraw() + draw_label(plotTitle, fontface='bold')
plot_grid(title,NULL,A,B,nrow=2,ncol=2,rel_heights = c(1,3), rel_widths = c(1,1.5))
A <-
ggplot() +
geom_line(data=alf1sc, aes(x=Env1, y=average, color=Allele),lwd=1) +
ylab("Adapted allele frequency (average)")+
xlab("Environment 1") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#scale_color_discrete_qualitative(palette = "Pastel")+
#geom_text(aes(x=rep(-0.75,10),y= c(seq(0.5,0.3,length.out =10)), label =top_al1))+
#annotate("text",x = -1, y =0.5, label=paste(top_al1))+
guides(color = FALSE) +
ylim(0.0,1)
alf2s<-alFreq_sel
alf2s$Env2 <- envPop2$envPop2
alf2sb <- melt(alf2s, id = "Env2", variable.name = "Allele")
alf2sc <- alf2sb %>%
group_by(Env2,Allele) %>%
summarise(average = mean(value))
B <- ggplot() +
geom_line(data=alf2sc, aes(x=Env2, y=average, color=Allele),lwd=1) +
ylab("")+
xlab("Environment 2") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16))+
guides(color = FALSE) +
ylim(0.0,1)
title <- ggdraw() + draw_label(plotTitle, fontface='bold')
plot_grid(title,NULL,A,B,nrow=2,ncol=2,rel_heights = c(1,3), rel_widths = c(1,1.5))
alf1sc
alf1sb
View(alf1sb)
View(alf1s)
alFreq_sel
Pop_afreq1
View(Pop_afreq1)
alf1sc
Pop_afreq1$M6298
colnamed(Pop_afreq1)=="M6298"
colname(Pop_afreq1)=="M6298"
colnames(Pop_afreq1)=="M6298"
G1f[127,]
nrow(geno1_filt)
ncol(geno1_filt)
geno1_filt
geno1_filt[127]
geno1_filt[127,]
length(vcf1_filt@gt[,-1])
length(geno1_filt)
dim(geno1_filt)
length(geno1_filt[127,])
length(geno1_filt[127,1000])
length(geno1_filt[127,1001])
length(geno1_filt[127,])
geno1_filt[127,]
#vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,".recode.vcf",sep=""))
vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_filtered_subset.recode.vcf",sep=""))
View(vcf1_filt)
seed
vcf1_filt@gt[127,-1]
geno1_filt[127,]
geno1_filt <- vcf1_filt@gt[,-1] # Remove 1st column, which is 'Format'
position1_filt <- as.numeric(getPOS(vcf1_filt)) # Positions in bp
chromosome1_filt <- as.numeric(getCHROM(vcf1_filt)) # Chromosome information
No_A<-unname(dim(vcf1_filt)[1]) #Get the number of filtered alleles
rm(vcf1_filt)
gc()
G1f <- matrix(NA, nrow = nrow(geno1_filt), ncol = ncol(geno1_filt))
G1f[geno1_filt %in% c("0/0", "0|0")] <- 0
G1f[geno1_filt %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G1f[geno1_filt %in% c("1/1", "1|1")] <- 2
Pop_afreq1<-NULL
for(i in 1:100){
Pop_afreq1<-rbind(Pop_afreq1,rowSums(G1f[,Start[i]:Stop[i]])/(2*ncol(G1f[,Start[i]:Stop[i]])))
#print(paste("Start:", Start[i],", Stop:", Stop[i]))
}
Pop_afreq1<-data.frame(Pop_afreq1)
colnames(Pop_afreq1)<-paste("M",position1_filt,sep="")
alf1<-Pop_afreq1[,colnames(Pop_afreq1)%in%top_al1]
alf1$Env1 <- envPop1$envPop1
alf1b <- melt(alf1, id = "Env1", variable.name = "Allele")
alf1c <- alf1b %>%
group_by(Env1,Allele) %>%
summarise(average = mean(value))
A <-
ggplot() +
geom_line(data=alf1c, aes(x=Env1, y=average, linetype=Allele, color=Allele),lwd=1) +
ylab("Allele frequency (average)")+
xlab("Environment 1") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#scale_color_discrete_qualitative(palette = "Pastel")+
#geom_text(aes(x=rep(-0.75,10),y= c(seq(0.5,0.3,length.out =10)), label =top_al1))+
#annotate("text",x = -1, y =0.5, label=paste(top_al1))+
ylim(0.0,1)
top_al2<-unique(cImp2[order(cImp2$y,decreasing = T),]$allele)[1:10]
length(unique(cImp2$allele))
alf2<-Pop_afreq1[,colnames(Pop_afreq1)%in%top_al2]
alf2$Env2 <- envPop2$envPop2
alf2b <- melt(alf2, id = "Env2", variable.name = "Allele")
alf2c <- alf2b %>%
group_by(Env2,Allele) %>%
summarise(average = mean(value))
B <- ggplot() +
geom_line(data=alf2c, aes(x=Env2, y=average, linetype=Allele, color=Allele),lwd=1) +
ylab("")+
xlab("Environment 2") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
# theme(axis.text.y = element_text(size = 16, colour = "grey60"),
#       axis.title.y = element_text(size=24, vjust=1)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16))+
ylim(0.0,1)+
theme(plot.title = element_text(size=14, face="bold.italic"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
title <- ggdraw() + draw_label(plotTitle, fontface='bold')
plot_grid(title,NULL,A,B,nrow=2,ncol=2,rel_heights = c(1,3), rel_widths = c(1.1,1))
#Merge the population specific allele frequencies of all neutral (M1) alleles with the population specific frequency of the selected (M2) allele
alFreq<-cbind(data.frame(Pop_afreq1))
alFreq_sel<-alFreq[colnames(alFreq)%in%select_pos]
alf1s<-alFreq_sel
alf1s$Env1 <- envPop1$envPop1
alf1sb <- melt(alf1s, id = "Env1", variable.name = "Allele")
alf1sc <- alf1sb %>%
group_by(Env1,Allele) %>%
summarise(average = mean(value))
A <-
ggplot() +
geom_line(data=alf1sc, aes(x=Env1, y=average, color=Allele),lwd=1) +
ylab("Adapted allele frequency (average)")+
xlab("Environment 1") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#scale_color_discrete_qualitative(palette = "Pastel")+
#geom_text(aes(x=rep(-0.75,10),y= c(seq(0.5,0.3,length.out =10)), label =top_al1))+
#annotate("text",x = -1, y =0.5, label=paste(top_al1))+
guides(color = FALSE) +
ylim(0.0,1)
alf2s<-alFreq_sel
alf2s$Env2 <- envPop2$envPop2
alf2sb <- melt(alf2s, id = "Env2", variable.name = "Allele")
alf2sc <- alf2sb %>%
group_by(Env2,Allele) %>%
summarise(average = mean(value))
B <- ggplot() +
geom_line(data=alf2sc, aes(x=Env2, y=average, color=Allele),lwd=1) +
ylab("")+
xlab("Environment 2") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16))+
guides(color = FALSE) +
ylim(0.0,1)
title <- ggdraw() + draw_label(plotTitle, fontface='bold')
plot_grid(title,NULL,A,B,nrow=2,ncol=2,rel_heights = c(1,3), rel_widths = c(1,1.5))
ggplot() +
geom_line(data=alf1sc, aes(x=Env1, y=average, color=Allele),lwd=1) +
ylab("Adapted allele frequency (average)")+
xlab("Environment 1") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#scale_color_discrete_qualitative(palette = "Pastel")+
#geom_text(aes(x=rep(-0.75,10),y= c(seq(0.5,0.3,length.out =10)), label =top_al1))+
#annotate("text",x = -1, y =0.5, label=paste(top_al1))+
guides(color = FALSE) +
ylim(0.0,1)
alf1sc
alFreq_sel
alFreq_sel[is.na(alFreq_sel),]
alFreq_sel[is.na(alFreq_sel)]
alFreq_sel[is.na(alFreq_sel)]
alFreq_sel[,is.na(alFreq_sel)]
alFreq_sel[which(is.na(alFreq_sel))]
alFreq_sel[which(is.na(alFreq_sel)),]
alFreq_sel[127,]
alFreq_sel
View(alFreq_sel)
"M16833"
vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_filtered_subset.recode.vcf",sep=""))
=======
require(ggplot2)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(cowplot)
require(stringr)
require(reshape2)
require(qqman)
require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
require(foreach)
require(doParallel)
require(OutFLANK)
require(pbapply)
require(gdata)
require(data.table)
require(PresenceAbsence)
require(ROCR)
require(modEvA)
require(ggplot2)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(cowplot)
require(stringr)
require(reshape2)
require(qqman)
install.packages("devtools")
require(devtools)
require(qvalue)
install.packages("qvalue")
devtools::install_github("whitlock/OutFLANK")
install.packages("BiocManager")
BiocManager::install("qvalue")
require(qvalue)
devtools::install_github("whitlock/OutFLANK")
require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
require(foreach)
require(doParallel)
require(OutFLANK)
require(pbapply)
require(gdata)
require(data.table)
require(PresenceAbsence)
require(ROCR)
require(modEvA)
require(ggplot2)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(cowplot)
require(stringr)
require(reshape2)
require(qqman)
install.packages("gradientForest", repos = c("http://R-Forge.R-project.org"), dep = TRUE)
install.packages("extendedForest", repos = c("http://R-Forge.R-project.org"), dep = TRUE)
install.packages("extendedForest", repos="http://R-Forge.R-project.org")
install.packages("conformal", repos="http://R-Forge.R-project.org")
install.packages("extendedForest", repos = c("http://R-Forge.R-project.org"), dep = TRUE)
install.packages("gradientForest", repos = c("http://R-Forge.R-project.org"), dep = TRUE)
install.packages("gradientForest", repos="http://R-Forge.R-project.org")
options(repos='http://cran.rstudio.com/')
install.packages("gradientForest", repos="http://R-Forge.R-project.org")
install.packages("gradientForest", repos="http://R-Forge.R-project.org", type="source")
install.packages("extendedForest", repos="http://R-Forge.R-project.org", type="source")
install.packages("extendedForest", repos="http://R-Forge.R-project.org", type="source")
install.packages("conformal", repos="http://R-Forge.R-project.org", type="source")
install.packages("extendedForest", repos="http://R-Forge.R-project.org", type="source")
install.packages("gradientForest", repos="http://R-Forge.R-project.org", type="source")
require(devtools)
install.packages("extendedForest", repos="http://R-Forge.R-project.org", type="source")
install.packages("gradientForest", repos="http://R-Forge.R-project.org", dependencies = T, type="source")
list.file()
list.files()
exit
quit()
library(learnPopGen)
install.packages("learnPopGen")
library(learnPopGen)
coalescent.plot(n=10,ngen= 10,col.order="alternating")
require(brms)
zinb <- read.csv("http://stats.idre.ucla.edu/stat/data/fish.csv")
zinb$camper <- factor(zinb$camper, labels = c("no", "yes"))
head(zinb)
fit_zinb1 <- brm(count ~ persons + child + camper, data = zinb,
family = zero_inflated_poisson("log"))
summary(fit_zinb1)
require(brms)
zinb <- read.csv("http://stats.idre.ucla.edu/stat/data/fish.csv")
zinb$camper <- factor(zinb$camper, labels = c("no", "yes"))
head(zinb)
fit_zinb1 <- brm(count ~ persons + child + camper, data = zinb,
family = zero_inflated_poisson("log"))
summary(fit_zinb1)
#Example 2
data("rent99", package = "gamlss.data")
install.packages("gamlss.data")
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 2, cores = 2)
#Example 2
data("rent99", package = "gamlss.data")
head(rent99)
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 2, cores = 2)
rstan:::get_CXX()
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 4, cores = 2)
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 1, cores = 2)
devtools::install_github("stan-dev/rstan", ref = "develop", subdir =
"rstan/rstan")
require(brms)
#Example 2
data("rent99", package = "gamlss.data")
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 1, cores = 2)
install.packages("rstanarm", type = "source")
require(brms)
#Example 2
data("rent99", package = "gamlss.data")
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 1, cores = 2)
install.packages("StanHeaders")
install.packages("StanHeaders")
install.packages("StanHeaders")
install.packages("StanHeaders")
install.packages(c("bayesplot", "bigreadr", "BiocManager", "calibrate", "caTools", "classInt", "covr", "curl", "data.table", "DT", "e1071", "fields", "foghorn", "future", "gdtools", "gstat", "haven", "hexbin", "highlight", "hms", "htmltools", "htmlwidgets", "httpuv", "igraph", "jomo", "jpeg", "KernSmooth", "knitr", "later", "leaflet", "magick", "maptools", "Matrix", "mgcv", "nlme", "pbapply", "pingr", "promises", "purrr", "quadprog", "R.oo", "raster", "RcppArmadillo", "rgdal", "rgeos", "RgoogleMaps", "rmarkdown", "roxygen2", "rrcov", "RSpectra", "rvest", "selectr", "seqinr", "sf", "shiny", "sp", "spam", "spData", "spdep", "stringdist", "survival", "sys", "testthat", "tidyr", "tidyverse", "tinytex", "tmap", "units", "vegan", "webshot", "whisker", "xfun"))
require(StanHeaders)
require(brms)
require(rstan)
require(StanHeaders)
#Example 2
data("rent99", package = "gamlss.data")
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 1, cores = 2)
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 1, cores = 2)
rstan_options(auto_write = TRUE)
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99,
chains = 1, cores = 2)
#Example 1
zinb <- read.csv("http://stats.idre.ucla.edu/stat/data/fish.csv")
zinb$camper <- factor(zinb$camper, labels = c("no", "yes"))
head(zinb)
fit_zinb1 <- brm(count ~ persons + child + camper, data = zinb,
family = zero_inflated_poisson("log"))
marginal_effects(fit_zinb1)
fit_zinb2 <- brm(bf(count ~ persons + child + camper, zi ~ child),
data = zinb, family = zero_inflated_poisson())
summary(fit_zinb2)
loo(fit_zinb1, fit_zinb2)
#Example 2
data("rent99", package = "gamlss.data")
head(rent99)
fit_zinb2 <- brm(bf(count ~ persons + child + camper, zi ~ child),
data = zinb, family = zero_inflated_poisson())
summary(fit_rent1)
fit_rent1 <- brm(rentsqm ~ t2(area, yearc) + (1|district), data = rent99)
marginal_effects(fit_rent1, surface = TRUE)
bform <- bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district))
fit_rent2 <- brm(bform, data = rent99)#, chains = 2, cores = 2)
require(brms)
require(rstan)
require(StanHeaders)
fit_rent2 <- brm(bform, data = rent99, chains = 2)#, cores = 2)
require(brms)
#Example 2
data("rent99", package = "gamlss.data")
bform <- bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district))
fit_rent2 <- brm(bform, data = rent99, chains = 2)#, cores = 2)
rstan:::get_CXX()
pkgbuild::has_build_tools(debug = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=corei7 -mtune=corei7" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
library("rstan")
require(brms)
bform <- bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district))
fit_rent2 <- brm(bform, data = rent99, chains = 2)#, cores = 2)
install.packages(c('Rcpp', 'RcppArmadillo'))
install.packages(c("Rcpp", "RcppArmadillo"))
install.packages(c("Rcpp", "RcppArmadillo"))
install.packages(c('Rcpp', 'RcppArmadillo'))
require(brms)
#Example 2
data("rent99", package = "gamlss.data")
head(rent99)
bform <- bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district))
fit_rent2 <- brm(bform, data = rent99, chains = 2)#, cores = 2)
require(brms)
require(Rcpp)
require(RcppArmadillo)
require(rstan)
require(StanHeaders)
rstan_options(auto_write = TRUE)
bform <- bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district))
fit_rent2 <- brm(bform, data = rent99, chains = 2)#, cores = 2)
fit_rent2 <- brm(bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district)), data = rent99, chains = 2)#, cores = 2)
fit_rent2 <- brm(bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district)), data = rent99)#, chains = 2, cores = 2)
require(brms)
#Example 2
data("rent99", package = "gamlss.data")
fit_rent2 <- brm(bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district)), data = rent99, chains = 2)#, cores = 2)
require(brms)
#Example 2
data("rent99", package = "gamlss.data")
head(rent99)
fit_rent2 <- brm(bf(rentsqm ~ t2(area, yearc) + (1|ID1|district),sigma ~ t2(area, yearc) + (1|ID1|district)), data = rent99, chains = 2)#, cores = 2)
rm(list=ls())
# for now don't worry about the math,
# just look at the plot after the function
get_fitness_from_env_m2 <- function(env, s){
fitness <- c()
fitness[env<5] <-  1 + s*env[env<5]
fitness[env>=5] <- 1 + s*5 + -4*s*(env[env>=5]-5)
return(fitness)
}
# In this case I am considering a type of thermal performance curve
# approximated with two linear functions
env <- -5:8
plot(env, get_fitness_from_env_m2(env, 0.1),
type="l", col=colfunc(10), lwd=2,
xlab="Environment", ylab="Fitness conferred by mutation")
abline(h=1)
?colorRampPalette
colfunc<-colorRampPalette(c("orange","cyan"))
env <- -5:8
plot(env, get_fitness_from_env_m2(env, 0.1),
type="l", col=colfunc(10), lwd=2,
xlab="Environment", ylab="Fitness conferred by mutation")
abline(h=1)
env_fit<-data.frame(env, get_fitness_from_env_m2(env, 0.1))
env_fit$Col <- c(1:10,20,20,20,20)
ggplot(data=env_fit,aes(x = env_fit$env, y = env_fit$get_fitness_from_env_m2.env..0.1., colour=env_fit$Col)) +
geom_line(size = 2)  +
scale_colour_gradient2(low="orange", mid="cyan",high="red",midpoint =10,guide=F)+
theme(legend.position="none")+
xlab("Environment")+
scale_x_discrete(limits=c(seq(-4,8.5,2)))+
ylab("Relative Fitness conferred by mutation")+
#coord_cartesian(xlim=c(-4,8),ylim=c(0.4,1.5),expand = T)+
#ylim(0.2,1.6)+
scale_y_continuous(breaks = c(.4,.6,.8,1,1.2,1.4), limits=c(0.3,1.5))+
theme_bw(base_size = 16)+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),)+
theme(axis.title.y = element_text(size=14))
require(ggplot2)
env_fit<-data.frame(env, get_fitness_from_env_m2(env, 0.1))
env_fit$Col <- c(1:10,20,20,20,20)
ggplot(data=env_fit,aes(x = env_fit$env, y = env_fit$get_fitness_from_env_m2.env..0.1., colour=env_fit$Col)) +
geom_line(size = 2)  +
scale_colour_gradient2(low="orange", mid="cyan",high="red",midpoint =10,guide=F)+
theme(legend.position="none")+
xlab("Environment")+
scale_x_discrete(limits=c(seq(-4,8.5,2)))+
ylab("Relative Fitness conferred by mutation")+
#coord_cartesian(xlim=c(-4,8),ylim=c(0.4,1.5),expand = T)+
#ylim(0.2,1.6)+
scale_y_continuous(breaks = c(.4,.6,.8,1,1.2,1.4), limits=c(0.3,1.5))+
theme_bw(base_size = 16)+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),)+
theme(axis.title.y = element_text(size=14))
ggplot(data=env_fit,aes(x = env_fit$env, y = 1, colour=env_fit$Col)) +
geom_line(size = 2)  +
scale_colour_gradient2(low="orange", mid="cyan",high="red",midpoint =10,guide=F)+
theme(legend.position="none")+
xlab("Environment")+
scale_x_discrete(limits=c(seq(-4,8.5,2)))+
ylab("Relative Fitness conferred by mutation")+
#coord_cartesian(xlim=c(-4,8),ylim=c(0.4,1.5),expand = T)+
#ylim(0.2,1.6)+
scale_y_continuous(breaks = c(.4,.6,.8,1,1.2,1.4), limits=c(0.3,1.5))+
theme_bw(base_size = 16)+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),)+
theme(axis.title.y = element_text(size=14))
load("~/Desktop/1593909929523.RData")
fs2<-rowsum(fff2[-1,-c(1:3)],fff2$names2[-1])
plot(fs2$V2, type="l",lwd=2,xlab="Optima",ylab="Mutant allele frequency",col=hsv(0.12,sum(fs2$V2)+0.5),ylim=c(0,4))
for(i in 2:ncol(fs2)){
lines(fs2[,i],lwd=2,col="green")
}
View(fs2)
View(fs2)
fs2$V2
fff2$names2[-1]
names
names2
str(fff1)
#seed = 1278335993644
#seed = 3916598271113
#seed = 4496341759106
#seed = 2519699755125
#seed = 7502828106749
seed = 5518873473655
#f1<-list.files("results/SLiM_output/Sim_sum")[grep(".txt",list.files("results/SLiM_output/Sim_sum"))][5]
#(seed<-substr(f1, start=1, stop=13))
#fit<-read.table(paste("Fit_SP_100_",seed,".txt",sep=""),fill=T)
fit<-read.table(paste("results/SLiM_output/Sim_sum/",seed,"_Freq_NL.txt",sep=""))
setwd("/Users/akijarl/Desktop/PostDoc/TTT_Offset_Vulnerability_GF_Sims/")
#f1<-list.files("results/SLiM_output/Sim_sum")[grep(".txt",list.files("results/SLiM_output/Sim_sum"))][5]
#(seed<-substr(f1, start=1, stop=13))
#fit<-read.table(paste("Fit_SP_100_",seed,".txt",sep=""),fill=T)
fit<-read.table(paste("results/SLiM_output/Sim_sum/",seed,"_Freq_NL.txt",sep=""))
fit_nam <- NULL
for(i in 1:100){
fit_nam <- c(fit_nam,paste("P",i,"_fit",sep=""))
}
freq_nam <- NULL
for(i in 1:100){
freq_nam <- c(freq_nam,paste("P",i,"_freq",sep=""))
}
env_nam <- NULL
for(i in 1:100){
env_nam <- c(env_nam,paste("P",i,"_env",sep=""))
}
colnames(fit)<-c("m","n1","n2","n3","n4","n5","n6","n7","n8","n9","n10","u","r","Env_rate","Burnin","Env_shift", "Generation", fit_nam, freq_nam, env_nam)
N<-data.frame(sum(fit$n1[1],fit$n2[1],fit$n3[1],fit$n4[1],fit$n5[1],fit$n6[1],fit$n7[1],fit$n8[1],fit$n9[1],fit$n10[1])*10)
colnames(N)<-"N"
(specs<-data.frame(seed,N,fit[1,c(1,12:16)],fit[1,c(2:11)]))
plotTitle <- paste(colnames(specs)[1],":",specs[[1]],", ", colnames(specs)[2],":",specs[2],", ",colnames(specs)[3],":",specs[3],", ",colnames(specs)[4],":",1e-7,",",colnames(specs)[5],":",specs[5],", ",colnames(specs)[6],":",specs[6],",\n ",colnames(specs)[7],":",specs[7],", ",colnames(specs)[8],":",specs[8],sep="")
gen_nam <- paste("Gen",fit$Generation,sep="")
fitt<-data.frame(t(fit[,-1:-17])) # For neutral simulation
colnames(fitt)<-gen_nam
fitt$Location <- as.factor(rep(paste("A",seq(1,10,1),sep=""),30))
fitt$Location <- factor(fitt$Location, levels = unique(fitt$Location))
fitt$Type <- as.factor(c(rep("Fit",100),rep("Freq",100),rep("Env",100)))
vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_filtered.recode.vcf",sep=""))
require(OutFLANK, lib.loc=library.path)
require(OutFLANK)
require(vcfR)
require(adegenet)
require(gdm)
require(gradientForest)
require(foreach)
require(doParallel)
require(pbapply)
require(gdata)
require(data.table)
require(PresenceAbsence)
require(ROCR)
require(modEvA)
require(dplyr)
require(grid)
require(gridExtra)
require(gtools)
require(stringr)
require(reshape2)
vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_filtered.recode.vcf",sep=""))
#vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_filtered_subset.recode.vcf",sep=""))
geno1_filt <- vcf1_filt@gt[,-1] # Remove 1st column, which is 'Format'
position1_filt <- as.numeric(getPOS(vcf1_filt)) # Positions in bp
chromosome1_filt <- as.numeric(getCHROM(vcf1_filt)) # Chromosome information
vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_filtered.recode.vcf",sep=""))
vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,"_filtered.recode.vcf",sep=""))
vcf1_filt <- read.vcfR(paste("results/SLiM_output/VCF_files/T1_",seed,".recode.vcf",sep=""))
>>>>>>> 6991ad7f98b40309cd23ff79c9cec9983a9b7e5d
geno1_filt <- vcf1_filt@gt[,-1] # Remove 1st column, which is 'Format'
position1_filt <- as.numeric(getPOS(vcf1_filt)) # Positions in bp
chromosome1_filt <- as.numeric(getCHROM(vcf1_filt)) # Chromosome information
No_A<-unname(dim(vcf1_filt)[1]) #Get the number of filtered alleles
rm(vcf1_filt)
<<<<<<< HEAD
gc()
=======
>>>>>>> 6991ad7f98b40309cd23ff79c9cec9983a9b7e5d
G1f <- matrix(NA, nrow = nrow(geno1_filt), ncol = ncol(geno1_filt))
G1f[geno1_filt %in% c("0/0", "0|0")] <- 0
G1f[geno1_filt %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
G1f[geno1_filt %in% c("1/1", "1|1")] <- 2
#Check number of duplicate positions
sum(duplicated(position1_filt))
position1_filt[duplicated(position1_filt)]
sum(duplicated(position2_filt))
<<<<<<< HEAD
#Read in positions of m2 mutations
pos_T1<-scan(paste("results/SLiM_output/Sim_sum/",seed,"_T1_Pos_ML_WF.txt",sep=""))
sum(duplicated(pos_T1))
select_pos_num <-unique(pos_T1)
duplic_pos <- position1_filt[duplicated(position1_filt)]
select_pos <- paste("M",unique(pos_T1),sep="")
for(i in 1:length(position1_filt)){
if(duplicated(position1_filt)[i]){
position1_filt[i]<-position1_filt[i]+0.5
}
}
Start<-seq(1,ncol(geno1_filt),10)
#Stop<-seq(100,ncol(geno1_filt),10)
Stop<-seq(10,ncol(geno1_filt),10)
Pop_afreq1<-NULL
for(i in 1:100){
Pop_afreq1<-rbind(Pop_afreq1,rowSums(G1f[,Start[i]:Stop[i]])/(2*ncol(G1f[,Start[i]:Stop[i]])))
#print(paste("Start:", Start[i],", Stop:", Stop[i]))
}
Pop_afreq1<-data.frame(Pop_afreq1)
colnames(Pop_afreq1)<-paste("M",position1_filt,sep="")
View(Pop_afreq1)
#Merge the population specific allele frequencies of all neutral (M1) alleles with the population specific frequency of the selected (M2) allele
alFreq<-cbind(data.frame(Pop_afreq1))
View(alFreq)
alFreq_sel<-alFreq[colnames(alFreq)%in%select_pos]
View(alFreq_sel)
alf1s<-alFreq_sel
alf1s$Env1 <- envPop1$envPop1
alf1sb <- melt(alf1s, id = "Env1", variable.name = "Allele")
alf1sc <- alf1sb %>%
group_by(Env1,Allele) %>%
summarise(average = mean(value))
A <-
ggplot() +
geom_line(data=alf1sc, aes(x=Env1, y=average, color=Allele),lwd=1) +
ylab("Adapted allele frequency (average)")+
xlab("Environment 1") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#scale_color_discrete_qualitative(palette = "Pastel")+
#geom_text(aes(x=rep(-0.75,10),y= c(seq(0.5,0.3,length.out =10)), label =top_al1))+
#annotate("text",x = -1, y =0.5, label=paste(top_al1))+
guides(color = FALSE) +
ylim(0.0,1)
alf2s<-alFreq_sel
alf2s$Env2 <- envPop2$envPop2
alf2sb <- melt(alf2s, id = "Env2", variable.name = "Allele")
alf2sc <- alf2sb %>%
group_by(Env2,Allele) %>%
summarise(average = mean(value))
B <- ggplot() +
geom_line(data=alf2sc, aes(x=Env2, y=average, color=Allele),lwd=1) +
ylab("")+
xlab("Environment 2") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16))+
guides(color = FALSE) +
ylim(0.0,1)
title <- ggdraw() + draw_label(plotTitle, fontface='bold')
plot_grid(title,NULL,A,B,nrow=2,ncol=2,rel_heights = c(1,3), rel_widths = c(1,1.5))
alf2sc
alf1sc[is.na(alf1sc$average)]
alf1sc[is.na(alf1sc$average),]
View(N)
View(Pop_afreq1)
Pop_afreq1$M129053
length(Pop_afreq1$M129053)
length(is.na(Pop_afreq1$M129053))
length(Pop_afreq1$M129053)
geno1_filt
B <- ggplot() +
geom_line(data=alf2sc, aes(x=Env2, y=average, color=Allele),lwd=1) +
ylab("")+
xlab("Environment 2") +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16))+
guides(color = FALSE) +
ylim(0.0,1)+
theme(plot.title = element_text(size=14, face="bold.italic"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
title <- ggdraw() + draw_label(plotTitle, fontface='bold')
plot_grid(title,NULL,A,B,nrow=2,ncol=2,rel_heights = c(1,3), rel_widths = c(1.1,1))
=======
specs[,9:18]
specs[,9:18]/10
as.numeric(unname(specs[,9:18]/10))
c(St,St[i]+demes[i])
#No subsample (neutral / size variation)
St=1
demes=as.numeric(unname(specs[,9:18]/10))
for(i in 1:9){
St=c(St,St[i]+demes[i])
}
St
Start<-NULL
for(i in seq(0,900,100)){
Start<-c(Start,St+i)
}
Start
specs[,9:18]
St
specs[,9:18]
unname(specs[,9:18])
unname(specs[,9:18])
as.numeric(unname(specs[,9:18]))
demes=as.numeric(unname(specs[,9:18]))
seq(0,900,100)
St=1
demes=as.numeric(unname(specs[,9:18]))
for(i in 1:9){
St=c(St,St[i]+demes[i])
}
St
Start<-NULL
for(i in seq(0,900,100)){
Start<-c(Start,St+i)
}
Start
dim(G1f)
Sp=demes[1]
for(i in 1:9){
Sp=c(Sp,Sp[i]+demes[i+1])
}
Stop<-NULL
for(i in seq(0,900,100)){
Stop<-c(Stop,Sp+i)
}
Start
Stop
cbind(Start,Stop)
diff(Start)
Start
seq(0,900,100)
seq(0,90,10)
St=10
demes=as.numeric(unname(specs[,9:18]))
for(i in 1:9){
St=c(St,St[i]+demes[i])
}
Start<-NULL
for(i in seq(0,90,10)){
Start<-c(Start,St+i)
}
Start
diff(start())
diff(Start
)
St
Start<-NULL
seq(0,90,10)
seq(0,90,10)
#No subsample (neutral / size variation)
St=1
demes=as.numeric(unname(specs[,9:18]/10))
for(i in 1:9){
St=c(St,St[i]+demes[i])
}
St=10
#No subsample (neutral / size variation)
St=1
demes=as.numeric(unname(specs[,9:18]/10))
for(i in 1:9){
St=c(St,St[i]+demes[i])
}
Start<-NULL
for(i in seq(0,900,100)){
Start<-c(Start,St+i)
}
Start
demes
demes=rep(as.numeric(unname(specs[,9:18])),100)
demes
Start<-NULL
for(i in seq(0,900,100)){
Start<-c(Start,St+i)
}
Start
demes
St
Start<-NULL
for(i in seq(0,900,100)){
Start<-c(Start,demes+i)
}
Start
i
demes+i
seq(0,900,100)
seq(0,9000,1000)
St
St=1
St
St=1
demes=rep(as.numeric(unname(specs[,9:18])),100)
for(i in demes){
St=c(St,St+demes[i])
}
rm(St)
for(i in demes){
print(demes)
#St=c(St,St+demes[i])
}
print(demes)[1]
demes
length(demes)
rep(as.numeric(unname(specs[,9:18])),100)
St=1
demes=rep(as.numeric(unname(specs[,9:18])),100)
for(i in 1:length(demes)){
St=c(St,St+demes[i])
}
rm(St)
>>>>>>> 6991ad7f98b40309cd23ff79c9cec9983a9b7e5d
