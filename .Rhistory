# G1[geno1 %in% c("0/0", "0|0")] <- 0
# G1[geno1  %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
# G1[geno1 %in% c("1/1", "1|1")] <- 2
#
#
# G2 <- matrix(NA, nrow = nrow(geno2), ncol = ncol(geno2))
# G2[geno2 %in% c("0/0", "0|0")] <- 0
# G2[geno2  %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
# G2[geno2 %in% c("1/1", "1|1")] <- 2
#
# #Calculate allele frequencies across the whole meta population
# a_freq1 <- rowSums(G1)/(2*ncol(G1))
# a_freq2 <- rowSums(G2)/(2*ncol(G2))
#
# #Prepare the Pre (G1) and Post (G2) G matrices for FST calculation
# Gt1<-t(G1)
# rownames(Gt1)<-PopsALL
# #colnames(Gt1)<-MID_pre
# colnames(Gt1)<-paste("M",position1,sep="")
#
# Gt2<-t(G2)
# rownames(Gt2)<-PopsALL
# #colnames(Gt2)<-MID_post
# colnames(Gt2)<-paste("M",position2,sep="")
#
# #Add loop to iterate across each TRUE population, not just x-location
# #Filter by population (same pop. before and after env. shift)
# listGt<-list()
# for(i in 1:100){
#   Gt1_i<-data.frame(Gt1[rownames(Gt1)==i,])
#   Gt2_i<-data.frame(Gt2[rownames(Gt2)==i,])
#   Gt1_i[setdiff(names(Gt2_i), names(Gt1_i))] <- 0
#   Gt2_i[setdiff(names(Gt1_i), names(Gt2_i))] <- 0
#   listGt[[i]]<-rbind(Gt1_i,Gt2_i)
# }
#
# #Filter the files based on Major and Minor AF filtration, then seed the files so that all variants are present at both time points to be compared
# a_freq<-list()
# a_freq_filt<-list()
# listGt_filt<-list()
# for(i in 1:100){
#   a_freq[[i]] <- colSums(listGt[[i]])/(2*nrow(listGt[[i]]))
#   a_freq_filt[[i]] <- a_freq[[i]][a_freq[[i]]>0.05 & a_freq[[i]]<0.95]
#   listGt_filt[[i]]<-listGt[[i]][colnames(listGt[[i]])%in%names(a_freq_filt[[i]])]
# }
#
# #Calculate per locus FST values
# listPfst<-list()
# for(i in 1:100){
#   listPfst[[i]]<-MakeDiploidFSTMat(SNPmat = listGt_filt[[i]], locusNames = colnames(listGt_filt[[i]]), popNames = PopsP)
# }
#
# #Filter out NA values
# listPfst_noNa<-list()
# for(i in 1:100){
#   listPfst_noNa<-lapply(listPfst,function(x) x[!is.na(x$FST),])
# }
#
# #Calculate FST values for each populations
# FST_genome_pop<-NULL
# for(i in 1:100){
#   FST_genome_pop<-c(FST_genome_pop,mean(listPfst_noNa[[i]]$T1)/mean(listPfst_noNa[[i]]$T2))
# }
#
getFSTs_diploids = function(popNameList, SNPDataColumn){
#eliminating the missing data for this locus
popnames=unlist(as.character(popNameList))
popNameTemp=popnames[which(SNPDataColumn!=9)]
snpDataTemp=SNPDataColumn[SNPDataColumn!=9]
HetCounts <- tapply(snpDataTemp, list(popNameTemp,snpDataTemp), length)
HetCounts[is.na(HetCounts)] = 0
#Case: all individuals are genetically identical at this locus
if(dim(HetCounts)[2]==1){
return (list(He=NA,FST=NA, T1=NA, T2=NA,FSTNoCorr=NA, T1NoCorr=NA, T2NoCorr=NA,meanAlleleFreq = NA))
}
if(dim(HetCounts)[2]==2){
if(paste(colnames(HetCounts),collapse="")=="01"){HetCounts=cbind(HetCounts,"2"=0)}
if(paste(colnames(HetCounts),collapse="")=="12"){HetCounts=cbind("0"=0,HetCounts)}
if(paste(colnames(HetCounts),collapse="")=="02"){HetCounts=cbind(HetCounts[,1],"1"=0, HetCounts[,2])}
}
out = WC_FST_Diploids_2Alleles(HetCounts)
return(out)
}
MakeDiploidFSTMat_2<-function(SNPmat,locusNames,popNames){
locusname <- unlist(locusNames)
popname <- unlist(popNames)
snplevs <- levels(as.factor(unlist(SNPmat)))
if(any(!(snplevs%in%c(0,1,2,9)))==TRUE) {
print("Error: Your snp matrix has a character other than 0,1,2 or 9")
break
}
if (dim(SNPmat)[1] != length(popname)) {
print("Error: your population names do not match your SNP matrix")
break
}
if (dim(SNPmat)[2] != length(locusname)) {
print("Error:  your locus names do not match your SNP matrix")
break
}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat <- matrix(NA, nrow = nloci, ncol = 8)
for (i in 1:nloci) {
FSTmat[i, ] = unlist(getFSTs_diploids(popname, SNPmat[,i]))
if (i%%10000 == 0) {
print(paste(i, "done of", nloci))
}
}
outTemp = as.data.frame(FSTmat)
outTemp = cbind(locusname, outTemp)
colnames(outTemp) = c("LocusName", "He", "FST", "T1", "T2",
"FSTNoCorr", "T1NoCorr", "T2NoCorr", "meanAlleleFreq")
return(outTemp)
}
########################################################
#Calculate per locus FST values pre environmental shift for Edge and cCore populations
#Whole genome
Gt1f<-t(G1f)
colnames(Gt1f)<-paste("M",position1_filt,sep="")
Pre_geno <- data.frame(PopsALL,Gt1f)
colnames(Pre_geno)[1]<-"Locality"
Edges <- c(1,5,6,10,12,19,41,50,51,60,82,89,91,95,96,100)
Pre_geno_Edge <- Pre_geno[Pre_geno$Locality%in%Edges,]
start_time <- Sys.time()
Pre_FST_Edge<-pairwise.WCfst(Pre_geno_Edge,diploid = T)
end_time <- Sys.time()
print(end_time - start_time)
mean(Pre_FST_Edge, na.rm=T)
Cores <- c(34, 35, 36, 37, 44, 45, 46, 47, 54, 55, 56, 57, 64, 65, 66, 67)
Pre_geno_Cores <- Pre_geno[Pre_geno$Locality%in%Cores,]
start_time <- Sys.time()
Pre_FST_Cores<-pairwise.WCfst(Pre_geno_Cores,diploid = T)
end_time <- Sys.time()
print(end_time - start_time)
mean(Pre_FST_Cores, na.rm=T)
#Genome under selection
Gt1f_sel<-Gt1f[,colnames(Gt1f)%in%select_pos]
Pre_geno_sel<-data.frame(PopsALL,Gt1f_sel)
colnames(Pre_geno_sel)[1]<-"Locality"
Pre_geno_sel_Edge <- Pre_geno_sel[Pre_geno_sel$Locality%in%Edges,]
start_time <- Sys.time()
Pre_FST_sel_Edge<-pairwise.WCfst(Pre_geno_sel_Edge,diploid = T)
end_time <- Sys.time()
print(end_time - start_time)
mean(Pre_FST_sel_Edge, na.rm=T)
Cores <- c(34, 35, 36, 37, 44, 45, 46, 47, 54, 55, 56, 57, 64, 65, 66, 67)
Pre_geno_sel_Cores <- Pre_geno_sel[Pre_geno_sel$Locality%in%Cores,]
start_time <- Sys.time()
Pre_FST_sel_Cores<-pairwise.WCfst(Pre_geno_sel_Cores,diploid = T)
end_time <- Sys.time()
print(end_time - start_time)
mean(Pre_FST_sel_Cores, na.rm=T)
# # Post_geno<-data.frame(PopsALL,Gt2f)
# # colnames(Post_geno)[1]<-"Locality"
#
#
# start_time <- Sys.time()
# Pre_FST<-pairwise.WCfst(Pre_geno,diploid = T)
# end_time <- Sys.time()
# print(end_time - start_time)
#
# # start_time <- Sys.time()
# # Post_FST<-pairwise.WCfst(Post_geno,diploid = T)
# # end_time <- Sys.time()
# # print(end_time - start_time)
# #
#write.table(Pre_FST,file=paste("results/R_results/",seed,"_FST.csv",sep=""),sep=",",col.names = F,row.names = F,quote = F)
# # write.table(Post_FST,file="~/Desktop/Post_FST_2.txt",sep=",",col.names = F,row.names = F,quote = F)
#
Gt1f_sel<-Gt1f[,colnames(Gt1f)%in%select_pos]
Pre_geno_sel<-data.frame(PopsALL,Gt1f_sel)
colnames(Pre_geno_sel)[1]<-"Locality"
#
# start_time <- Sys.time()
# Pre_FST_sel<-pairwise.WCfst(Pre_geno_sel,diploid = T)
# end_time <- Sys.time()
# print(end_time - start_time)
#write.table(Pre_FST,file=paste("results/R_results/",seed,"_FST_sel.csv",sep=""),sep=",",col.names = F,row.names = F,quote = F)
# ########################################################
#Get per population FST pre and post environmental shift
Gt1fd <- data.frame(Gt1f)
Pfst_pre_filt<-MakeDiploidFSTMat_2(SNPmat = Gt1fd, locusNames = colnames(Gt1fd), popNames = PopsALL)
#Filter out NA values
Pfst_pre_noNa<-Pfst_pre_filt[!is.na(Pfst_pre_filt$FST),]
#ink_bef<-data.frame(cor(Gt1_m2,Gt1f[,colnames(Gt1f)!=M2_MID],method="pearson"))
#Heterozgosity per allele before env. shift
Het_bef<-Pfst_pre_filt$He
#Calculate FST value for each allele pre environmental shift
F_ST_ll1<-Pfst_pre_noNa$T1/Pfst_pre_noNa$T2
#Calculate FST values averaged across each allele pre environmental shift
F_ST_l1<-mean(Pfst_pre_noNa$T1)/mean(Pfst_pre_noNa$T2)
# Gt2f<-t(G2f)
# rownames(Gt2f)<-PopsALL
# #colnames(Gt2f)<-MID_post_filt
# colnames(Gt2f)<-paste("M",position2_filt,sep="")
# #Calculate per locus FST values post environmental shift
# Pfst_post<-MakeDiploidFSTMat(SNPmat = Gt2f, locusNames = colnames(Gt2f), popNames = PopsALL)
#
# #Filter out NA values
# Pfst_post_noNa<-Pfst_post[!is.na(Pfst_post$FST),]
#
# #Heterozgosity per allele after env. shift
# Het_aft<-Pfst_post_noNa$He
#
# #Calculate FST value for each allele pre environmental shift
# F_ST_ll2<-Pfst_post_noNa$T1/Pfst_post_noNa$T2
#
# #Calculate FST values for each  allele pre environmental shift
# F_ST_l2<-mean(Pfst_post_noNa$T1)/mean(Pfst_post_noNa$T2)
#
# #Pop_afreq2 is not filtered for MAF in order to properly compare all AF shifts from Pop_afreq1
# Pop_afreq2<-NULL
# for(i in 1:100){
#   Pop_afreq2<-rbind(Pop_afreq2,rowSums(G2[,Start[i]:Stop[i]])/(2*ncol(G2[,Start[i]:Stop[i]])))
# }
#
# Pop_afreq2<-data.frame(Pop_afreq2)
# colnames(Pop_afreq2)<-paste("M",position2,sep="")
#stopCluster(cl)
##################################
#Population specific summary stats
##################################
#Location values
Loc <- NULL
for(j in 1:10){
for(i in 1:10){
Loc <- c(Loc,paste("A",i,sep=""))
}
}
Loc<-factor(Loc,levels=Loc[1:10])
#Population values
Pop <- NULL
for(i in 1:100){
Pop <- c(Pop,paste("P",i,sep=""))
}
X <- NULL
for(j in 1:10){
for(i in 1:10){
X <- c(X,i)
}
}
Y <- NULL
for(j in 1:10){
Y<-c(Y,rep(j,10))
}
Env1<-envPop1$envPop1
Env2<-envPop2$envPop2
#Env_after<-envPop.shift$envSelect
#Diff_env<-Env_after-Env_before
#Env_range<- envPop$envSelect%in%round(envPop.shift$envSelect,1)&round(envPop.shift$envSelect,1)%in%envPop$envSelect
# M2_AF_before<-data.frame(Pop_afreq1[,c(which(colnames(Pop_afreq1)==positionM2))])
# colnames(M2_AF_before)<-"M2_AF_before"
#
# M2_AF_after<-data.frame(Pop_afreq2[,c(which(colnames(Pop_afreq2)==positionM2))])
# colnames(M2_AF_after)<-"M2_AF_after"
#
# M2_AF_diff<-M2_AF_after-M2_AF_before
# colnames(M2_AF_diff)<-"M2_AF_diff"
# M1_AF_before_all<-Pop_afreq1[,-which(colnames(Pop_afreq1)==positionM2)]
# M1_AF_after_all<-Pop_afreq2[,-which(colnames(Pop_afreq2)==positionM2)]
#
# M1_AF_before_shared<-M1_AF_before_all[colnames(M1_AF_before_all)%in%colnames(M1_AF_after_all)]
# M1_AF_after_shared<-M1_AF_after_all[colnames(M1_AF_after_all)%in%colnames(M1_AF_before_all)]
AF_all<-data.frame(rowMeans(Pop_afreq1))
# colnames(M1_AF_before)<-"M1_AF_before"
#
# M1_AF_after<-data.frame(rowMeans(M1_AF_after_shared))
# colnames(M1_AF_after)<-"M1_AF_after"
#
# M1_AF_diff<-M1_AF_after-M1_AF_before
# colnames(M1_AF_diff)<-"M1_AF_diff"
# F_ST_genome_bef.aft.<-data.frame(FST_genome_pop)
# colnames(F_ST_genome_bef.aft.)<-"F_ST_genome_bef.aft."
# F_ST_M2_bef.aft.<-data.frame(FST_M2_pop)
# colnames(F_ST_M2_bef.aft.)<-"F_ST_M2_bef.aft."
Rel_Fit <- data.frame(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)-30]])
colnames(Rel_Fit)<-"Rel_Fit"
# Rel_Fit_after <- data.frame(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)]])
# colnames(Rel_Fit_after)<-"Rel_Fit_after"
#
# Rel_Fit_diff<-Rel_Fit_after-Rel_Fit_before
# colnames(Rel_Fit_diff)<-"Rel_Fit_diff"
Pop_size<-rep(specs$n,100)
# Summary_Pop<-cbind(Pop,X,Y,Env_before,Env_after,Diff_env,Env_range,gfTrans1,gfTrans2,offset,gfM2Trans1,gfM2Trans2,M2offset,M2_AF_before,M2_AF_after,M2_AF_diff,M1_AF_before,M1_AF_after,M1_AF_diff,F_ST_genome_bef.aft.,F_ST_M2_bef.aft.,Rel_Fit_before,Rel_Fit_after,Rel_Fit_diff)
#If neutral:
# Pop_size<-unlist(rep(unname(specs[9:18]),10))
# Summary_Pop<-cbind(Pop,X,Y,Pop_size,Env_before,Env_after,Diff_env,Env_range,gfTrans1,gfTrans2,offset,gfM2Trans1=0,gfM2Trans2=0,M2offset=0,M2_AF_before=0,M2_AF_after=0,M2_AF_diff=0,M1_AF_before,M1_AF_after,M1_AF_diff,F_ST_genome_bef.aft.,F_ST_M2_bef.aft.=0,Rel_Fit_before,Rel_Fit_after,Rel_Fit_diff)
Summary_Pop<-cbind(Pop,X,Y,Env1,Env2,gfTrans1e1,gfTrans1e2, AF_all,Rel_Fit)
write.csv(Summary_Pop,file=paste("results/R_results/",seed,"_summary_Pop.csv",sep=""),row.names=F)
#Summary_Pop<-read.csv("Summary_Pop_1576675870126.csv")
##################################
# Allele specific summary stats
##################################
R2_genome<-data.frame(gfMod$result) #Those allelese which had an R2 value > 0
colnames(R2_genome)<-"R2"
#R2_e2_genome<-data.frame(gfMod2$result) #Those allelese which had an R2 value > 0
#colnames(R2_e2_genome)<-"R2_e2_genome"
R2_sel<-data.frame(gfMod_sel$result) #Those allelese which had an R2 value > 0
colnames(R2_sel)<-"R2_adapt"
# R2_e2_sel<-data.frame(gfMod_sel2$result) #Those allelese which had an R2 value > 0
# colnames(R2_e2_sel)<-"R2_e2_genome"
R0<-colnames(alFreq[,!colnames(alFreq)%in%names(gfMod$result)]) #Get all alleles, regardless of R2 value
R0<-data.frame(rep(0,length(R0)),row.names = colnames(alFreq[,!colnames(alFreq)%in%names(gfMod$result)])) #Filter out those who we already have saved in R2
colnames(R0)<-"R2"
R2_all<-rbind(R2_genome,R0) #merge them so we have all alleles with accompanying R2 values
R2_all$Pos <- substring(row.names(R2_all),2)
Rho_Env1<-cor(as.matrix(alFreq),envPop1,method = "pearson")
Rho_Env2<-cor(as.matrix(alFreq),envPop2,method = "pearson")
temp<-merge(Rho_Env1, Rho_Env2, by=0)
colnames(temp)<-c("Locus","Rho_Env1","Rho_Env2")
row.names(temp)<-temp$Locus
temp<-merge(temp, R2_all, by=0)
temp <- temp[,-1]
colnames(temp)<-c("Locus","Rho_Env1","Rho_Env2","R2","Position")
Linkage<-NULL
position1_filt_scaled<-NULL
for(i in 1:length(position1_filt)){
if(position1_filt[i]>0 & position1_filt[i]<50001){
Linkage<-c(Linkage,1)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i])
}
if(position1_filt[i]>50000 & position1_filt[i]<100001){
Linkage<-c(Linkage,2)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-50000)
}
if(position1_filt[i]>100000 & position1_filt[i]<150001){
Linkage<-c(Linkage,3)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-100000)
}
if(position1_filt[i]>150000 & position1_filt[i]<200001){
Linkage<-c(Linkage,4)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-150000)
}
if(position1_filt[i]>200000 & position1_filt[i]<250001){
Linkage<-c(Linkage,5)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-200000)
}
if(position1_filt[i]>250000 & position1_filt[i]<300001){
Linkage<-c(Linkage,6)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-250000)
}
if(position1_filt[i]>300000 & position1_filt[i]<350001){
Linkage<-c(Linkage,7)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-300000)
}
if(position1_filt[i]>350000 & position1_filt[i]<400001){
Linkage<-c(Linkage,8)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-350000)
}
if(position1_filt[i]>400000 & position1_filt[i]<450001){
Linkage<-c(Linkage,9)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-400000)
}
if(position1_filt[i]>450000 & position1_filt[i]<500001){
Linkage<-c(Linkage,10)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-450000)
}
}
#PreN$LG<-Linkage
#PreN[rownames(PreN)!=Pfst_pre_filt$LocusName,]
#PreN$FST<-Pfst_pre_filt$FST
#PreN$DistM2<-abs(PreN$PP-PreN$PP[PreN$LT=="M2"])
#temp$Position[300]=113353.51
Summary_Locus<-cbind(temp[order(as.numeric(temp$Position)),],Linkage)
write.csv(Summary_Locus,file=paste("results/R_results/",seed,"_summary_Loc.csv",sep=""),row.names=F)
##################################
# Simulation specific summary stats
##################################
#No_A<-unname(dim(vcf1_filt)[1])
PR2<-gfMod$species.pos.rsq/No_A
#PR2_UL
F_ST_l1
#F_ST_l2
Rel.Fit_l1<-mean(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)-30]])
#Rel.Fit_l2<-mean(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)]])
Rho_Env1R2<-cor(temp$Rho_Env1,temp$R2,method = "pearson")
Rho_Env2R2<-cor(temp$Rho_Env2,temp$R2,method = "pearson")
Summary_Sim<-cbind(seed,No_A,PR2,F_ST_l1,Rel.Fit_l1,Rho_Env1R2,Rho_Env2R2)
write.csv(Summary_Sim,file=paste("results/R_results/",seed,"_summary_Sim.csv",sep=""),row.names=F)
###############################################
#Visualize R^2>0 compared to Spearman correltation of alFreq to each env.
###############################################
#EnvCor<-cor(as.matrix(R2),envPop,method = "spearman")
#EnvCor<-data.frame(rownames(EnvCor),EnvCor)
#colnames(EnvCor)<-c("MID","rho")
#R2MID<-unique(data.frame(impDat$allele,impDat$r2))
#colnames(R2MID)<-c("MID","R2")
#Comp<-merge(EnvCor,R2MID, by="MID")
#Link<-NULL
#for(i in 1:length(Comp$MID)){
#  if(Comp$MID[i]%in%linked_MID){
#    Link<-c(Link,"Linked")
#    }
#  else{
#    Link<-c(Link,"Unlinked")
#  }
#}
#Comp$Link<-Link
#r2<-data.frame(gfMod$result)
#colnames(r2)<-"r2"
cg<-read.table(paste("results/SLiM_output/CG_files/",seed,"_fitnessmat_pop.txt",sep=""),header=F)
colnames(cg)<-rep(paste("H",seq(1:100),sep=""))
cg$Transplant<-paste("T",seq(1:100),sep="")
cg_df <- melt(cg,  id.vars ="Transplant",  variable.name = "Home",
value.name = "Fitness")
cg_df$Transplant<-factor(cg_df$Transplant,levels=unique(cg_df$Transplant))
CI_bf1 <- gfTrans1e1$C.Imp_genome_before
CI_bf2 <- gfTrans1e2$C.Imp_genome_before
GF_dist_bef<-data.frame(cbind(gfTrans1e1,gfTrans1e2))
colnames(GF_dist_bef)<-c("CI_env1", "CI_env2")
ggplot() +
geom_line(aes(x=1:100, y=GF_dist_bef$CI_env1) ,col="orange", lty=2,size=1.5)+
geom_line(aes(x=1:100, y=GF_dist_bef$CI_env2) ,col="cyan", lty=2,size=1.5)+
xlab("Location")+
ylab("Cumulative Importance")
CI<-NULL
for(i in 1:nrow(GF_dist_bef)){
for(j in 1:nrow(GF_dist_bef)){
CI<-c(CI,dist(rbind(GF_dist_bef[i,],GF_dist_bef[j,])))
#CI<-c(CI,CI_bf[j]-CI_bf[i])
}
}
cg_df$D_CI<-CI
GFsel_dist_bef<-data.frame(cbind(gfTrans1_sel1,gfTrans1_sel2))
colnames(GFsel_dist_bef)<-c("CI_env1", "CI_env2")
CI_sel<-NULL
for(i in 1:nrow(GFsel_dist_bef)){
for(j in 1:nrow(GFsel_dist_bef)){
CI_sel<-c(CI_sel,dist(rbind(GFsel_dist_bef[i,],GFsel_dist_bef[j,])))
#CI<-c(CI,CI_bf[j]-CI_bf[i])
}
}
cg_df$D_CI_sel<-CI_sel
Env_sel1<-rep(envPop1$envPop1, each=100)
Env_sel2<-rep(envPop2$envPop2, each=100)
cg_df$Env_sel1 <- Env_sel1
cg_df$Env_sel2 <- Env_sel2
options(scipen = 0)
cholMaha <- function(X) {
dec <- chol( cov(X) )
tmp <- forwardsolve(t(dec), t(X) )
dist(t(tmp))
}
dM<-(cholMaha(cbind(envPop1$envPop1,envPop2$envPop2)))
dM<-as.matrix(dM)
cg_df$dM <- as.vector(dM)
dat_sum<-cor.test(x=cg_df$D_CI, y=cg_df$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
dat_sum<-cor.test(x=cg_df$D_CI_sel, y=cg_df$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
dat_sum<-cor.test(x=cg_df$dM, y=cg_df$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Pre_FST_Cores[is.na(Pre_FST_Cores)]<-0
Pre_FST_Edge[is.na(Pre_FST_Edge)]<-0
Pre_FST_sel_Cores[is.na(Pre_FST_sel_Cores)]<-0
Pre_FST_sel_Edge[is.na(Pre_FST_sel_Edge)]<-0
cg_df_Edges <- cg_df[as.numeric(substr(as.character(cg_df$Home),2,nchar(as.character(cg_df$Home))))%in%Edges,]
cg_df_Edges <- cg_df_Edges[as.numeric(substr(as.character(cg_df_Edges$Transplant),2,nchar(as.character(cg_df_Edges$Transplant))))%in%Edges,]
cg_df_Edges$Pre_FST <- as.vector(Pre_FST_Edge)
cg_df_Edges$Pre_FSt_sel <- as.vector(Pre_FST_sel_Edge)
cg_df_Cores <- cg_df[as.numeric(substr(as.character(cg_df$Home),2,nchar(as.character(cg_df$Home))))%in%Cores,]
cg_df_Cores <- cg_df_Cores[as.numeric(substr(as.character(cg_df_Cores$Transplant),2,nchar(as.character(cg_df_Cores$Transplant))))%in%Cores,]
cg_df_Cores$Pre_FST <- as.vector(Pre_FST_Cores)
cg_df_Cores$Pre_FSt_sel <- as.vector(Pre_FST_sel_Cores)
dat_sum<-cor.test(x=cg_df_Edges$D_CI, y=cg_df_Edges$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
GF_off_genome_env_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$D_CI_sel, y=cg_df_Edges$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
GF_off_causal_env_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$dM, y=cg_df_Edges$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_MD_env_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$Pre_FST, y=cg_df_Edges$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
FST_genome_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Edges$Pre_FSt_sel, y=cg_df_Edges$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
FST_causal_Edges <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$D_CI, y=cg_df_Cores$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
GF_off_genome_env_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$D_CI_sel, y=cg_df_Cores$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
GF_off_causal_env_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$dM, y=cg_df_Cores$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
Env_MD_env_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$Pre_FST, y=cg_df_Cores$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
FST_genome_Cores <- round(dat_sum$estimate[[1]],3)
dat_sum<-cor.test(x=cg_df_Cores$Pre_FSt_sel, y=cg_df_Cores$Fitness, method = "pearson")
paste("r = ",round(dat_sum$estimate[[1]],3),"\np-value = ", signif(dat_sum$p.value,3),sep="")
FST_causal_Cores <- round(dat_sum$estimate[[1]],3)
case <- data.frame(GF_off_genome_env_Edges,
GF_off_causal_env_Edges,
Env_MD_env_Edges,
FST_genome_Edges,
FST_causal_Edges,
GF_off_genome_env_Cores,
GF_off_causal_env_Cores,
Env_MD_env_Cores,
FST_genome_Cores,
FST_causal_Cores)
write.csv(case, paste("results/R_results/",seed,"_corr.csv",sep=""), row.names = F)
#save.image("~/Desktop/PostDoc/SLiMstuff/SLiM_output/250K/VCF_output/300K/1727520158823.RData")
save.image(paste("results/R_results/",seed,".RData",sep=""))
rm(list=ls())
gc()
#}
#stopCluster(cl)
#rm(list=ls())
