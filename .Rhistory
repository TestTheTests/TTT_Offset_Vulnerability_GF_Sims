#stopCluster(cl)
# Calculate genomic offset
# note that I am doing this for the avearge across all alleles since
# GF was fit to all alleles simultaneously
# The more correct way is to calculate offset for adaptive alleles only,
# either individually or for a model fit to just those alleles.
gfTrans1 <- predict(gfMod, envPop)
colnames(gfTrans1)<-"C.Imp_genome_before"
#gfTrans2 <- predict(gfMod, envPop.shift)
#colnames(gfTrans2)<-"C.Imp_genome_after"
# offset needs to be considered using absolute values ()
#offset <- gfTrans2-gfTrans1
#colnames(offset)<-"D_C.Imp_genome"
##############################################################################
#Get  Weir & Cockerham F_ST values from the VCF files and use population data
#Create an object listing every population in the whole dataset
# PopsALL <- NULL
# for(j in rep(1:100)){
#   for(i in rep(j,100)){
#     PopsALL <- c(PopsALL,i)
#   }
# }
PopsALL <- NULL
for(j in rep(1:100)){
for(i in rep(j,10)){
PopsALL <- c(PopsALL,i)
}
}
#Create an object splitting a single population into a Pre ("T1") and Post ("T2") "population"
# PopsP <- c(rep("T1",100),rep("T2",100))
PopsP <- c(rep("T1",10),rep("T2",10))
# cores<-3
# cl <- makeCluster(cores)
# registerDoParallel(cl)
# G2 <- matrix(NA, nrow = nrow(geno2), ncol = ncol(geno2))
# G2[geno2 %in% c("0/0", "0|0")] <- 0
# G2[geno2  %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
# G2[geno2 %in% c("1/1", "1|1")] <- 2
#
# #Calculate allele frequencies across the whole meta population
# a_freq1 <- rowSums(G1)/(2*ncol(G1))
# a_freq2 <- rowSums(G2)/(2*ncol(G2))
#Prepare the Pre (G1) and Post (G2) G matrices for FST calculation
# Gt1<-t(G1)
# rownames(Gt1)<-PopsALL
# #colnames(Gt1)<-MID_pre
# colnames(Gt1)<-paste("M",position1,sep="")
#
# Gt2<-t(G2)
# rownames(Gt2)<-PopsALL
# #colnames(Gt2)<-MID_post
# colnames(Gt2)<-paste("M",position2,sep="")
#
# #Add loop to iterate across each TRUE population, not just x-location
# #Filter by population (same pop. before and after env. shift)
# listGt<-list()
# for(i in 1:100){
#   Gt1_i<-data.frame(Gt1[rownames(Gt1)==i,])
#   Gt2_i<-data.frame(Gt2[rownames(Gt2)==i,])
#   Gt1_i[setdiff(names(Gt2_i), names(Gt1_i))] <- 0
#   Gt2_i[setdiff(names(Gt1_i), names(Gt2_i))] <- 0
#   listGt[[i]]<-rbind(Gt1_i,Gt2_i)
# }
#
# #Filter the files based on Major and Minor AF filtration, then seed the files so that all variants are present at both time points to be compared
# a_freq<-list()
# a_freq_filt<-list()
# listGt_filt<-list()
# for(i in 1:100){
#   a_freq[[i]] <- colSums(listGt[[i]])/(2*nrow(listGt[[i]]))
#   a_freq_filt[[i]] <- a_freq[[i]][a_freq[[i]]>0.05 & a_freq[[i]]<0.95]
#   listGt_filt[[i]]<-listGt[[i]][colnames(listGt[[i]])%in%names(a_freq_filt[[i]])]
# }
#
# #Calculate per locus FST values
# listPfst<-list()
# for(i in 1:100){
#   listPfst[[i]]<-MakeDiploidFSTMat(SNPmat = listGt_filt[[i]], locusNames = colnames(listGt_filt[[i]]), popNames = PopsP)
# }
#
# #Filter out NA values
# listPfst_noNa<-list()
# for(i in 1:100){
#   listPfst_noNa<-lapply(listPfst,function(x) x[!is.na(x$FST),])
# }
#
# #Calculate FST values for each populations
# FST_genome_pop<-NULL
# for(i in 1:100){
#   FST_genome_pop<-c(FST_genome_pop,mean(listPfst_noNa[[i]]$T1)/mean(listPfst_noNa[[i]]$T2))
# }
getFSTs_diploids = function(popNameList, SNPDataColumn){
#eliminating the missing data for this locus
popnames=unlist(as.character(popNameList))
popNameTemp=popnames[which(SNPDataColumn!=9)]
snpDataTemp=SNPDataColumn[SNPDataColumn!=9]
HetCounts <- tapply(snpDataTemp, list(popNameTemp,snpDataTemp), length)
HetCounts[is.na(HetCounts)] = 0
#Case: all individuals are genetically identical at this locus
if(dim(HetCounts)[2]==1){
return (list(He=NA,FST=NA, T1=NA, T2=NA,FSTNoCorr=NA, T1NoCorr=NA, T2NoCorr=NA,meanAlleleFreq = NA))
}
if(dim(HetCounts)[2]==2){
if(paste(colnames(HetCounts),collapse="")=="01"){HetCounts=cbind(HetCounts,"2"=0)}
if(paste(colnames(HetCounts),collapse="")=="12"){HetCounts=cbind("0"=0,HetCounts)}
if(paste(colnames(HetCounts),collapse="")=="02"){HetCounts=cbind(HetCounts[,1],"1"=0, HetCounts[,2])}
}
out = WC_FST_Diploids_2Alleles(HetCounts)
return(out)
}
MakeDiploidFSTMat_2<-function(SNPmat,locusNames,popNames){
locusname <- unlist(locusNames)
popname <- unlist(popNames)
snplevs <- levels(as.factor(unlist(SNPmat)))
if(any(!(snplevs%in%c(0,1,2,9)))==TRUE) {
print("Error: Your snp matrix has a character other than 0,1,2 or 9")
break
}
if (dim(SNPmat)[1] != length(popname)) {
print("Error: your population names do not match your SNP matrix")
break
}
if (dim(SNPmat)[2] != length(locusname)) {
print("Error:  your locus names do not match your SNP matrix")
break
}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat <- matrix(NA, nrow = nloci, ncol = 8)
for (i in 1:nloci) {
FSTmat[i, ] = unlist(getFSTs_diploids(popname, SNPmat[,i]))
if (i%%10000 == 0) {
print(paste(i, "done of", nloci))
}
}
outTemp = as.data.frame(FSTmat)
outTemp = cbind(locusname, outTemp)
colnames(outTemp) = c("LocusName", "He", "FST", "T1", "T2",
"FSTNoCorr", "T1NoCorr", "T2NoCorr", "meanAlleleFreq")
return(outTemp)
}
########################################################
#Calculate per locus FST values pre environmental shift
Gt1f<-t(G1f)
colnames(Gt1f)<-paste("M",position1_filt,sep="")
# Gt2f<-t(G2f)
# colnames(Gt2f)<-paste("M",position2_filt,sep="")
Pre_geno<-data.frame(PopsALL,Gt1f)
colnames(Pre_geno)[1]<-"Locality"
# Post_geno<-data.frame(PopsALL,Gt2f)
# colnames(Post_geno)[1]<-"Locality"
# cores <- 7
# cl <- makeCluster(cores)
# registerDoParallel(cl)
#
# start_time <- Sys.time()
# Pre_FST<-pairwise.WCfst(Pre_geno,diploid = T)
# end_time <- Sys.time()
# print(paste("Run time:",end_time - start_time))
# stopCluster(cl)
#
# start_time <- Sys.time()
# Post_FST<-pairwise.WCfst(Post_geno,diploid = T)
# end_time <- Sys.time()
# print(paste("Run time:",end_time - start_time))
#
# write.table(Pre_FST,file="~/Desktop/Pre_FST_2.txt",sep=",",col.names = F,row.names = F,quote = F)
# write.table(Post_FST,file="~/Desktop/Post_FST_2.txt",sep=",",col.names = F,row.names = F,quote = F)
########################################################
#Get per population FST pre and post environmental shift
Pfst_pre_filt<-MakeDiploidFSTMat(SNPmat = Gt1f, locusNames = colnames(Gt1f), popNames = PopsALL)
#Filter out NA values
Pfst_pre_noNa<-Pfst_pre_filt[!is.na(Pfst_pre_filt$FST),]
#ink_bef<-data.frame(cor(Gt1_m2,Gt1f[,colnames(Gt1f)!=M2_MID],method="pearson"))
#Heterozgosity per allele before env. shift
Het_bef<-Pfst_pre_filt$He
#Calculate FST value for each allele pre environmental shift
F_ST_ll1<-Pfst_pre_noNa$T1/Pfst_pre_noNa$T2
#Calculate FST values averaged across each allele pre environmental shift
F_ST_l1<-mean(Pfst_pre_noNa$T1)/mean(Pfst_pre_noNa$T2)
# Gt2f<-t(G2f)
# rownames(Gt2f)<-PopsALL
#colnames(Gt2f)<-MID_post_filt
# colnames(Gt2f)<-paste("M",position2_filt,sep="")
#Calculate per locus FST values post environmental shift
# Pfst_post<-MakeDiploidFSTMat(SNPmat = Gt2f, locusNames = colnames(Gt2f), popNames = PopsALL)
#Filter out NA values
# Pfst_post_noNa<-Pfst_post[!is.na(Pfst_post$FST),]
#
# #Heterozgosity per allele after env. shift
# Het_aft<-Pfst_post_noNa$He
#
# #Calculate FST value for each allele pre environmental shift
# F_ST_ll2<-Pfst_post_noNa$T1/Pfst_post_noNa$T2
#
# #Calculate FST values for each  allele pre environmental shift
# F_ST_l2<-mean(Pfst_post_noNa$T1)/mean(Pfst_post_noNa$T2)
#Pop_afreq2 is not filtered for MAF in order to properly compare all AF shifts from Pop_afreq1
# Pop_afreq2<-NULL
# for(i in 1:100){
#   Pop_afreq2<-rbind(Pop_afreq2,rowSums(G2[,Start[i]:Stop[i]])/(2*ncol(G2[,Start[i]:Stop[i]])))
# }
#
# Pop_afreq2<-data.frame(Pop_afreq2)
# colnames(Pop_afreq2)<-paste("M",position2,sep="")
#stopCluster(cl)
##################################
#Population specific summary stats
##################################
#Location values
Loc <- NULL
for(j in 1:10){
for(i in 1:10){
Loc <- c(Loc,paste("A",i,sep=""))
}
}
Loc<-factor(Loc,levels=Loc[1:10])
#Population values
Pop <- NULL
for(i in 1:100){
Pop <- c(Pop,paste("P",i,sep=""))
}
X <- NULL
for(j in 1:10){
for(i in 1:10){
X <- c(X,i)
}
}
Y <- NULL
for(j in 1:10){
Y<-c(Y,rep(j,10))
}
Env_before<-envPop$envSelect
#Env_after<-envPop.shift$envSelect
#Diff_env<-Env_after-Env_before
#Env_range<- envPop$envSelect%in%round(envPop.shift$envSelect,1)&round(envPop.shift$envSelect,1)%in%envPop$envSelect
# M2_AF_before<-data.frame(Pop_afreq1[,c(which(colnames(Pop_afreq1)==positionM2))])
# colnames(M2_AF_before)<-"M2_AF_before"
#
# M2_AF_after<-data.frame(Pop_afreq2[,c(which(colnames(Pop_afreq2)==positionM2))])
# colnames(M2_AF_after)<-"M2_AF_after"
#
# M2_AF_diff<-M2_AF_after-M2_AF_before
# colnames(M2_AF_diff)<-"M2_AF_diff"
# M1_AF_before_all<-Pop_afreq1[,-which(colnames(Pop_afreq1)==positionM2)]
# M1_AF_after_all<-Pop_afreq2[,-which(colnames(Pop_afreq2)==positionM2)]
#
#If neutral
M1_AF_before_all<-Pop_afreq1
#M1_AF_after_all<-Pop_afreq2
# M1_AF_before_shared<-M1_AF_before_all[colnames(M1_AF_before_all)%in%colnames(M1_AF_after_all)]
# M1_AF_after_shared<-M1_AF_after_all[colnames(M1_AF_after_all)%in%colnames(M1_AF_before_all)]
# M1_AF_before<-data.frame(rowMeans(M1_AF_before_shared))
# colnames(M1_AF_before)<-"M1_AF_before"
# M1_AF_after<-data.frame(rowMeans(M1_AF_after_shared))
# colnames(M1_AF_after)<-"M1_AF_after"
#
# M1_AF_diff<-M1_AF_after-M1_AF_before
# colnames(M1_AF_diff)<-"M1_AF_diff"
# F_ST_genome_bef.aft.<-data.frame(FST_genome_pop)
# colnames(F_ST_genome_bef.aft.)<-"F_ST_genome_bef.aft."
# F_ST_M2_bef.aft.<-data.frame(FST_M2_pop)
# colnames(F_ST_M2_bef.aft.)<-"F_ST_M2_bef.aft."
Rel_Fit_before <- data.frame(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)-30]])
colnames(Rel_Fit_before)<-"Rel_Fit_before"
# Rel_Fit_after <- data.frame(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)]])
# colnames(Rel_Fit_after)<-"Rel_Fit_after"
#
# Rel_Fit_diff<-Rel_Fit_after-Rel_Fit_before
# colnames(Rel_Fit_diff)<-"Rel_Fit_diff"
# Pop_size<-rep(specs$n,100)
# Summary_Pop<-cbind(Pop,X,Y,Env_before,Env_after,Diff_env,Env_range,gfTrans1,gfTrans2,offset,gfM2Trans1,gfM2Trans2,M2offset,M2_AF_before,M2_AF_after,M2_AF_diff,M1_AF_before,M1_AF_after,M1_AF_diff,F_ST_genome_bef.aft.,F_ST_M2_bef.aft.,Rel_Fit_before,Rel_Fit_after,Rel_Fit_diff)
#If neutral:
Pop_size<-unlist(rep(unname(specs[9:18]),10))
#Summary_Pop<-cbind(Pop,X,Y,Pop_size,Env_before,Env_after,Diff_env,Env_range,gfTrans1,gfTrans2,offset,gfM2Trans1=0,gfM2Trans2=0,M2offset=0,M2_AF_before=0,M2_AF_after=0,M2_AF_diff=0,M1_AF_before,M1_AF_after,M1_AF_diff,F_ST_genome_bef.aft.,F_ST_M2_bef.aft.=0,Rel_Fit_before,Rel_Fit_after,Rel_Fit_diff)
#Summary_Pop<-cbind(Pop,X,Y,Pop_size,Env_before,Env_after,Diff_env,Env_range,gfTrans1,M1_AF_before,Rel_Fit_before,Rel_Fit_after,Rel_Fit_diff)
#Summary_Pop<-cbind(Pop,X,Y,Env_before,gfTrans1,M1_AF_before_all,Rel_Fit_before,)
#write.csv(Summary_Pop,file=paste("results/R_results/",seed,"_summary_Pop.csv",sep=""),row.names=F)
#Summary_Pop<-read.csv("Summary_Pop_1576675870126.csv")
##################################
# Allele specific summary stats
##################################
R2<-data.frame(gfMod$result) #Those allelese which had an R2 value > 0
colnames(R2)<-"R2"
R0<-colnames(alFreq[,!colnames(alFreq)%in%names(gfMod$result)]) #Get all alleles, regardless of R2 value
R0<-data.frame(rep(0,length(R0)),row.names = colnames(alFreq[,!colnames(alFreq)%in%names(gfMod$result)])) #Filter out those who we already have saved in R2
colnames(R0)<-"R2"
R2_all<-rbind(R2,R0) #merge them so we have all alleles with accompanying R2 values
R2_all$Pos <- as.numeric(substring(row.names(R2_all),2))
Rho_Env<-cor(as.matrix(alFreq),envPop,method = "spearman")
temp<-merge(Rho_Env,R2_all,by=0)
colnames(temp)<-c("Locus","Rho_Env","R2","Position")
Linkage<-NULL
position1_filt_scaled<-NULL
for(i in 1:length(position1_filt)){
if(position1_filt[i]>0 & position1_filt[i]<50001){
Linkage<-c(Linkage,1)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i])
}
if(position1_filt[i]>50000 & position1_filt[i]<100001){
Linkage<-c(Linkage,2)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-50000)
}
if(position1_filt[i]>100000 & position1_filt[i]<150001){
Linkage<-c(Linkage,3)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-100000)
}
if(position1_filt[i]>150000 & position1_filt[i]<200001){
Linkage<-c(Linkage,4)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-150000)
}
if(position1_filt[i]>200000 & position1_filt[i]<250001){
Linkage<-c(Linkage,5)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-200000)
}
if(position1_filt[i]>250000 & position1_filt[i]<300001){
Linkage<-c(Linkage,6)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-250000)
}
if(position1_filt[i]>300000 & position1_filt[i]<350001){
Linkage<-c(Linkage,7)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-300000)
}
if(position1_filt[i]>350000 & position1_filt[i]<400001){
Linkage<-c(Linkage,8)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-350000)
}
if(position1_filt[i]>400000 & position1_filt[i]<450001){
Linkage<-c(Linkage,9)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-400000)
}
if(position1_filt[i]>450000 & position1_filt[i]<500001){
Linkage<-c(Linkage,10)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-450000)
}
}
#PreN$LG<-Linkage
#PreN[rownames(PreN)!=Pfst_pre_filt$LocusName,]
#PreN$FST<-Pfst_pre_filt$FST
#PreN$DistM2<-abs(PreN$PP-PreN$PP[PreN$LT=="M2"])
Summary_Locus<-cbind(temp[order(temp$Position),],Linkage)
write.csv(Summary_Locus,file=paste("results/R_results/",r.seeds$V1[k],"_summary_Loc.csv",sep=""),row.names=F)
##################################
# Simulation specific summary stats
##################################
#No_A<-unname(dim(vcf1_filt)[1])
PR2<-gfMod$species.pos.rsq/No_A
#PR2_UL
F_ST_l1
#F_ST_l2
Rel.Fit_l1<-mean(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)-30]])
#Rel.Fit_l2<-mean(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)]])
Rho_EnvR2<-cor(temp$Rho_Env,temp$R2,method = "spearman")
#Summary_Sim<-cbind(seed,No_A,PR2,F_ST_l1,F_ST_l2,Rel.Fit_l1,Rel.Fit_l2,Rho_EnvR2)
Summary_Sim<-cbind(r.seeds$V1[k],No_A,PR2,F_ST_l1,Rel.Fit_l1,Rho_EnvR2)
write.csv(Summary_Sim,file=paste("results/R_results/",r.seeds$V1[k],"_summary_Sim.csv",sep=""),row.names=F)
###############################################
#Visualize R^2>0 compared to Spearman correltation of alFreq to each env.
###############################################
#EnvCor<-cor(as.matrix(R2),envPop,method = "spearman")
#EnvCor<-data.frame(rownames(EnvCor),EnvCor)
#colnames(EnvCor)<-c("MID","rho")
#R2MID<-unique(data.frame(impDat$allele,impDat$r2))
#colnames(R2MID)<-c("MID","R2")
#Comp<-merge(EnvCor,R2MID, by="MID")
#Link<-NULL
#for(i in 1:length(Comp$MID)){
#  if(Comp$MID[i]%in%linked_MID){
#    Link<-c(Link,"Linked")
#    }
#  else{
#    Link<-c(Link,"Unlinked")
#  }
#}
#Comp$Link<-Link
#r2<-data.frame(gfMod$result)
#colnames(r2)<-"r2"
#save.image("~/Desktop/PostDoc/SLiMstuff/SLiM_output/250K/VCF_output/300K/1727520158823.RData")
write.table(gfTrans1$C.Imp_genome_before,paste("results/R_results/",r.seeds$V1[k],"_CI",sep=""),row.names = F,col.names = F)
save.image(paste("results/R_results/",r.seeds$V1[k],".RData",sep=""))
#rm(list=ls())
}
All_equalC1<-read.table("results/R_results/1278335993644_CI")
All_equalC2<-read.table("results/R_results/3393663285300_CI")
All_equalC3<-read.table("results/R_results/2207643041387_CI")
All_equalC4<-read.table("results/R_results/6359250998124_CI")
All_equalC5<-read.table("results/R_results/1940819310024_CI")
All_equalC6<-read.table("results/R_results/6040998529642_CI")
All_equalC7<-read.table("results/R_results/6417941976338_CI")
All_equalC8<-read.table("results/R_results/3323115928098_CI")
All_equalC9<-read.table("results/R_results/6232745500281_CI")
All_equalC10<-read.table("results/R_results/5643197868019_CI")
Neutral_1<-read.table("results/R_results/2519699755125_CI")
Neutral_2<-read.table("results/R_results/5518873473655_CI")
Neutral_3<-read.table("results/R_results/5536135188855_CI")
Neutral_4<-read.table("results/R_results/5555300357555_CI")
Neutral_5<-read.table("results/R_results/5597604322855_CI")
Neutral_6<-read.table("results/R_results/5526691746355_CI")
Neutral_7<-read.table("results/R_results/5561122192855_CI")
Neutral_8<-read.table("results/R_results/5551393883655_CI")
Neutral_9<-read.table("results/R_results/5521073151055_CI")
Neutral_10<-read.table("results/R_results/5583941596055_CI")
Neutral_flp_1<-read.table("results/R_results/7502828106749_CI")
Neutral_flp_2<-read.table("results/R_results/1589041996747_CI")
Neutral_flp_3<-read.table("results/R_results/5385408036410_CI")
Neutral_flp_4<-read.table("results/R_results/6842444356530_CI")
Neutral_flp_5<-read.table("results/R_results/4621752902865_CI")
Neutral_flp_6<-read.table("results/R_results/3809137545526_CI")
Neutral_flp_7<-read.table("results/R_results/8081899648532_CI")
Neutral_flp_8<-read.table("results/R_results/2876069253310_CI")
Neutral_flp_9<-read.table("results/R_results/4280735488981_CI")
Neutral_flp_10<-read.table("results/R_results/1254488294944_CI")
Neutral_flp_11<-read.table("results/R_results/4698739288374_CI")
ggplot() +
geom_line(aes(x=Env_before, y=Neutral_1$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_2$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_3$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_4$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_5$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_6$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_7$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_8$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_9$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_10$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC1$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC2$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC3$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC4$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC5$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC6$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC7$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC8$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC9$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC10$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_1$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_2$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_3$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_4$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_5$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_6$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_7$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_8$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_9$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_10$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_11$V1, colour="c"), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="GF Cumulative Importance", x="Environment") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
scale_colour_manual(values=c("a"="lightblue","b"="grey","c"="orange"),labels = c("Neutral1", "All equal", "Neutral1 flipped"),name="Model")+
#  values=c(rgb(1,0,0,0.4),rgb(0,1,0,0.4),rgb(0,0,0,0.4),rgb(0,0,1,0.4),rgb(0.4,0,0,0.4))) +
theme(plot.title = element_text(size=14, face="bold.italic"))
ggplot() +
geom_line(aes(x=Env_before, y=Neutral_1$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_2$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_3$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_4$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_5$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_6$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_7$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_8$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_9$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_10$V1, colour="a"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC1$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC2$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC3$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC4$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC5$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC6$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC7$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC8$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC9$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=All_equalC10$V1, colour="b"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_1$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_2$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_3$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_4$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_5$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_6$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_7$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_8$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_9$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_10$V1, colour="c"), lwd=1.5) +
geom_line(aes(x=Env_before, y=Neutral_flp_11$V1, colour="c"), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="GF Cumulative Importance", x="Environment") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
scale_colour_manual(values=c("a"="lightblue","b"="grey","c"="orange"),labels = c("Increasing N", "All equal", "Decreasing N"),name="Model")+
#  values=c(rgb(1,0,0,0.4),rgb(0,1,0,0.4),rgb(0,0,0,0.4),rgb(0,0,1,0.4),rgb(0.4,0,0,0.4))) +
theme(plot.title = element_text(size=14, face="bold.italic"))
save.image(paste("results/R_results/All_Neutral.RData",sep=""))
