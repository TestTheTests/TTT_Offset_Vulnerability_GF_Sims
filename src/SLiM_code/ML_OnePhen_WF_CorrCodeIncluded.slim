//
// Additive gentetic variance for each trait in each population and across metapopulation
// Phenotypic variance for each population and across metapopulation
// Genetic covariance b/w traits for each population and across all populations

initialize()
{
	if (exists("slimgui")){
		//setSeed(4496341759106);
		defineConstant("MY_SEED", getSeed());
	}
	//setSeed(1707249891095);
	defineConstant("C_num", 10);							// number of chromosomes
	defineConstant("C_lengths", rep(50000, C_num));	// lengths for each chromosome
	defineConstant("MU_base", 1e-7);						// base mutation rate overall
	defineConstant("MU", MU_base * 0.02);				// mut rate for QTNs specifically
	defineConstant("R", 1e-5);								// recombination rate
	defineConstant("N", 100);								// subpop size
	defineConstant("MIG", 0.05);							// migration rate between subpops
	defineConstant("BURNIN", 500);						// number of burning generations
	defineConstant("ENV_SHIFT", 1000);					// the generation in which the environment starts to shift
	defineConstant("METAPOP_SIDE", 10);					// x by x matrix of subpops
	defineConstant("RATE", 0.01);							// rate at which environment changes
	//defineConstant("S", 0.1);
	defineConstant("SIGMA_K", 0.25);						// smaller is stronger stabilizing selection, larger is weaker (wider) stabilizing selection
	defineConstant("SIGMA_STAT", 4);					// burn-in stabilizing selection function variance								// selection coefficient for local fitness gradient
	defineConstant("QTL_MU", 0);
	//defineConstant("QTL_SD", SIGMA_K);
	
	defineConstant("ALPHA", 0.1);						// variance of mutation effect size
	defineConstant("METAPOP_NPOPS", METAPOP_SIDE * METAPOP_SIDE);
	
	// set up spatially autocorrelated environmental variables
	xv = rep(seq(-1.0, 1.0, length=METAPOP_SIDE), METAPOP_SIDE);
	yv = repEach(seq(-1.0, 1.0, length=METAPOP_SIDE), METAPOP_SIDE);
	defineConstant("maxOpt0", max(xv));
	defineConstant("maxOpt1", max(yv));
	
	//yv = rep(seq(1.0, -1.0, length=METAPOP_SIDE), METAPOP_SIDE);
	defineConstant("OPTS_0", xv);
	defineConstant("OPTS_1", yv);
	
	//	initializeTreeSeq(simplificationInterval=500);	// infrequent for faster runtimes
	initializeTreeSeq();
	initializeMutationRate(MU);
	initializeSex("A"); //Set each population to contain two autosomal sexes that must reproduce to yield next generation
	
	//initializeMutationType("m1", 0.5, "f", 0.0); // Neutral
	initializeMutationType("m2", 0.5, "n", QTL_MU, ALPHA); // QTL mutations under selection across the environment
	m2.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", m2, 1.0);
	initializeGenomicElement(g1, 0, sum(C_lengths[0:(C_num - 2)])-1);
	
	rates = c(rep(c(R, 0.5), C_num-1), R);
	ends = repEach(cumSum(C_lengths), 2);
	ends = ends[0:(length(ends) - 2)];
	ends = ends - c(rep(c(1,0), C_num-1), 1);
	initializeRecombinationRate(rates, ends);
	
	// QTL-related constants used below
	defineConstant("QTL_mu", c(0, 0));
	//	defineConstant("QTL_mu", 0);
	defineConstant("QTL_cov", 0);
	defineConstant("QTL_var", ALPHA);
	//defineConstant("QTL_sigma", matrix(c(QTL_var, QTL_cov, QTL_cov, QTL_var), nrow=2));
	
	//	catn();
	//	catn("QTL DFE means: ");
	//	print(QTL_mu);
	//	catn();
	//	catn("QTL DFE variance-covariance matrix: ");
	//	print(QTL_sigma);
}
//METAPOP_SIDE by METAPOP_SIDE matrix of populations
function (void)setUpMigration(void)
{
	subpops = sim.subpopulations;
	for (x in 1:METAPOP_SIDE){
		for (y in 1:METAPOP_SIDE)
		{
			destID = (x - 1) + (y - 1) * METAPOP_SIDE + 1;
			destSubpop = subpops[destID - 1];
			destSubpop.setValue("opt0", OPTS_0[destID - 1]);
			destSubpop.setValue("opt1", OPTS_1[destID - 1]);
			if (x > 1) // Left to right
				destSubpop.setMigrationRates(destID - 1, MIG);
			if (x < METAPOP_SIDE) // Right to left
				destSubpop.setMigrationRates(destID + 1, MIG);
			if (y > 1) // Top to bottom
				destSubpop.setMigrationRates(destID - METAPOP_SIDE, MIG);
			if (y < METAPOP_SIDE) // Bottom to top
				destSubpop.setMigrationRates(destID + METAPOP_SIDE, MIG);
			
			
			xd = ((x - 1) / (METAPOP_SIDE - 1)) * 0.9 + 0.05;
			yd = ((y - 1) / (METAPOP_SIDE - 1)) * 0.9 + 0.05;
			
			destSubpop.setValue("xd", xd);
			destSubpop.setValue("yd", yd);
		}
	}
}

function (void)outputMigration(string$ path)
{
	s = sim.subpopulations;
	m = matrix(rep(0.0, (size(s) + 1) * (size(s) + 1)), nrow=size(s) + 1, ncol=size(s) + 1);
	
	for (i in seqAlong(s))
	{
		s_i = s[i];
		s_i_mig = s_i.immigrantSubpopIDs;
		s_i_frac = s_i.immigrantSubpopFractions;
		
		for (j in seqAlong(s))
		{
			s_j = s[j];
			match = (s_i_mig == s_j.id);
			
			if (sum(match))
			{
				which_match = which(match);
				m[i+1, j+1] = s_i_frac[which_match];
			}
		}
	}
	
	contents = NULL;
	for (i in seqAlong(1:(size(s)+1)))
	{
		line = "[" + paste(m[i,], sep=",") + "],";
		contents = c(contents, line);
	}
	writeFile(path, contents);
}


1 {
	for (i in 1:METAPOP_NPOPS)
		sim.addSubpop(i, N);
	setUpMigration();
	
	//sim.rescheduleScriptBlock(s1, Burnin);
	//sim.rescheduleScriptBlock(s2, Burnin, Sim_Len);
	//sim.rescheduleScriptBlock(s3, Sim_Len);
}

2: late(){
	subpops = sim.subpopulations;
	for (destSubpop in subpops)
		if (F)
		{
			// this version lets you visualize an environmental variable using a color gradient
			col = rgb2color(hsv2rgb(c((destSubpop.getValue("scaled_opt1")+1)/10, 1.0, 1.0)));
			//col = rgb2color(hsv2rgb(c((destSubpop.getValue("scaled_opt0")), 1.0, 1.0)));
			destSubpop.configureDisplay(c(destSubpop.getValue("xd"), destSubpop.getValue("yd")), 1.0, color=col);
		}
	else
	{
		// this version lets normal fitness coloring occur
		destSubpop.configureDisplay(c(destSubpop.getValue("xd"), destSubpop.getValue("yd")), 1.0);
	}
}

fitness(m2) { return 1.0; }

//mutation(m2) {
//	// draw mutational effects for the new m2 mutation
//	//effects = rmvnorm(1, QTL_mu, QTL_sigma);
//	effects = rnorm(1, QTL_mu, QTL_var);
//	mut.setValue("e0", effects[0]);
//	//mut.setValue("e1", effects[1]);
//	
//	return T;
//}

// estimate and output individual fitness scaling 
2:early() {
	burn = min((sim.generation / BURNIN), 1.0);
	
	for (subpop in sim.subpopulations)
	{
		// calculate fitness optima
		opt0 = subpop.getValue("opt0") * burn;
		opt1 = subpop.getValue("opt1") * burn;
		//		if (sim.generation < BURNIN)
		//		{
		//			opt0 = opt0 * (sim.generation / BURNIN);
		//			opt1 = opt1 * (sim.generation / BURNIN);
		//		}
		if (sim.generation > ENV_SHIFT)
		{
			opt0 = opt0 > maxOpt0+0.5 ? 20 else opt0 + 0.01;
			opt1 = opt1 > maxOpt1+0.5 ? 20 else opt1 + 0.01;
			subpop.setValue("opt0", opt0);
			subpop.setValue("opt1", opt1);
		}
		//opts = c(opt0, opt1);
		subpop.setValue("scaled_opt0", opt0);
		subpop.setValue("scaled_opt1", opt1);
		
		//		catn("Scaled opt0: " + opt0);
		//		catn("Scaled opt1: " + opt1);
		
		// calculate the fitness covariance matrix, sigma, normalization factor
		//fitness_var = SIGMA_K;
		fitness_var = SIGMA_K * burn + SIGMA_STAT * (1.0 - burn);
		//		if (sim.generation < BURNIN)
		//			fitness_var = SIGMA_K * (sim.generation / BURNIN) + SIGMA_STAT * (1.0 - sim.generation / BURNIN);
		//fitness_cov = 0.0;
		
		//fitness_varcov = matrix(c(fitness_var, fitness_cov, fitness_cov, fitness_var), nrow=2);
		//fitness_norm = dmvnorm(c(0.0, 0.0), c(0.0, 0.0), fitness_varcov);
		fitness_norm = dnorm(0.0, 0.0, fitness_var);
		
		//subpop.setValue("fitness_varcov", fitness_varcov);
		subpop.setValue("fitness_norm", fitness_norm);
		
		//		for (ind in subpop.individuals)
		//		{
		//			// construct phenotypes from additive effects of QTL mutations
		//			muts = ind.genomes.mutationsOfType(m2);
		//			ind.setValue("phenotype0", size(muts) ? sum(muts.getValue("e0")) else 0.0);
		//			//ind.setValue("phenotype1", size(muts) ? sum(muts.getValue("e1")) else 0.0);
		//		}
		
		//		subpop.fitnessScaling = subpop.getValue("K")/ subpop.individualCount;
		// calculate fitness effects - normalize the height of the finess function to be 1.0
		
		inds = subpop.individuals;
		phenotypes = inds.sumOfMutationsOfType(m2);
		inds.setValue("phenotype0", phenotypes );
		//		inds.fitnessScaling = dmvnorm(cbind(inds.getValue("phenotype0"), inds.getValue("phenotype1")), opts, fitness_varcov) / fitness_norm;
		//		inds.fitnessScaling = dnorm(inds.getValue("phenotype0"), opt0, fitness_var) / fitness_norm;
		inds.fitnessScaling = dnorm(phenotypes, opt0, fitness_var) / fitness_norm;
	}
	
	if (sim.generation % 10 == 1)
	{
		subpops = sim.subpopulations;
		all_opt0 = subpops.getValue("opt0");
		//all_opt1 = subpops.getValue("opt1");
		mean_phen0 = rep(0.0, length(subpops));
		//mean_phen1 = rep(0.0, length(subpops));
		nsubpops = size(subpops);
		fitness_matrix = matrix(rep(0.0, nsubpops*nsubpops), nrow=nsubpops, ncol=nsubpops);
		for (source_index in seqAlong(subpops))
		{
			source_subpop = subpops[source_index];
			inds = source_subpop.individuals;
			phenotype0 = inds.getValue("phenotype0");
			//phenotype1 = inds.getValue("phenotype1");
			mean_phen0[source_index] = mean(phenotype0);
			//mean_phen1[source_index] = mean(phenotype1);
			for (test_index in seqAlong(subpops))
			{
				test_subpop = subpops[test_index];
				opt0 = test_subpop.getValue("scaled_opt0");
				//opt1 = test_subpop.getValue("scaled_opt1");
				//fitness_varcov = test_subpop.getValue("fitness_varcov");
				fitness_norm = test_subpop.getValue("fitness_norm");
				//fitnesses = dmvnorm(cbind(phenotype0, phenotype1), c(opt0, opt1), fitness_varcov) / fitness_norm;
				fitnesses = dnorm(phenotypes, opt0, fitness_var) / fitness_norm;
				fitness_matrix[test_index,source_index] = mean(fitnesses);
			} // end loop through subpops
		} // end loop through subpops
	//catn(sim.generation + ": common garden matrix:");
	//print(fitness_matrix);
		diagonals = rep(0.0, nsubpops);
		for (i in seqAlong(diagonals))
			diagonals[i] = fitness_matrix[i,i];
		sympatric = mean(diagonals);
		allopatric = (sum(fitness_matrix) - sum(diagonals)) / (length(fitness_matrix) - length(diagonals));
		local_adapt = sympatric - allopatric;
		cor_0 = cor(all_opt0, mean_phen0);
		//cor_1 = cor(all_opt1, mean_phen1);
		CG_sum = c(sim.generation,sympatric,allopatric, local_adapt, mean(mean_phen0), cor_0);
		
		catn("Gen: " + sim.generation + ", sympatric: " + sympatric + ", allopatric: " + allopatric +", local adapt.: "+ local_adapt +", mean pheno0: "+ mean(mean_phen0) +", corr. pheno0 to opt0: "+ cor_0);
		catn();
		
		writeFile(paste(c("results/SLiM_output/CG_files/", getSeed(), "_ML_WF_CG_sum_Gen",(sim.generation-1),".txt"), sep=""), paste("generation " + "sympatry " + "allopatry " + "local_adaptation " + "mean pheno0 "+ "corr_pheno0_opt0 "));
		
		writeFile(paste(c("results/SLiM_output/CG_files/", getSeed(), "_ML_WF_CG_sum_Gen",(sim.generation-1),".txt"), sep=""), paste(CG_sum), append=T);
	catn("Gen: " + sim.generation + " mean phenotype: " +mean(mean_phen0));
	}
}

1: late(){
	if(sim.generation % 100 == 0){
		subpops = sim.subpopulations;
		fitness_var = SIGMA_K;
		if (sim.generation < BURNIN)
			fitness_var = SIGMA_K * (sim.generation / BURNIN) + SIGMA_STAT * (1.0 - sim.generation / BURNIN);
		for(subpop in subpops){
			opt0 = subpop.getValue("opt0");
			//opt1 = subpop.getValue("opt1");
			//opts = c(opt0, opt1);
			catn();
			catn("Gen: " + sim.generation);
			catn("Pop: " + paste(subpop));
			catn("Opt: " + opt0 );
			catn("Fitness Var: " + fitness_var);
			catn("Mean Pheno0: "+ mean(subpop.individuals.getValue("phenotype0")));
			catn("SD Pheno0: "+ sd(subpop.individuals.getValue("phenotype0")));
			//catn("Mean Pheno1: "+ mean(subpop.individuals.getValue("phenotype1")));
			//catn("SD Pheno1: "+ sd(subpop.individuals.getValue("phenotype1")));
			catn();
		}
	}
}

1 : late(){
	if(sim.generation % 100 == 0){
		catn("m2 frequency in meta-pop :" + size(sim.subpopulations.individuals.genomes.mutationsOfType(m2))/size(sim.subpopulations.individuals.genomes));
		catn("Number of unique m2 alleles in meta-pop :" + size(unique(sim.subpopulations.individuals.genomes.mutationsOfType(m2))));
		catn();
	}
}

1001 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
	pos_T1 = paste(sim.subpopulations.genomes.positionsOfMutationsOfType(m2));
	writeFile(paste(c("results/SLiM_output/Sim_sum/", getSeed(), "_Pos_ML_WF.txt"), sep=""), pos_T1);
}

2: early(){
	//inds = sim.subpopulations.individuals;
	pops = sim.subpopulations;
	if ((sim.generation-1) % 10 == 0){
		// get positions of all m2 mutations and store in Q
		//g = sim.subpopulations.genomes;
		// get the unique mutations in the sample, sorted by position		
		//o = sortBy(unique(g.mutationsOfType(m2)), "position"); 
		mut = sim.mutationsOfType(m2);
		
		fit=c();
		for (i in pops){
			fit = c(fit,mean(i.cachedFitness(NULL)));
		}
		
		freq=c();
		for (i in 0:(size(sim.subpopulations)-1)){
			freq = c(freq,size(sim.subpopulations[i].genomes.mutationsOfType(m2))/size(sim.subpopulations[i].genomes));
		}
		
		phen0=c();
		for (i in pops){
			phen0 = c(phen0,mean(i.individuals.getValue("phenotype0")));
		}
		
//		phen1=c();
//		for (i in pops){
//			phen0 = c(phen1,mean(i.individuals.getValue("phenotype1")));
//		}
		
		env1=c();
		for (i in 0:(size(sim.subpopulations)-1)){
			env1=c(env1,sim.subpopulations[i].getValue("scaled_opt0"));
		}
		env2=c();
		for (i in 0:(size(sim.subpopulations)-1)){
			env2=c(env2,sim.subpopulations[i].getValue("scaled_opt1"));
		}
		info=paste(c(MIG,N,sim.chromosome.mutationRates,R, QTL_mu[0], ALPHA, SIGMA_K, RATE,BURNIN,ENV_SHIFT));
		out = paste(c(info,sim.generation, fit, freq, phen0, env1, env2));
		writeFile(paste(c("results/SLiM_output/Sim_sum/", getSeed(), "_Freq_ML_WF.txt"), sep=""), out, append=T);
	}
}


1300 late() {
	sim.treeSeqOutput(paste(c("results/SLiM_output/TSR_files/", getSeed(), "_ML_WF_Gen",sim.generation,".tree"), sep=""));
	outputMigration("results/SLiM_output/Mig_mat/" + getSeed() + "_mig_mat.txt");
	pos_T2 = sim.subpopulations.genomes.positionsOfMutationsOfType(m2);
}










