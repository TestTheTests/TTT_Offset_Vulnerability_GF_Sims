initialize()
{
	//setSeed(1707249891095);
	defineConstant("MY_SEED", getSeed());
	defineConstant("C_num", 10);							// number of chromosomes
	defineConstant("C_lengths", rep(50000, C_num));	// lengths for each chromosome
	defineConstant("MU_base", 1e-6);						// base mutation rate overall
	defineConstant("MU", MU_base * 0.02);				// mut rate for QTNs specifically
	defineConstant("R", 1e-8);								// recombination rate
	defineConstant("N", 100);								// subpop size
	defineConstant("MIG", 0.0001);							// migration rate between subpops
	defineConstant("BURNIN", 5000);						// number of burning generations
	defineConstant("METAPOP_SIDE", 10);					// x by x matrix of subpops
	defineConstant("RATE", 0.01);							// rate at which environment changes
	defineConstant("S", 0.1);								// selection coefficient for local fitness gradient
	defineConstant("SIGMA_K", 1.25);						// smaller is stronger stabilizing selection, // larger is weaker (wider) stabilizing selection
	defineConstant("SIGMA_STAT", 4.0);					// burn-in stabilizing selection function variance
	defineConstant("METAPOP_NPOPS", METAPOP_SIDE * METAPOP_SIDE);
	
	// set up spatially autocorrelated environmental variables
	//xv = rep(seq(-1.0, 1.0, length=METAPOP_SIDE), METAPOP_SIDE);
	//yv = repEach(seq(-1.0, 1.0, length=METAPOP_SIDE), METAPOP_SIDE);
	xv = readFloatTable("~/Desktop/AHM_subset.csv");
	yv = readFloatTable("~/Desktop/MAT_subset.csv");
	yv = (yv+1)/2;
	xv = t(xv)[9:0,9:0];
	yv = t(yv)[9:0,9:0];
	defineConstant("OPTS_0", xv);
	defineConstant("OPTS_1", yv);
	
	//initializeTreeSeq(simplificationInterval=500);	// infrequent for faster runtimes
	initializeMutationRate(MU);
	initializeSex("A"); //Set each population to contain two autosomal sexes that must reproduce to yield next generation
	
	//initializeMutationType("m1", 0.5, "f", 0.0); // Neutral
	initializeMutationType("m2", 0.5, "f", 0.0); // QTL mutations under selection across the environment
	m2.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", m2, 1.0);
	initializeGenomicElement(g1, 0, sum(C_lengths[0:(C_num - 2)]));
	
	rates = c(rep(c(R, 0.5), C_num-1), R);
	ends = repEach(cumSum(C_lengths), 2);
	ends = ends[0:(length(ends) - 2)];
	ends = ends + c(rep(c(0,1), C_num-1), 0);
	initializeRecombinationRate(rates, ends);
	
	// QTL-related constants used below
	defineConstant("QTL_mu", c(0, 0));
	defineConstant("QTL_cov", 0);
	defineConstant("QTL_var", SIGMA_K);
	defineConstant("QTL_sigma", matrix(c(QTL_var, QTL_cov, QTL_cov, QTL_var), nrow=2));
	
	catn();
	catn("QTL DFE means: ");
	print(QTL_mu);
	catn();
	catn("QTL DFE variance-covariance matrix: ");
	print(QTL_sigma);
}
//METAPOP_SIDE by METAPOP_SIDE matrix of populations
function (void)setUpMigration(void)
{
	subpops = sim.subpopulations;
	for (x in 1:METAPOP_SIDE)
		for (y in 1:METAPOP_SIDE)
		{
			destID = (x - 1) + (y - 1) * METAPOP_SIDE + 1;
			destSubpop = subpops[destID - 1];
			if (x > 1) // Left to right
				destSubpop.setMigrationRates(destID - 1, MIG);
			if (x < METAPOP_SIDE) // Right to left
				destSubpop.setMigrationRates(destID + 1, MIG);
			if (y > 1) // Top to bottom
				destSubpop.setMigrationRates(destID - METAPOP_SIDE, MIG);
			if (y < METAPOP_SIDE) // Bottom to top
				destSubpop.setMigrationRates(destID + METAPOP_SIDE, MIG);
			destSubpop.setValue("opt0", OPTS_0[destID - 1]);
			destSubpop.setValue("opt1", OPTS_1[destID - 1]);
			
			xd = ((x - 1) / (METAPOP_SIDE - 1)) * 0.9 + 0.05;
			yd = ((y - 1) / (METAPOP_SIDE - 1)) * 0.9 + 0.05;
			
			if (F)
			{
				// this version lets you visualize an environmental variable using a color gradient
				col = rgb2color(hsv2rgb(c((destSubpop.getValue("opt0") + 0.5)/3, 1.0, 1.0)));
				destSubpop.configureDisplay(c(xd, yd), 0.4, color=col);
			}
			else
			{
				// this version lets normal fitness coloring occur
				destSubpop.configureDisplay(c(xd, yd), 0.4);
			}
		}
}
1 {
	for (i in 1:METAPOP_NPOPS)
		sim.addSubpop(i, N);
	setUpMigration();
	
	//sim.rescheduleScriptBlock(s1, Burnin);
	//sim.rescheduleScriptBlock(s2, Burnin, Sim_Len);
	//sim.rescheduleScriptBlock(s3, Sim_Len);
}
mutation(m2) {
	// draw mutational effects for the new m2 mutation
	effects = rmvnorm(1, QTL_mu, QTL_sigma);
	mut.setValue("e0", effects[0]);
	mut.setValue("e1", effects[1]);
	
	return T;
}
late() {
	for (subpop in sim.subpopulations)
	{
		// calculate fitness optima
		opt0 = subpop.getValue("opt0");
		opt1 = subpop.getValue("opt1");
		if (sim.generation <= BURNIN)
		{
			opt0 = opt0 * (sim.generation / BURNIN);
			opt1 = opt1 * (sim.generation / BURNIN);
		}
		else { // if we've past the the Burnin point, OPT_0 will start to increase proportionally & OPT_1 will start to decrease proportionally
			opt0 = opt0 + opt0 * RATE;
			opt1 = opt1 - opt1 * RATE;
		}
		opts = c(opt0, opt1);
		
		// calculate the fitness covariance matrix, sigma, normalization factor
		fitness_var = SIGMA_K;
		if (sim.generation < BURNIN)
			fitness_var = SIGMA_K * (sim.generation / BURNIN) + SIGMA_STAT * (1.0 - sim.generation / BURNIN);
		fitness_cov = 0.0;
		fitness_varcov = matrix(c(fitness_var, fitness_cov, fitness_cov, fitness_var), nrow=2);
		fitness_norm = dmvnorm(c(0.0, 0.0), c(0.0, 0.0), fitness_varcov);
		
		for (ind in subpop.individuals)
		{
			// construct phenotypes from additive effects of QTL mutations
			muts = ind.genomes.mutationsOfType(m2);
			phenotype0 = size(muts) ? sum(muts.getValue("e0")) else 0.0;
			phenotype1 = size(muts) ? sum(muts.getValue("e1")) else 0.0;
			ind.setValue("phenotype0", phenotype0);
			ind.setValue("phenotype1", phenotype1);
			
			// calculate fitness effects - normalize the height of the finess function to be 1.0
			ind.fitnessScaling = dmvnorm(c(phenotype0, phenotype1), opts, fitness_varcov) / fitness_norm;
		}
	}
}

function (f)readFloatTable(s$ path)
{
	l = readFile(path);
	return t(sapply(l, "asFloat(strsplit(applyValue));", simplify="matrix"));
}


200000 late() { sim.outputFixedMutations(); }










