initialize() {

defineConstant("s", 0.1); // Selection coefficient for local fitness gradient
defineConstant("d", seq(0,4,1)); // Set of environmental "demes" 
defineConstant("m", 0.05); // Set universal migration rate between populations
defineConstant("n", 1000); // Set universal deme population size
defineConstant("start", clock());

initializeMutationRate(1e-7);

initializeMutationType("m1", 0.5, "f", 0.0); // Neutral
initializeMutationType("m2", 0.5, "f", 0.0); // Mutation under selection across an environmental gradient, initially neutral

initializeGenomicElementType("g1", m1, 1); // Majority of genome experiencing only neutral mutations
initializeGenomicElementType("g2", c(m1,m2), c(0.99,0.01)); // 1 percent of the mutations in this genomic element will eventually be under selection 
for (index in 0:9)
initializeGenomicElement(g1, index*1000, index*1000 + 999); // Generate ten exclusively neutral genomic regions, each with 1,000 nucleotides

initializeGenomicElement(g2, 10000, 10099); // Generate a single potentially adaptable genomic region, containing 100 nucleotides

initializeRecombinationRate(1e-8); // Single recombination rate for entire genome

initializeSex("A"); //Set each population to contain two autosomal sexes that must reproduce to yield next generation
}

//5 by 5 matrix of populations
1 {
metapopSide = 5; // Number of subpops along one side of the grid, in this case 5
metapopSize = metapopSide * metapopSide; // Create a full 5 by 5 matrix 
for (i in 1:metapopSize)
sim.addSubpop(i, n);
subpops = sim.subpopulations;
for (x in 1:metapopSide)
for (y in 1:metapopSide)
{
destID = (x - 1) + (y - 1) * metapopSide + 1;
destSubpop = subpops[destID - 1];
if (x > 1) // Left to right
destSubpop.setMigrationRates(destID - 1, m);
if (x < metapopSide) // Right to left
destSubpop.setMigrationRates(destID + 1, m);
if (y > 1) // Top to bottom
destSubpop.setMigrationRates(destID - metapopSide, m);
if (y < metapopSide) // Bottom to top
destSubpop.setMigrationRates(destID + metapopSide, m);
}
}

//Set fitness for each population based on 5x5 grid. Fitness based on x*(s/2)+(1-s), where s=0.1 and d=seq(0,4,1)


10000:20000 fitness(m2,p1) {return d[0]*(s/2)+(1-s);}
10000:20000 fitness(m2,p6) {return d[0]*(s/2)+(1-s);}
10000:20000 fitness(m2,p11) {return d[0]*(s/2)+(1-s);}
10000:20000 fitness(m2,p16) {return d[0]*(s/2)+(1-s);}
10000:20000 fitness(m2,p21) {return d[0]*(s/2)+(1-s);}

10000:20000 fitness(m2,p2) {return d[1]*(s/2)+(1-s);}
10000:20000 fitness(m2,p7) {return d[1]*(s/2)+(1-s);}
10000:20000 fitness(m2,p12) {return d[1]*(s/2)+(1-s);}
10000:20000 fitness(m2,p17) {return d[1]*(s/2)+(1-s);}
10000:20000 fitness(m2,p22) {return d[1]*(s/2)+(1-s);}

10000:20000 fitness(m2,p3) {return d[2]*(s/2)+(1-s);}
10000:20000 fitness(m2,p8) {return d[2]*(s/2)+(1-s);}
10000:20000 fitness(m2,p13) {return d[2]*(s/2)+(1-s);}
10000:20000 fitness(m2,p18) {return d[2]*(s/2)+(1-s);}
10000:20000 fitness(m2,p23) {return d[2]*(s/2)+(1-s);}

10000:20000 fitness(m2,p4) {return d[3]*(s/2)+(1-s);}
10000:20000 fitness(m2,p9) {return d[3]*(s/2)+(1-s);}
10000:20000 fitness(m2,p14) {return d[3]*(s/2)+(1-s);}
10000:20000 fitness(m2,p19) {return d[3]*(s/2)+(1-s);}
10000:20000 fitness(m2,p24) {return d[3]*(s/2)+(1-s);}

10000:20000 fitness(m2,p5) {return d[4]*(s/2)+(1-s);}
10000:20000 fitness(m2,p10) {return d[4]*(s/2)+(1-s);}
10000:20000 fitness(m2,p15) {return d[4]*(s/2)+(1-s);}
10000:20000 fitness(m2,p20) {return d[4]*(s/2)+(1-s);}
10000:20000 fitness(m2,p25) {return d[4]*(s/2)+(1-s);}


20000 late() { 
allIndividuals = sim.subpopulations.individuals;
cat("Elapsed: " + (clock() - start));
p1.genomes.outputVCF(filePath = "FFF.p1.vcf");
p2.genomes.outputVCF(filePath = "FFF.p2.vcf");
p3.genomes.outputVCF(filePath = "FFF.p3.vcf");
p4.genomes.outputVCF(filePath = "FFF.p4.vcf");
p5.genomes.outputVCF(filePath = "FFF.p5.vcf");
p6.genomes.outputVCF(filePath = "FFF.p6.vcf");
p7.genomes.outputVCF(filePath = "FFF.p7.vcf");
p8.genomes.outputVCF(filePath = "FFF.p8.vcf");
p9.genomes.outputVCF(filePath = "FFF.p9.vcf");
p10.genomes.outputVCF(filePath = "FFF.p10.vcf");
p11.genomes.outputVCF(filePath = "FFF.p11.vcf");
p12.genomes.outputVCF(filePath = "FFF.p12.vcf");
p13.genomes.outputVCF(filePath = "FFF.p13.vcf");
p14.genomes.outputVCF(filePath = "FFF.p14.vcf");
p15.genomes.outputVCF(filePath = "FFF.p15.vcf");
p16.genomes.outputVCF(filePath = "FFF.p16.vcf");
p17.genomes.outputVCF(filePath = "FFF.p17.vcf");
p18.genomes.outputVCF(filePath = "FFF.p18.vcf");
p19.genomes.outputVCF(filePath = "FFF.p19.vcf");
p20.genomes.outputVCF(filePath = "FFF.p20.vcf");
p21.genomes.outputVCF(filePath = "FFF.p21.vcf");
p22.genomes.outputVCF(filePath = "FFF.p22.vcf");
p23.genomes.outputVCF(filePath = "FFF.p23.vcf");
p24.genomes.outputVCF(filePath = "FFF.p24.vcf");
p25.genomes.outputVCF(filePath = "FFF.p25.vcf");
}
