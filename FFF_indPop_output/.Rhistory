names(gr) <- c('X', 'Y')
coordinates(gr) <- c('X', 'Y')
gridded(gr) <- TRUE
fullgrid(gr) <- TRUE  # Create SpatialGrid object
str(coordinates(gr))
try(proj4string(gr) <- proj4string(EB2))
print(i)
}
}
makeGrid<-function(EB2){
repeat{
i=i+1
gr <- as.data.frame(spsample(EB2, 'regular', n  = 50000))
names(gr) <- c('X', 'Y')
coordinates(gr) <- c('X', 'Y')
gridded(gr) <- TRUE
fullgrid(gr) <- TRUE  # Create SpatialGrid object
str(coordinates(gr))
try(proj4string(gr) <- proj4string(EB2))
print(i)
}
}
makeGrid(EB2)
makeGrid<-function(EB2){
repeat{
gr <- as.data.frame(spsample(EB2, 'regular', n  = 50000))
names(gr) <- c('X', 'Y')
coordinates(gr) <- c('X', 'Y')
gridded(gr) <- TRUE
fullgrid(gr) <- TRUE  # Create SpatialGrid object
str(coordinates(gr))
try(proj4string(gr) <- proj4string(EB2))
if(is.na(proj4string(gr))==FALSE) return(gr)
}
}
makeGrid(EB2)
gr<-makeGrid(EB2)
gr
# Function to create a random grid empty grid
gr<-makeGrid(EB2)
EB2.idw <- idw(NN.sigma ~ 1, EB2, newdata = gr, idp = 8)
## Function to create a random grid empty grid
# n = number of cells, increase n to increase resolution
makeGrid<-function(EB2){
repeat{
gr <- as.data.frame(spsample(EB2, 'regular', n  = 50000))
names(gr) <- c('X', 'Y')
coordinates(gr) <- c('X', 'Y')
gridded(gr) <- TRUE
fullgrid(gr) <- TRUE  # Create SpatialGrid object
try(proj4string(gr) <- proj4string(EB2))
if(is.na(proj4string(gr))==FALSE) return(gr)
}
}
# Function to create a random grid empty grid
gr<-makeGrid(EB2)
EB2.idw <- idw(NN.sigma ~ 1, EB2, newdata = gr, idp = 8)
# Convert to raster
r <- raster(EB2.idw)
gplot_r <- gplot_data(r)
#Change scale_fill_gradient value to name of variable
ggplot() +
geom_tile(data = gplot_r,
aes(x = x, y = y, fill = value)) +
geom_tile(data = dplyr::filter(gplot_wrld_r, !is.na(value)),
aes(x = x, y = y), fill = "grey20") +
#xlim(2,358) +
ylim(-78,90) +
xlab("Long") +
ylab("Lat") +
ggtitle("Sigma dissimilarity: Today from 2100") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradient2(expression(paste(sigma," dis.")),
low = 'blue', mid = "yellow", high = 'red',
midpoint = 4,
limits=c(0,8.1),
na.value = NA) +
coord_quickmap()
Time<-c(1595.11, 9497.68, 6259.02, 8669.61, 9421.5, 11833.4)
Simp<-c("NoTSR", "100", "500", "1000", "5000", "Default")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)")
c(1:10)%10
c(1:10)
x <-c(1:10)
x%10
x%%10
which(x%%10==0)
x[which(x%%10==0)]
x <-c(1:15000)
x[which(x%%10==0)]
x[which(x%%750==0)]
x[which(x%%500==0)]
x[which(x%%5000==0)]
x[which(x%%1000==0)]
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different intervals")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main=paste("CPU times for TSR at different intervals",\n,"Total generation time 15,000")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main=paste("CPU times for TSR at different intervals",/n,"Total generation time 15,000")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main=paste(expression("CPU times for TSR at different intervals",/n,"Total generation time 15,000")))
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main=paste(expression("CPU times for TSR at different intervals",\n,"Total generation time 15,000")))
paste(expression("CPU times for TSR at different intervals",\n,"Total generation time 15,000"))
paste(expression("CPU times for TSR at different intervals",/n,"Total generation time 15,000"))
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different intervals \nTotal generation time 15,000")))
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different intervals \nTotal generation time 15,000"))
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different intervals \nTotal generation time 15,000")
x[which(x%%500==0)]
x[which(x%%500==0)]
x[which(x%%750==0)]
x[which(x%%100==0)]
x[which(x%%500==0)]
x[which(x%%750==0)]
x[which(x%%1000==0)]
x[which(x%%5000==0)]
length(x[which(x%%100==0)])
length(x[which(x%%500==0)])
length(x[which(x%%750==0)])
length(x[which(x%%1000==0)])
length(x[which(x%%5000==0)])
T
T
Time<-c(1595.11, 9497.68, 6259.02, 8669.61, 9421.5, 11833.4)
Simp<-c("NoTSR", "100 (150x)", "500 (30x)", "1000 (20x)", "5000 (3x)", "Default")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different intervals \nTotal generation time 15,000")
browseVignettes("OutFLANK")
if (!("devtools" %in% installed.packages())){install.packages(devtools)}
library(devtools)
if (!("qvalue" %in% installed.packages())){TODO}
if (!("vcfR" %in% installed.packages())){install.packages("vcfR")}
devtools::install_github("whitlock/OutFLANK")
library(OutFLANK)
library(vcfR)
require(SNPRelate)
getwd()
#####################################################
#Code for Exon Cap analysis of Tripneustes sequences
#####################################################
#File "All.calls.FFF.recode.vcf" generated as described in document Methods.txt in folder Exon_cap_seq-UseThisOne
sewd("/Users/akijarl/Desktop/Data_Files/Exon_cap_seq-UseThisOne/)
#####################################################
#Code for Exon Cap analysis of Tripneustes sequences
#####################################################
#File "All.calls.FFF.recode.vcf" generated as described in document Methods.txt in folder Exon_cap_seq-UseThisOne
sewd("/Users/akijarl/Desktop/Data_Files/Exon_cap_seq-UseThisOne/")
#####################################################
#Code for Exon Cap analysis of Tripneustes sequences
#####################################################
#File "All.calls.FFF.recode.vcf" generated as described in document Methods.txt in folder Exon_cap_seq-UseThisOne
setwd("/Users/akijarl/Desktop/Data_Files/Exon_cap_seq-UseThisOne/")
list.files()
length(x[which(x%%750==0)])
length(x[which(x%%1000==0)])
length(x[which(x%%5000==0)])
Time<-c(1595.11, 9497.68, 6259.02, 9330.64, 8669.61, 9421.5, 11833.4)
Simp<-c("NoTSR", "100 (150x)", "500 (30x)", "750 (20x)", "1000 (15x)", "5000 (3x)", "Default")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different summary intervals \nTotal generation time 15,000")
setwd("/Users/akijarl/Desktop/PostDoc/NovelOceanClim")
list.files()
x<-fread("HOT_results.xlsx")
x<-fread("HOT_results.csv")
View(x)
summary(x$ph)
x<-x[which(x$ph!=-9),]
summary(x$ph)
summary(x$ph)
y<-x[which(x$ph<8),]
head(y)
View(z)
View(y)
colnames(x)
y<-x[,c("press(dbar)","ph")]
View(y)
plot(y$`press(dbar)`,y$ph)
plot(y$`press(dbar)`,y$ph,ylab="ph",xlab="Pressure")
plot(y$`press(dbar)`,y$ph,ylab="ph",xlab="Meter Sea Water")
plot(y$ph,y$`press(dbar)`, xlab="ph",ylab="Meter Sea Water")
y
?sort
?order
order(x$`press(dbar)`
)
y<-y[order(x$`press(dbar)`),]
View(y)
plot(y$ph,y$`press(dbar)`, xlab="ph",ylab="Meter Sea Water")
y<-y[order(x$`press(dbar)`,decreasing=T),]
plot(y$ph,y$`press(dbar)`, xlab="ph",ylab="Meter Sea Water")
plot(y$ph,-y$`press(dbar)`, xlab="ph",ylab="Meter Sea Water")
plot(y$ph,-log(y$`press(dbar)`), xlab="ph",ylab="Meter Sea Water")
plot(y$ph,-(y$`press(dbar)`, xlab="ph",ylab="Meter Sea Water")
plot(y$ph,-(y$`press(dbar)`), xlab="ph",ylab="Meter Sea Water")
head(x)
y<-x[,c("dic(umol/kg)","press(dbar)","ph")]
y<-y[order(x$`press(dbar)`,decreasing=T),]
View(y)
plot(y$ph,y$`dic(umol/kg)`), xlab="ph",ylab="DIC")
plot(y$ph,y$`dic(umol/kg)`, xlab="ph",ylab="DIC")
plot(y$`dic(umol/kg)`,-(y$`press(dbar)`), xlab="DIC",ylab="Meter Sea Water")
line(y$ph,y$`dic(umol/kg)`)
plot(y$ph,y$`dic(umol/kg)`,add=T, type="l",col="red")
?line
line(y$ph,y$`dic(umol/kg)`,add=T,col="red")
plot(y$ph,-(y$`press(dbar)`), xlab="ph",ylab="Meter Sea Water")
plot(y$`dic(umol/kg)`,y$`dic(umol/kg)`,axes=FALSE)
plot(y$ph,-(y$`press(dbar)`), xlab="ph",ylab="Meter Sea Water")
points(y$`dic(umol/kg)`,-(y$`press(dbar)`)
)
plot(y$ph,-(y$`press(dbar)`), xlab="ph",ylab="Meter Sea Water")
par(new=TRUE)
plot(y$`dic(umol/kg)`,-(y$`press(dbar)`),axes=FALSE)
plot(y$ph,-(y$`press(dbar)`))#, xlab="ph",ylab="Meter Sea Water")
par(new=TRUE)
plot(y$`dic(umol/kg)`,-(y$`press(dbar)`),axes=FALSE)
plot(y$ph,-(y$`press(dbar)`))#, xlab="ph",ylab="Meter Sea Water")
plot(y$ph,-(y$`press(dbar)`), xlab="ph",ylab="Meter Sea Water")
par(new=TRUE)
plot(y$`dic(umol/kg)`,-(y$`press(dbar)`),axes=FALSE, type="l", col="red")
plot(y$ph,-(y$`press(dbar)`), xlab="ph",ylab="Meter Sea Water")
par(new=TRUE)
plot(y$`dic(umol/kg)`,-(y$`press(dbar)`),axes=FALSE, col="red",xlab="ph",,ylab="Meter Sea Water")
?plot
?axis
axis(side=4, y$`dic(umol/kg)`, "DIC")
summary(y$`dic(umol/kg)`)
axis(side=4, label="DIC")
axis(side=1, at=(y$`dic(umol/kg)`), label="DIC")
axis(side=1, at=(y$`dic(umol/kg)`))
axis(side=3, at=(y$`dic(umol/kg)`))
plot(y$ph,-(y$`press(dbar)`), xlab="ph",ylab="Meter Sea Water")
par(new=TRUE)
plot(y$`dic(umol/kg)`,-(y$`press(dbar)`),axes=FALSE, col="red",xlab="ph",,ylab="Meter Sea Water")
axis(side=3, at=(y$`dic(umol/kg)`),ticks=F)
plot(y$ph,-(y$`press(dbar)`), xlab="ph",ylab="Meter Sea Water")
par(new=TRUE)
plot(y$`dic(umol/kg)`,-(y$`press(dbar)`),axes=FALSE, col="red",xlab="ph",,ylab="Meter Sea Water")
axis(side=3, at=(y$`dic(umol/kg)`),tick=F)
?mtext()
mtext("DIC",side=3,col="red")
plot(y$ph,-(y$`press(dbar)`), xlab="ph",ylab="Meter Sea Water")
par(new=TRUE)
plot(y$`dic(umol/kg)`,-(y$`press(dbar)`),axes=FALSE, col="red",xlab="ph",,ylab="Meter Sea Water")
mtext("DIC",side=3,col="red")
axis(side=3, at=(y$`dic(umol/kg)`),tick=F,col="red")
rm(list=ls())
#####################################################
#Code for Exon Cap analysis of Tripneustes sequences
#####################################################
#File "All.calls.FFF.recode.vcf" generated as described in document Methods.txt in folder Exon_cap_seq-UseThisOne
setwd("/Users/akijarl/Desktop/Data_Files/Exon_cap_seq-UseThisOne/")
library(OutFLANK)
library(vcfR)
require(ggplot2)
require(ggrepel)
require(SNPRelate)
X<-read.vcfR("All.calls.FFF.recode.vcf")
list.files()
X$ pop
str(X)
?akeDiploidFSTMat
?MakeDiploidFSTMat
x <-c(1:15000)
length(x[which(x%%100==0)])
length(x[which(x%%500==0)])
length(x[which(x%%750==0)])
length(x[which(x%%1000==0)])
length(x[which(x%%5000==0)])
Time<-c(1595.11, 9497.68, 6259.02, 9330.64, 8669.61, 9421.5, 11833.4)
Simp<-c("NoTSR", "100 (150x)", "500 (30x)", "750 (20x)", "1000 (15x)", "5000 (3x)", "Default")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different summary intervals \nTotal generation time 15,000")
Time<-c(1595.11, 11833.4, 9497.68, 6259.02, 9330.64, 8669.61, 9421.5)
Simp<-c("NoTSR", , "Default", "100 (150x)", "500 (30x)", "750 (20x)", "1000 (15x)", "5000 (3x)")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different summary intervals \nTotal generation time 15,000")
Time<-c(1595.11, 11833.4, 9497.68, 6259.02, 9330.64, 8669.61, 9421.5)
Simp<-c("NoTSR", , "Default", "100 (150x)", "500 (30x)", "750 (20x)", "1000 (15x)", "5000 (3x)")
Time<-c(1595.11, 11833.4, 9497.68, 6259.02, 9330.64, 8669.61, 9421.5)
Simp<-c("NoTSR", "Default", "100 (150x)", "500 (30x)", "750 (20x)", "1000 (15x)", "5000 (3x)")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different summary intervals \nTotal generation time 15,000")
setwd("/Users/akijarl/Desktop/PostDoc/TTT_Offset_Vulnerability_GF_Sims/FFF_indPop_output/")
P1<-read.vcfR("FFF.p1.vcf")
Time<-c(1595.11, 11833.4, 5625.13, 9497.68, 6259.02, 9330.64, 8669.61, 9421.5)
Simp<-c("NoTSR", "Default", "No neutral", "100 (150x)", "500 (30x)", "750 (20x)", "1000 (15x)", "5000 (3x)")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different summary intervals \nTotal generation time 15,000")
Time<-c(1595.11, 1739.77, 11833.4, 5625.13, 9497.68, 6259.02, 9330.64, 8669.61, 9421.5)
Simp<-c("NoTSR", "ModMut_nonNeu", "Default", "No neutral", "100 (150x)", "500 (30x)", "750 (20x)", "1000 (15x)", "5000 (3x)")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different summary intervals \nTotal generation time 15,000")
d<-seq(0,4,1)
s<-0.1
(y=d*(s/2)+(1-s))
d<-seq(-2,2,1)
d
d^s
0.1^-2
-2^0.1
-1^0.1
-0^0.1
1^0.1
2^0.1
d
d^0.1
as.numeric(d^0.1)
as.numeric(d)^0.1
d[0]
d[1]
class(d[1])
class(d[1]^0.1)
class(d^0.1)
d^0.1
1+d^0.1
-d^0.1
d
d*2
e^d
exp^d
?exp
?exp
exp^-2
exp^-1
exp^0
exp^1
exp(-2)
exp(-1)
exp(0)
exp(1)
exp(2)
log(1.1)
exp(0.085)
exp(0.095)
exp(0.05)
exp(0.01)
exp(-0.01)
exp(-0.05)
exp(-0.001)
exp(-0.1)
exp(-0.2)
exp(-0.19)
exp(-0.11)
exp(-0.1)
exp(-0.05)
exp(-0.1)
exp(0.095)
exp(0.1)
d<-seq(0,4,1)
s<-0.1
(y=d*(s/2)+(1-s))
exp(0.5)
exp(0.2)
exp(0.1)
exp(0.0.5)
exp(0.5)
exp(0.05)
exp(0.1)
0.9512294 - 0.9048374
1.099659 - 0.9048374
1.051271 - 1.099659
exp(0)
0.9512294 - 0.9048374
1 - 0.9512294
1 - 1.051271
1.105171 1.051271
1.105171 - 1.051271
log(0.9)
log(0.95)
log(1)
log(1.05)
log(1.1)
exp(0)
x<-(-0.1053605,-0.05129329,0,0.04879016,0.09531018)
x<-c(-0.1053605,-0.05129329,0,0.04879016,0.09531018)
plot(x)
summary(x)
exp(x)
x<-c(-0.1053605,-0.05129329,0,-0.05129329,-0.1053605)
exp(x)
plot(exp(x))
*10.1
1*0.1
5*0.1
0.5*0.1
0.1*0.1
1*0.1
d<-c(1,5,0,5,1)
(y=exp(s*d))
s
s*d
z<-s*d
(y=exp(z))
(y=exp(-s*d))
d<-c(1,0.5,0,0.5,1)
(y=exp(-s*d))
(y=exp(-s*d))
plot(y,type-"l")
plot(y,type="l")
s<-0.01
(y=exp(-s*d))
plot(y,type="l")
s<-0.1
(y=exp(-s*d))
plot(y,type="l")
s<-0.5
(y=exp(-s*d))
plot(y,type="l")
seq(0,1,0.001)
c(seq(1,0,0.001),seq(0,1,0.001))
dd<-c(seq(1,0,0.001),seq(0,1,0.001))
dd<-c(seq(1,0,-0.001),seq(0,1,0.001))
dd
head(dd)
tail(dd)
s<-0.1
(y=exp(-s*dd))
plot(y,type="l")
s<-0.9
(y=exp(-s*dd))
plot(y,type="l")
s<-0.01
(y=exp(-s*dd))
plot(y,type="l")
d<-c(1,0.5,0,0.5,1)
(y=exp(-s*d))
plot(y,type="l")
s<-0.1
d<-c(1,0.5,0,0.5,1)
(y=exp(-s*d))
plot(y,type="l")
plot(y,type="l",ylim=c(0,1))
s<-0.5
(y=exp(-s*d))
plot(y,type="l",ylim=c(0,1))
s<-0.1
(y=exp(-s*d))
plot(y,type="l",ylim=c(0,1))
s<-0.01
(y=exp(-s*d))
plot(y,type="l",ylim=c(0,1))
?mfrow
??mfrow
par(mfrow=2,mfcol=2)
par(mfrow=c(2,2))
s<-0.01
(y=exp(-s*d))
plot(y,type="l",ylim=c(0,1),main="s=0.01")
s<-0.1
(y=exp(-s*d))
plot(y,type="l",ylim=c(0,1),main="s=0.1")
s<-0.5
(y=exp(-s*d))
plot(y,type="l",ylim=c(0,1),main="s=0.5")
s<-0.9
(y=exp(-s*d))
plot(y,type="l",ylim=c(0,1),main="s=0.9")
s<-0.01
(y=exp(-s*d))
plot(y,type="l",ylim=c(0.4,1),main="s=0.01",ylab="Fitness")
s<-0.1
(y=exp(-s*d))
plot(y,type="l",ylim=c(0.4,1),main="s=0.1",ylab="Fitness")
s<-0.5
(y=exp(-s*d))
plot(y,type="l",ylim=c(0.4,1),main="s=0.5",ylab="Fitness")
s<-0.9
(y=exp(-s*d))
plot(y,type="l",ylim=c(0.4,1),main="s=0.9",ylab="Fitness")
rm(dd)
par()
dev.off()
s<-0.01
(y=exp(-s*d))
plot(y,type="l",ylim=c(0.4,1),main="s=0.9",ylab="Fitness")
plot(y,type="l",ylim=c(0.8,1),main="s=0.01",ylab="Fitness")
plot(y,type="l",ylim=c(0.9,1),main="s=0.01",ylab="Fitness")
s<-0.01
(y=exp(-s*d))
plot(y,type="l",ylim=c(0.9,1),main="s=0.01",ylab="Fitness")
s<-0.1
(y=exp(-s*d))
plot(y,type="l",ylim=c(0.9,1),main="s=0.1",ylab="Fitness")
s<-0.5
(y=exp(-s*d))
plot(y,type="l",ylim=c(0.9,1),main="s=0.1",ylab="Fitness")
d<-seq(0,4,1)
s<-0.1
(y=d*(s/2)+(1-s))
plot(y,type="l")
plot(y,type="l",ylab="Fitness")
plot(y,type="l",ylab="Fitness",xlab="Env, Grad.")
plot(y,type="l",ylab="Fitness",xlab="Env. Grad.")
plot(y,type="l",ylab="Fitness", main="s=0.1", xlab="Env. Grad.")
s<-0.1
(y=exp(-s*d))
plot(y,type="l",ylim=c(0.9,1),main="s=0.1",ylab="Fitness")
(y=exp(-s*d))
d<-c(1,0.5,0,0.5,1)
#par(mfrow=c(2,2))
(y=exp(-s*d))
plot(y,type="l",ylim=c(0.9,1),main="s=0.1",ylab="Fitness")
Time<-c(1595.11, 1739.77, 11833.4, 5625.13, 9497.68, 6259.02, 9330.64, 8669.61, 9421.5)
Simp<-c("NoTSR", "ModMut_nonNeu", "Default", "No neutral", "100 (150x)", "500 (30x)", "750 (20x)", "1000 (15x)", "5000 (3x)")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different summary intervals \nTotal generation time 15,000")
Time<-c(1595.11, 11833.4, 5625.13, 9497.68, 6259.02, 9330.64, 8669.61, 9421.5)
Simp<-c("NoTSR", "DefaultTSR", "No neutral", "100 (150x)", "500 (30x)", "750 (20x)", "1000 (15x)", "5000 (3x)")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different summary intervals \nTotal generation time 15,000")
Time<-c(1595.11, 11833.4, 9497.68, 6259.02, 9330.64, 8669.61, 9421.5)
Simp<-c("NoTSR", "DefaultTSR", "100 (150x)", "500 (30x)", "750 (20x)", "1000 (15x)", "5000 (3x)")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different summary intervals \nTotal generation time 15,000")
length(x[which(x%%100==0)])
x <-c(1:15000)
length(x[which(x%%100==0)])
length(x[which(x%%300==0)])
Time<-c(1595.11, 11833.4, 9497.68, 12067.2, 6259.02, 9330.64, 8669.61, 9421.5)
Simp<-c("NoTSR", "DefaultTSR", "100 (150x)", "300 (50x)", "500 (30x)", "750 (20x)", "1000 (15x)", "5000 (3x)")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different summary intervals \nTotal generation time 15,000")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different summary intervals \nTotal number of generations 15,000")
Time<-c(1595.11, 1739.77,11833.4, 9497.68, 12067.2, 6259.02, 9330.64, 8669.61, 9421.5)
Simp<-c("NoTSR", "NoTSR NoNeut", "DefaultTSR", "100 (150x)", "300 (50x)", "500 (30x)", "750 (20x)", "1000 (15x)", "5000 (3x)")
barplot(Time/3600, names.arg=Simp, ylab="CPU time (h)", main="CPU times for TSR at different summary intervals \nTotal number of generations 15,000")
