listGt_filt<-list()
for(i in 1:100){
a_freq[[i]] <- colSums(listGt[[i]])/(2*nrow(listGt[[i]]))
a_freq_filt[[i]] <- a_freq[[i]][a_freq[[i]]>0.05 & a_freq[[i]]<0.95]
listGt_filt[[i]]<-listGt[[i]][colnames(listGt[[i]])%in%names(a_freq_filt[[i]])]
}
#Calculate per locus FST values
listPfst<-list()
for(i in 1:100){
listPfst[[i]]<-MakeDiploidFSTMat(SNPmat = listGt_filt[[i]], locusNames = colnames(listGt_filt[[i]]), popNames = PopsP)
}
#Filter out NA values
listPfst_noNa<-list()
for(i in 1:100){
listPfst_noNa<-lapply(listPfst,function(x) x[!is.na(x$FST),])
}
#Calculate FST values for each populations
FST_genome_pop<-NULL
for(i in 1:100){
FST_genome_pop<-c(FST_genome_pop,mean(listPfst_noNa[[i]]$T1)/mean(listPfst_noNa[[i]]$T2))
}
getFSTs_diploids = function(popNameList, SNPDataColumn){
#eliminating the missing data for this locus
popnames=unlist(as.character(popNameList))
popNameTemp=popnames[which(SNPDataColumn!=9)]
snpDataTemp=SNPDataColumn[SNPDataColumn!=9]
HetCounts <- tapply(snpDataTemp, list(popNameTemp,snpDataTemp), length)
HetCounts[is.na(HetCounts)] = 0
#Case: all individuals are genetically identical at this locus
if(dim(HetCounts)[2]==1){
return (list(He=NA,FST=NA, T1=NA, T2=NA,FSTNoCorr=NA, T1NoCorr=NA, T2NoCorr=NA,meanAlleleFreq = NA))
}
if(dim(HetCounts)[2]==2){
if(paste(colnames(HetCounts),collapse="")=="01"){HetCounts=cbind(HetCounts,"2"=0)}
if(paste(colnames(HetCounts),collapse="")=="12"){HetCounts=cbind("0"=0,HetCounts)}
if(paste(colnames(HetCounts),collapse="")=="02"){HetCounts=cbind(HetCounts[,1],"1"=0, HetCounts[,2])}
}
out = WC_FST_Diploids_2Alleles(HetCounts)
return(out)
}
MakeDiploidFSTMat_2<-function(SNPmat,locusNames,popNames){
locusname <- unlist(locusNames)
popname <- unlist(popNames)
snplevs <- levels(as.factor(unlist(SNPmat)))
if(any(!(snplevs%in%c(0,1,2,9)))==TRUE) {
print("Error: Your snp matrix has a character other than 0,1,2 or 9")
break
}
if (dim(SNPmat)[1] != length(popname)) {
print("Error: your population names do not match your SNP matrix")
break
}
if (dim(SNPmat)[2] != length(locusname)) {
print("Error:  your locus names do not match your SNP matrix")
break
}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat <- matrix(NA, nrow = nloci, ncol = 8)
for (i in 1:nloci) {
FSTmat[i, ] = unlist(getFSTs_diploids(popname, SNPmat[,i]))
if (i%%10000 == 0) {
print(paste(i, "done of", nloci))
}
}
outTemp = as.data.frame(FSTmat)
outTemp = cbind(locusname, outTemp)
colnames(outTemp) = c("LocusName", "He", "FST", "T1", "T2",
"FSTNoCorr", "T1NoCorr", "T2NoCorr", "meanAlleleFreq")
return(outTemp)
}
#Fst_Pre<-list()
#for(i in 1:100){
Fst_Pre<-MakeDiploidFSTMat_2(SNPmat = Gt1, locusNames = colnames(Gt1), popNames = PopsALL)
ggplot() +
geom_line(aes(x=Env_before, y=gfTrans1$C.Imp_genome_before), colour=rgb(0,0,0,0.4), lwd=1.5) +
#facet_grid(. ~ strSel) +
labs(y="GF offset", x="Environment") +
#geom_line(data=cImpMAF.neut, aes(x=x, y=y),
#          colour=rgb(0,0,1, 0.75), lwd=1) +
#geom_line(data=cImpMAF.sel, aes(x=x, y=y),
#          colour=rgb(1,0,0, 0.75), lwd=1) +
#geom_line(data=cImpMAF, aes(x=x, y=y),
#          colour=rgb(0,0,0, 0.75), lwd=1) +
theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "in")) +
theme_bw() +
theme(axis.text.x = element_text(size = 18, colour = "grey60"),
axis.title.x = element_text(size=24)) +
theme(axis.text.y = element_text(size = 16, colour = "grey60"),
axis.title.y = element_text(size=24, vjust=1)) +
theme(strip.text = element_text(size=16)) +
#ggtitle("Lost > 5") +
ggtitle(paste(plotTitle,"Gen. 300")) +
#scale_x_continuous(limits=c(-4,7))+
theme(plot.title = element_text(size=14, face="bold.italic"))
colnames(Gt1f)<-paste("M",position1_filt,sep="")
Gt1f<-t(G1f)
rownames(Gt1f)<-PopsALL
colnames(Gt1f)<-paste("M",position1_filt,sep="")
#Calculate per locus FST values pre environmental shift
Pfst_pre_filt<-MakeDiploidFSTMat(SNPmat = Gt1f, locusNames = colnames(Gt1f), popNames = PopsALL)
#Filter out NA values
Pfst_pre_noNa<-Pfst_pre_filt[!is.na(Pfst_pre_filt$FST),]
#Heterozgosity per allele before env. shift
Het_bef<-Pfst_pre_filt$He
#Calculate FST value for each allele pre environmental shift
F_ST_llb<-Pfst_pre_noNa$T1/Pfst_pre_noNa$T2
#Calculate FST values averaged across each allele pre environmental shift
F_ST_lb<-mean(Pfst_pre_noNa$T1)/mean(Pfst_pre_noNa$T2)
Gt2f<-t(G2f)
rownames(Gt2f)<-PopsALL
#colnames(Gt2f)<-MID_post_filt
colnames(Gt2f)<-paste("M",position2_filt,sep="")
#Calculate per locus FST values post environmental shift
Pfst_post<-MakeDiploidFSTMat(SNPmat = Gt2f, locusNames = colnames(Gt2f), popNames = PopsALL)
#Filter out NA values
Pfst_post_noNa<-Pfst_post[!is.na(Pfst_post$FST),]
#Heterozgosity per allele after env. shift
Het_aft<-Pfst_post_noNa$He
#Calculate FST value for each allele pre environmental shift
F_ST_lla<-Pfst_post_noNa$T1/Pfst_post_noNa$T2
#Calculate FST values for each  allele pre environmental shift
F_ST_la<-mean(Pfst_post_noNa$T1)/mean(Pfst_post_noNa$T2)
#Pop_afreq2 is not filtered for MAF in order to properly compare all AF shifts from Pop_afreq1
Pop_afreq2<-NULL
for(i in 1:100){
Pop_afreq2<-rbind(Pop_afreq2,rowSums(G2[,Start[i]:Stop[i]])/(2*ncol(G2[,Start[i]:Stop[i]])))
}
Pop_afreq2<-data.frame(Pop_afreq2)
colnames(Pop_afreq2)<-MID_post
Loc <- NULL
for(j in 1:10){
for(i in 1:10){
Loc <- c(Loc,paste("A",i,sep=""))
}
}
Loc<-factor(Loc,levels=Loc[1:10])
#Population values
Pop <- NULL
for(i in 1:100){
Pop <- c(Pop,paste("P",i,sep=""))
}
X <- NULL
for(j in 1:10){
for(i in 1:10){
X <- c(X,i)
}
}
Y <- NULL
for(j in 1:10){
Y<-c(Y,rep(j,10))
}
Env_before<-envPop$envSelect
Env_after<-envPop.shift$envSelect
Diff_env<-Env_after-Env_before
Env_range<- envPop$envSelect%in%round(envPop.shift$envSelect,1)&round(envPop.shift$envSelect,1)%in%envPop$envSelect
M1_AF_before_all<-Pop_afreq1[,-which(colnames(Pop_afreq1)==M2_MID)]
M1_AF_before_all<-Pop_afreq1
M1_AF_after_all<-Pop_afreq2
M1_AF_before_shared<-M1_AF_before_all[colnames(M1_AF_before_all)%in%colnames(M1_AF_after_all)]
M1_AF_after_shared<-M1_AF_after_all[colnames(M1_AF_after_all)%in%colnames(M1_AF_before_all)]
M1_AF_before<-data.frame(rowMeans(M1_AF_before_shared))
colnames(M1_AF_before)<-"M1_AF_before"
M1_AF_after<-data.frame(rowMeans(M1_AF_after_shared))
colnames(M1_AF_after)<-"M1_AF_after"
M1_AF_diff<-M2_AF_after-M2_AF_before
colnames(M1_AF_diff)<-"M1_AF_diff"
F_ST_genome_bef.aft.<-data.frame(FST_genome_pop)
colnames(F_ST_genome_bef.aft.)<-"F_ST_genome_bef.aft."
F_ST_M2_bef.aft.<-data.frame(FST_M2_pop)
colnames(F_ST_M2_bef.aft.)<-"F_ST_M2_bef.aft."
Rel_Fit_before <- data.frame(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)-30]])
colnames(Rel_Fit_before)<-"Rel_Fit_before"
Rel_Fit_after <- data.frame(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)]])
colnames(Rel_Fit_after)<-"Rel_Fit_after"
Rel_Fit_diff<-Rel_Fit_after-Rel_Fit_before
colnames(Rel_Fit_diff)<-"Rel_Fit_diff"
Summary_Pop<-cbind(Pop,X,Y,Env_before,Env_after,Diff_env,Env_range,gfTrans1,gfTrans2,offset,gfM2Trans1,gfM2Trans2,M2offset,M2_AF_before,M2_AF_after,M2_AF_diff,M1_AF_before,M1_AF_after,M1_AF_diff,F_ST_genome_bef.aft.,F_ST_M2_bef.aft.,Rel_Fit_before,Rel_Fit_after,Rel_Fit_diff)
Summary_Pop<-cbind(Pop,X,Y,Env_before,Env_after,Diff_env,Env_range,gfTrans1,gfTrans2,offset,gfM2Trans1=0,gfM2Trans2=0,M2offset=0,M2_AF_before=0,M2_AF_after=0,M2_AF_diff=0,M1_AF_before,M1_AF_after,M1_AF_diff,F_ST_genome_bef.aft.,F_ST_M2_bef.aft.=0,Rel_Fit_before,Rel_Fit_after,Rel_Fit_diff)
M1_AF_diff<-M1_AF_after-M1_AF_before
colnames(M1_AF_diff)<-"M1_AF_diff"
Summary_Pop<-cbind(Pop,X,Y,Env_before,Env_after,Diff_env,Env_range,gfTrans1,gfTrans2,offset,gfM2Trans1=0,gfM2Trans2=0,M2offset=0,M2_AF_before=0,M2_AF_after=0,M2_AF_diff=0,M1_AF_before,M1_AF_after,M1_AF_diff,F_ST_genome_bef.aft.,F_ST_M2_bef.aft.=0,Rel_Fit_before,Rel_Fit_after,Rel_Fit_diff)
View(Summary_Pop)
plot(Summary_Pop$Pop,Summary_Pop$D_C.Imp_genome,xlab="Population",ylab="C.Imp.Genome")
plot(Summary_Pop$Pop,Summary_Pop$D_C.Imp_M2,xlab="Population",ylab="C.Imp.M2")
plot(Summary_Pop$Pop,Summary_Pop$F_ST_M2_bef.aft.,xlab="Population",ylab="FST bef.aft. M2")
plot(Summary_Pop$Pop,Summary_Pop$F_ST_genome_bef.aft.,xlab="Population",ylab="FST bef.aft. Genome")
#par(mfrow=c(2,2),bty="l",mar=c(4,4,1,1))
plot(Summary_Pop$F_ST_genome_bef.aft.,Summary_Pop$D_C.Imp_genome,col=colfunc(10),pch=19, cex=2,ylab="GF Gen offset Genome",xlab=expression(paste("True Gen offset (F"[ST]," Genome)")))
#abline(lm(Summary_Pop$D_C.Imp_genome~Summary_Pop$F_ST_genome_bef.aft.),col="red")
rho_test<-cor.test(Summary_Pop$D_C.Imp_genome,Summary_Pop$F_ST_genome_bef.aft., method = "spearman" )
text(adj=0, max(Summary_Pop$F_ST_genome_bef.aft.)-max(Summary_Pop$F_ST_genome_bef.aft.)*0.15,max(Summary_Pop$D_C.Imp_genome)-max(Summary_Pop$D_C.Imp_genome)*0.1,paste("Rho = ",round(rho_test$estimate,2), "\np-value = ",round(rho_test$p.value,2), sep=""))
plot(Summary_Pop$Rel_Fit_diff,Summary_Pop$D_C.Imp_genome,ylab="GF Gen offset Genome",xlab="True Fitness Offset")
abline(lm(Summary_Pop$D_C.Imp_genome~Summary_Pop$Rel_Fit_diff),col="red")
rho_test<-cor.test(Summary_Pop$D_C.Imp_genome,Summary_Pop$Rel_Fit_diff, method = "spearman" )
text(adj=0, -0.4,0.09,paste("Rho = ",round(rho_test$estimate,4), "\np-value = ",round(rho_test$p.value,4), sep=""))
plot(Summary_Pop$F_ST_M2_bef.aft.,Summary_Pop$D_C.Imp_M2,ylab="GF Gen offset M2",xlab=expression(paste("True Gen offset (F"[ST]," M2)")))
abline(lm(Summary_Pop$D_C.Imp_M2~Summary_Pop$F_ST_M2_bef.aft.),col="red")
rho_test<-cor.test(Summary_Pop$D_C.Imp_M2,Summary_Pop$F_ST_M2_bef.aft., method = "spearman" )
text(adj=0, 0,0.8,paste("Rho = ",round(rho_test$estimate,4), "\np-value = ",round(rho_test$p.value,16), sep=""))
plot(Summary_Pop$Rel_Fit_diff,Summary_Pop$D_C.Imp_M2,ylab="GF Gen offset M2",xlab="True Fitness Offset")
#abline(lm(Summary_Pop$D_C.Imp_M2~Summary_Pop$Rel_Fit_diff),col="red")
rho_test<-cor.test(Summary_Pop$D_C.Imp_M2,Summary_Pop$Rel_Fit_diff, method = "spearman" )
text(adj=0,-0.4,0.8,paste("Rho = ",round(rho_test$estimate,4), "\np-value = ",round(rho_test$p.value,4), sep=""))
plot(Summary_Pop$Rel_Fit_diff,Summary_Pop$F_ST_genome_bef.aft.,ylab=expression(paste("True Gen offset (F"[ST]," Genome)")),xlab="True Fitness Offset")
abline(lm(Summary_Pop$F_ST_genome_bef.aft.~Summary_Pop$Rel_Fit_diff),col="red")
rho_test<-cor.test(Summary_Pop$F_ST_genome_bef.aft.,Summary_Pop$Rel_Fit_diff, method = "spearman" )
text(adj=0,-0.3,0.038,paste("Rho = ",round(rho_test$estimate,4), "\np-value = < 2.2e-16", sep=""))
plot(Summary_Pop$Rel_Fit_diff,Summary_Pop$F_ST_M2_bef.aft.,ylab=expression(paste("True Gen offset (F"[ST]," M2)")),xlab="True Fitness Offset")
abline(lm(Summary_Pop$F_ST_M2_bef.aft.~Summary_Pop$Rel_Fit_diff),col="red")
rho_test<-cor.test(Summary_Pop$F_ST_M2_bef.aft.,Summary_Pop$Rel_Fit_diff, method = "spearman" )
text(adj=0,-0.2,0.9,paste("Rho = ",round(rho_test$estimate,4), "\np-value = ",round(rho_test$p.value,16), sep=""))
rho_test<-cor.test(Summary_Pop$Rel_Fit_diff,Summary_Pop$F_ST_genome_bef.aft., method = "spearman" )
ggplot(data=Summary_Pop,aes(x=Summary_Pop$F_ST_genome_bef.aft.,y=Summary_Pop$Rel_Fit_diff,color=Summary_Pop$X,size=2))+
geom_point()+
ylab("True Fitness Offset")+
xlab(expression(paste("True Gen offset (F"[ST]," Genome)")))+
scale_colour_gradientn(colours = colfunc(10))+
theme_classic(base_size = 16)+
theme(legend.position = "none")+
geom_smooth(method='lm',col="red",size=1,se=F)+
annotate("text", x = max(Summary_Pop$F_ST_genome_bef.aft.)-max(Summary_Pop$F_ST_M2_bef.aft.)*0.15, y = max(Summary_Pop$Rel_Fit_diff)-max(Summary_Pop$Rel_Fit_diff)*0.1, label = paste("Rho = ",round(rho_test$estimate,2), "\np-value = ",round(rho_test$p.value,21), sep=""))
rho_test<-cor.test(Summary_Pop$Rel_Fit_diff,Summary_Pop$F_ST_M2_bef.aft., method = "spearman" )
ggplot(data=Summary_Pop,aes(x=Summary_Pop$F_ST_M2_bef.aft.,y=Summary_Pop$Rel_Fit_diff,color=Summary_Pop$X,size=2))+
geom_point()+
ylab("True Fitness Offset")+
xlab(expression(paste("True Gen offset (F"[ST]," M2)")))+
scale_colour_gradientn(colours = colfunc(10))+
theme_classic(base_size = 16)+
theme(legend.position = "none")+
geom_smooth(method='lm',col="red",size=1,se=F)+
annotate("text", x = min(Summary_Pop$F_ST_M2_bef.aft.)+0.1, y = min(Summary_Pop$Rel_Fit_diff)+0.1, label = paste("Rho = ",round(rho_test$estimate,2), "\np-value = ",round(rho_test$p.value,8), sep=""))
rho_test<-cor.test(Summary_Pop$D_C.Imp_genome,Summary_Pop$F_ST_genome_bef.aft., method = "spearman" )
ggplot(data=Summary_Pop,aes(x=Summary_Pop$F_ST_genome_bef.aft.,y=Summary_Pop$D_C.Imp_genome,color=Summary_Pop$X,size=2))+
geom_point()+
ylab("GF Gen offset Genome")+
xlab(expression(paste("True Gen offset (F"[ST]," Genome)")))+
scale_colour_gradientn(colours = colfunc(10))+
theme_classic(base_size = 16)+
theme(legend.position = "none")+
annotate("text", x = max(Summary_Pop$F_ST_genome_bef.aft.)-max(Summary_Pop$F_ST_genome_bef.aft.)*0.15, y = max(Summary_Pop$D_C.Imp_genome)-max(Summary_Pop$D_C.Imp_genome)*0.1, label = paste("Rho = ",round(rho_test$estimate,3), "\np-value = ",round(rho_test$p.value,2), sep=""))
rho_test<-cor.test(Summary_Pop$D_C.Imp_M2,Summary_Pop$F_ST_M2_bef.aft., method = "spearman" )
ggplot(data=Summary_Pop,aes(x=Summary_Pop$F_ST_M2_bef.aft.,y=Summary_Pop$D_C.Imp_M2,color=Summary_Pop$X,size=2))+
geom_point()+
ylab("GF Gen offset M2")+
xlab(expression(paste("True Gen offset (F"[ST]," M2)")))+
scale_colour_gradientn(colours = colfunc(10))+
theme_classic(base_size = 16)+
theme(legend.position = "none")+
geom_smooth(method='lm',col="red",size=1,se=F)+
annotate("text", x = max(Summary_Pop$F_ST_M2_bef.aft.)-max(Summary_Pop$F_ST_M2_bef.aft.)*0.15, y = max(Summary_Pop$D_C.Imp_M2)-max(Summary_Pop$D_C.Imp_M2)*0.1, label = paste("Rho = ",round(rho_test$estimate,2), "\np-value = ",round(rho_test$p.value,11), sep=""))
rho_test<-cor.test(Summary_Pop$D_C.Imp_genome,Summary_Pop$Rel_Fit_diff, method = "spearman" )
ggplot(data=Summary_Pop,aes(x=Summary_Pop$Rel_Fit_diff,y=Summary_Pop$D_C.Imp_genome,color=Summary_Pop$X,size=2))+
geom_point()+
ylab("GF Gen offset Genome")+
xlab("True Fitness Offset")+
scale_colour_gradientn(colours = colfunc(10))+
theme_classic(base_size = 16)+
theme(legend.position = "none")+
annotate("text", x = min(Summary_Pop$Rel_Fit_diff)-min(Summary_Pop$Rel_Fit_diff)*0.15, y = max(Summary_Pop$D_C.Imp_genome)-max(Summary_Pop$D_C.Imp_genome)*0.1, label = paste("Rho = ",round(rho_test$estimate,2), "\np-value = ",round(rho_test$p.value,2), sep=""))
rho_test<-cor.test(Summary_Pop$D_C.Imp_M2,Summary_Pop$Rel_Fit_diff, method = "spearman" )
ggplot(data=Summary_Pop)+
geom_point(aes(x=Summary_Pop$Rel_Fit_diff,y=Summary_Pop$D_C.Imp_M2,color=Summary_Pop$X,size=2))+
ylab("GF Gen offset M2")+
xlab("True Fitness Offset")+
scale_colour_gradientn(colours = colfunc(10))+
theme_classic(base_size = 16)+
theme(legend.position = "none")+
annotate("text", x = min(Summary_Pop$Rel_Fit_diff)-min(Summary_Pop$Rel_Fit_diff)*0.15, y = max(Summary_Pop$D_C.Imp_M2)-max(Summary_Pop$D_C.Imp_M2)*0.1, label = paste("Rho = ",round(rho_test$estimate,2), "\np-value = ",round(rho_test$p.value,2), sep=""))
CHR_data <- data.frame (SNP = Pfst_pre_filt$LocusName , CHR=Linkage, BP= position1_filt_scaled, P=Pfst_pre_filt$FST)
R2<-data.frame(gfMod$result)
colnames(R2)<-"R2"
R0<-colnames(alFreq[,!colnames(alFreq)%in%names(gfMod$result)])
R0<-data.frame(rep(0,length(R0)),row.names = colnames(alFreq[,!colnames(alFreq)%in%names(gfMod$result)]))
colnames(R0)<-"R2"
R2_all<-rbind(R2,R0)
Rho_Env<-cor(as.matrix(alFreq),envPop,method = "spearman")
colnames(Rho_Env)<-"Rho_Env"
temp<-merge(R2_all,Rho_Env,by="row.names")
Linkage<-NULL
position1_filt_scaled<-NULL
for(i in 1:length(PreN$PP)){
if(PreN$PP[i]>0 & PreN$PP[i]<50001){
Linkage<-c(Linkage,1)
position1_filt_scaled<-c(position1_filt_scaled,PreN$PP[i])
}
if(PreN$PP[i]>50000 & PreN$PP[i]<100001){
Linkage<-c(Linkage,2)
position1_filt_scaled<-c(position1_filt_scaled,PreN$PP[i]-50000)
}
if(PreN$PP[i]>100000 & PreN$PP[i]<150001){
Linkage<-c(Linkage,3)
position1_filt_scaled<-c(position1_filt_scaled,PreN$PP[i]-100000)
}
if(PreN$PP[i]>150000 & PreN$PP[i]<200001){
Linkage<-c(Linkage,4)
position1_filt_scaled<-c(position1_filt_scaled,PreN$PP[i]-150000)
}
if(PreN$PP[i]>200000 & PreN$PP[i]<250001){
Linkage<-c(Linkage,5)
position1_filt_scaled<-c(position1_filt_scaled,PreN$PP[i]-200000)
}
if(PreN$PP[i]>250000 & PreN$PP[i]<300001){
Linkage<-c(Linkage,6)
position1_filt_scaled<-c(position1_filt_scaled,PreN$PP[i]-250000)
}
if(PreN$PP[i]>300000 & PreN$PP[i]<350001){
Linkage<-c(Linkage,7)
position1_filt_scaled<-c(position1_filt_scaled,PreN$PP[i]-300000)
}
if(PreN$PP[i]>350000 & PreN$PP[i]<400001){
Linkage<-c(Linkage,8)
position1_filt_scaled<-c(position1_filt_scaled,PreN$PP[i]-350000)
}
if(PreN$PP[i]>400000 & PreN$PP[i]<450001){
Linkage<-c(Linkage,9)
position1_filt_scaled<-c(position1_filt_scaled,PreN$PP[i]-400000)
}
if(PreN$PP[i]>450000 & PreN$PP[i]<500001){
Linkage<-c(Linkage,10)
position1_filt_scaled<-c(position1_filt_scaled,PreN$PP[i]-450000)
}
}
Linkage<-NULL
position1_filt_scaled<-NULL
for(i in 1:length(position1_filt)){
if(position1_filt[i]>0 & position1_filt[i]<50001){
Linkage<-c(Linkage,1)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i])
}
if(position1_filt[i]>50000 & position1_filt[i]<100001){
Linkage<-c(Linkage,2)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-50000)
}
if(position1_filt[i]>100000 & position1_filt[i]<150001){
Linkage<-c(Linkage,3)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-100000)
}
if(position1_filt[i]>150000 & position1_filt[i]<200001){
Linkage<-c(Linkage,4)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-150000)
}
if(position1_filt[i]>200000 & position1_filt[i]<250001){
Linkage<-c(Linkage,5)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-200000)
}
if(position1_filt[i]>250000 & position1_filt[i]<300001){
Linkage<-c(Linkage,6)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-250000)
}
if(position1_filt[i]>300000 & position1_filt[i]<350001){
Linkage<-c(Linkage,7)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-300000)
}
if(position1_filt[i]>350000 & position1_filt[i]<400001){
Linkage<-c(Linkage,8)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-350000)
}
if(position1_filt[i]>400000 & position1_filt[i]<450001){
Linkage<-c(Linkage,9)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-400000)
}
if(position1_filt[i]>450000 & position1_filt[i]<500001){
Linkage<-c(Linkage,10)
position1_filt_scaled<-c(position1_filt_scaled,position1_filt[i]-450000)
}
}
CHR_data <- data.frame (SNP = Pfst_pre_filt$LocusName , CHR=Linkage, BP= position1_filt_scaled, P=Pfst_pre_filt$FST)
# Plot !
manhattan(CHR_data , suggestiveline = F, genomewideline = F , logp=F, col=brewer.pal(5, "Set2") , cex=0.7, main=plotTitle, ylab=expression(paste("True Gen offset (F"[ST],")")))
abline(h=0.15,col="red")
ggplot(data=Summary_Pop,aes(x=Summary_Pop$F_ST_genome_bef.aft.,y=Summary_Pop$D_C.Imp_genome,color=Summary_Pop$X,size=2))+
geom_point()+
ylab("GF Gen offset Genome")+
xlab(expression(paste("True Gen offset (F"[ST]," Genome)")))+
scale_colour_gradientn(colours = colfunc(10))+
theme_classic(base_size = 16)+
theme(legend.position = "none")#+
ggplot(data=Summary_Pop,aes(x=Summary_Pop$F_ST_genome_bef.aft.,y=Summary_Pop$Rel_Fit_diff,color=Summary_Pop$X,size=2))+
geom_point()+
ylab("True Fitness Offset")+
xlab(expression(paste("True Gen offset (F"[ST]," Genome)")))+
scale_colour_gradientn(colours = colfunc(10))+
theme_classic(base_size = 16)+
theme(legend.position = "none")+
geom_smooth(method='lm',col="red",size=1,se=F)+
annotate("text", x = max(Summary_Pop$F_ST_genome_bef.aft.)-max(Summary_Pop$F_ST_M2_bef.aft.)*0.15, y = max(Summary_Pop$Rel_Fit_diff)-max(Summary_Pop$Rel_Fit_diff)*0.1, label = paste("Rho = ",round(rho_test$estimate,2), "\np-value = ",round(rho_test$p.value,21), sep=""))
ggplot(data=Summary_Pop,aes(x=Summary_Pop$F_ST_genome_bef.aft.,y=Summary_Pop$Rel_Fit_diff,color=Summary_Pop$X,size=2))+
geom_point()+
ylab("True Fitness Offset")+
xlab(expression(paste("True Gen offset (F"[ST]," Genome)")))+
scale_colour_gradientn(colours = colfunc(10))+
theme_classic(base_size = 16)+
theme(legend.position = "none")+
#geom_smooth(method='lm',col="red",size=1,se=F)+
annotate("text", x = max(Summary_Pop$F_ST_genome_bef.aft.)-max(Summary_Pop$F_ST_M2_bef.aft.)*0.15, y = max(Summary_Pop$Rel_Fit_diff)-max(Summary_Pop$Rel_Fit_diff)*0.1, label = paste("Rho = ",round(rho_test$estimate,2), "\np-value = ",round(rho_test$p.value,21), sep=""))
ggplot(data=Summary_Pop,aes(x=Summary_Pop$F_ST_genome_bef.aft.,y=Summary_Pop$Rel_Fit_diff,color=Summary_Pop$X,size=2))+
geom_point()+
ylab("True Fitness Offset")+
xlab(expression(paste("True Gen offset (F"[ST]," Genome)")))+
scale_colour_gradientn(colours = colfunc(10))+
theme_classic(base_size = 16)+
theme(legend.position = "none")#+
No.A<-unname(dim(vcf1_filt)[1])
PR2<-gfMod$species.pos.rsq/No.A
#PR2_UL
F_ST_lb
F_ST_la
Rel.Fit_lb<-mean(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)-30]])
Rel.Fit_la<-mean(fitt[fitt$Type=="Fit",gen_nam[length(gen_nam)]])
Rho_EnvR2<-cor(temp$Rho_Env,temp$R2,method = "spearman")
setwd("/Users/akijarl/Desktop/PostDoc/TTT_Offset_Vulnerability_GF_Sims/SLiM_output/CG_files/")
require(ggplot2)
require(reshape2)
require(RColorBrewer)
colfunc<-colorRampPalette(c("orange","cyan"))
cg<-read.table("CG_Neut_100_1902845683137_Gen600.txt",header=F)
colnames(cg)<-paste("D",seq(1:100),sep="")
cg$Transplant<-rep(paste("T",seq(1:10),sep=""),10)
cg_df <- melt(cg,  id.vars ="Transplant",  variable.name = "Genotype",
value.name = "Fitness")
cg_df$Transplant<-factor(cg_df$Transplant,levels=cg_df$Transplant[1:10])
CI_bf <- gfTrans1$C.Imp_genome_before[1:10]
CI<-NULL
for(i in 1:length(CI_bf)){
for(j in 1:length(CI_bf)){
CI<-c(CI,CI_bf[j]-CI_bf[i])
}
}
CI_rep<-NULL
for (i in seq(1,100,10)){
CI_rep<-c(CI_rep,rep(CI[i:(i+9)],10))
}
CIm_bf <- gfM2Trans1$C.Imp_M2_before[1:10]
CIm<-NULL
for(i in 1:length(CIm_bf)){
for(j in 1:length(CIm_bf)){
CIm<-c(CIm,CIm_bf[j]-CIm_bf[i])
}
}
CIm_rep<-NULL
for (i in seq(1,100,10)){
CIm_rep<-c(CIm_rep,rep(CIm[i:(i+9)],10))
}
Home<-NULL
for(i in 1:10){
Home<-c(Home,rep(paste("H",i,sep=""),100))
}
cg_df$Home <- rep(Home,10)
cg_df$Home<-factor(cg_df$Home,levels=unique(cg_df$Home))
cg_df$D_CI<-CI_rep
cg_df$D_CIm<-CIm_rep
ggplot(data=cg_df,aes(x=cg_df$Fitness, y=abs(cg_df$D_CI), colour=cg_df$Transplant))+
geom_smooth(aes(x=cg_df$Fitness, y=abs(cg_df$D_CI)),method="lm",se = F)+
geom_point(aes(shape=cg_df$Home), size=3)+
labs(shape="Genotype", colour="Common\nGarden\nLocation")+
scale_color_manual(values = colfunc(10))+
scale_shape_manual(values=c(15,18,16,17,19,20,21,22,23,25))+
xlab("Relative Fitness in common garden")+
ylab("Absolute GF Offset (genome)")+
coord_flip()+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=cg_df,aes(x=cg_df$Fitness, y=abs(cg_df$D_CIm), colour=cg_df$Transplant))+
geom_smooth(aes(x=cg_df$Fitness, y=abs(cg_df$D_CIm)),method="lm",se = F)+
geom_point(aes(shape=cg_df$Home), size=3)+
labs(shape="Genotype", colour="Common\nGarden\nLocation")+
scale_color_manual(values = colfunc(10))+
scale_shape_manual(values=c(15,18,16,17,19,20,21,22,23,25))+
xlab("Relative Fitness in common garden")+
ylab("Absolute GF Offset (allele)")+
coord_flip()+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
dat_filt<-cg_df[cg_df$Transplant==c("T1","T5","T10"),]
dat_filt$D_CI<-abs(dat_filt$D_CI)
dat_filt[]
ggplot(data=dat_filt,aes(colour=Transplant))+
geom_smooth(aes(x=Fitness, y=D_CI), method="lm",se = F)+
geom_point(aes(x=Fitness, y=D_CI,shape=Home), size=3)+
labs(shape="Genotype", colour="Common\nGarden\nLocation")+
scale_color_manual(values = colfunc(3))+
scale_shape_manual(values=c(15,18,16,17,19,20,21,22,23,25))+
xlab("Relative Fitness in common garden")+
ylab("Absolute GF Offset (genome)")+
coord_flip()+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
ggplot(data=dat_filt,aes(x=Fitness, y=abs(D_CIm), colour=Transplant))+
geom_smooth(method="lm",se = F)+
geom_point(aes(shape=Home), size=3)+
labs(shape="Genotype", colour="Common\nGarden\nLocation")+
scale_color_manual(values = colfunc(3))+
scale_shape_manual(values=c(15,18,16,17,19,20,21,22,23,25))+
xlab("Relative Fitness in common garden")+
ylab("Absolute GF Offset (allele)")+
coord_flip()+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
dat_filt$D_CI<-abs(dat_filt$D_CI)
dat_filt[]
ggplot(data=dat_filt,aes(colour=Transplant))+
geom_smooth(aes(x=Fitness, y=D_CI), method="lm",se = F)+
geom_point(aes(x=Fitness, y=D_CI,shape=Home), size=3)+
labs(shape="Genotype", colour="Common\nGarden\nLocation")+
scale_color_manual(values = colfunc(3))+
scale_shape_manual(values=c(15,18,16,17,19,20,21,22,23,25))+
xlab("Relative Fitness in common garden")+
ylab("Absolute GF Offset (genome)")+
coord_flip()+
theme_classic()+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
