initialize() {
	//setSeed(1707249891095);
	defineConstant("my_seed", getSeed());
	defineConstant("s", 0.1); // Selection coefficient for local fitness gradient
	defineConstant("m", 0.1); // Set universal migration rate between populations
	defineConstant("n", 100); // Set universal deme population size
	defineConstant("r", 1e-06); // Set recombination rate
	//defineConstant("env", seq(-5,8,1)); // Set of environmental values 
	defineConstant("rate", 0.01); //Set rate at which environment changes
	defineConstant("Burnin", 300000); //Set the number of generations to "burn-in"
	defineConstant("Env_shift", 300300); //Set the generation in which the environment starts to shift
	
	initializeMutationRate(1e-7);
	
	initializeMutationType("m1", 0.5, "f", 0.0); // Neutral
	m1.convertToSubstitution = F;
	initializeMutationType("m2", 0.5, "f", 0.0); // Mutation under selection across an environmental
	m2.convertToSubstitution = F;
	//m2.mutationStackPolicy = "f";
	
	initializeGenomicElementType("g0", m1, 1);
	initializeGenomicElementType("g1", m1, 1); // Genomic element 
	//initializeGenomicElementType("g1", m2, 0);
	
	// chromosome 1
	initializeGenomicElement(g1, 0, 49999);
	
	// chromosome 2
	initializeGenomicElement(g0, 50000, 99999);
	
	// chromosome 3
	initializeGenomicElement(g1, 100000, 149999);
	
	// chromosome 4
	initializeGenomicElement(g0, 150000, 199999);
	
	// chromosome 5
	initializeGenomicElement(g1, 200000, 249999);
	
	// chromosome 6
	initializeGenomicElement(g0, 250000, 299999);
	
	// chromosome 7
	initializeGenomicElement(g1, 300000, 349999);
	
	// chromosome 8
	initializeGenomicElement(g0, 350000, 399999);
	
	// chromosome 9
	initializeGenomicElement(g1, 400000, 449999);
	
	// chromosome 10
	initializeGenomicElement(g0, 450000, 499999);
	
	// initilize recombination rates and ends
	initializeRecombinationRate(c(rep(c(r, 0.5), 9), r),
		ends=c(49999, 50000, 99999, 100000, 149999, 150000, 199999, 200000, 249999, 250000, 299999, 300000, 349999, 350000, 399999, 400000, 449999, 450000, 499999));
	
	initializeSex("A"); //Set each population to contain two autosomal sexes that must reproduce to yield next generation
	
	//initializeTreeSeq();
	//simplificationRatio=INF);
}

300000 late() {
	target = sample(p19.genomes, 1);
	target.addNewMutation(m2, 0.0, 224999);
}

//10 by 10 matrix of populations
1 {
	metapopSide = 10; // Number of subpops along one side of the grid, in this case 5
	metapopSize = metapopSide * metapopSide; // Create a full 10 by 10 matrix 
	for (i in 1:metapopSize)
		sim.addSubpop(i, n);
	subpops = sim.subpopulations;
	for (x in 1:metapopSide)
		for (y in 1:metapopSide)
		{
			destID = (x - 1) + (y - 1) * metapopSide + 1;
			destSubpop = subpops[destID - 1];
			if (x > 1) // Left to right
				destSubpop.setMigrationRates(destID - 1, m);
			if (x < metapopSide) // Right to left
				destSubpop.setMigrationRates(destID + 1, m);
			if (y > 1) // Top to bottom
				destSubpop.setMigrationRates(destID - metapopSide, m);
			if (y < metapopSide) // Bottom to top
				destSubpop.setMigrationRates(destID + metapopSide, m);
			destSubpop.setValue("xc", x);
			
			xd = ((x - 1) / (metapopSide - 1)) * 0.9 + 0.05;
			yd = ((y - 1) / (metapopSide - 1)) * 0.9 + 0.05;
			//destSubpop.configureDisplay(c(xd, yd), 0.4);
		}
	
	//sim.rescheduleScriptBlock(s1, Burnin);
	//sim.rescheduleScriptBlock(s2, Burnin, Sim_Len);
	//sim.rescheduleScriptBlock(s3, Sim_Len);
}

299999 late() {
	sim.outputFull("slim_temp_" + my_seed + ".txt");
}

//10 by 10 matrix of populations
300000 early(){
	metapopSide = 10; // Number of subpops along one side of the grid, in this case 5
	metapopSize = metapopSide * metapopSide; // Create a full 10 by 10 matrix 
	for (i in 1:metapopSize)
		//sim.addSubpop(i, n);
		subpops = sim.subpopulations;
	for (x in 1:metapopSide)
		for (y in 1:metapopSide)
		{
			destID = (x - 1) + (y - 1) * metapopSide + 1;
			destSubpop = subpops[destID - 1];
			if (x > 1) // Left to right
				destSubpop.setMigrationRates(destID - 1, m);
			if (x < metapopSide) // Right to left
				destSubpop.setMigrationRates(destID + 1, m);
			if (y > 1) // Top to bottom
				destSubpop.setMigrationRates(destID - metapopSide, m);
			if (y < metapopSide) // Bottom to top
				destSubpop.setMigrationRates(destID + metapopSide, m);
			destSubpop.setValue("xc", x);
			
			xd = ((x - 1) / (metapopSide - 1)) * 0.9 + 0.05;
			yd = ((y - 1) / (metapopSide - 1)) * 0.9 + 0.05;
			//destSubpop.configureDisplay(c(xd, yd), 0.4);
		}
}

late () {
	d = sim.subpopulations.getValue("xc")-1;
	for (i in sim.subpopulations)
	{
		d_sub = i.getValue("xc") - 1;
		if (sim.generation<=Env_shift)
			env = d-4.5;
		else
			env = d-4.5+rate*(sim.generation-Env_shift);
		
		i.setValue("Env", env[d_sub]);
	}
}


//Set fitness for each population based on 10x10 grid.
fitness(m2) {
	
	d_sub = subpop.getValue("xc") - 1;
	d = sim.subpopulations.getValue("xc")-1;
	
	if (sim.generation<=Env_shift)
		env = d-4.5;
	else
		env = d-4.5+rate*(sim.generation-Env_shift);
	
	//	subpop.setValue("Env", env[d_sub]);
	
	if (env[d_sub]<5)
		if (homozygous)
			return 1 + s*env[d_sub];
		else
			return 1 + 0.5*s*env[d_sub];
	else
		if (homozygous)
		return 1 + s*4 + -3*s*(env[d_sub]-4);
	else
		return 1 + s*0.5*4 + -3*s*0.5*(env[d_sub]-4);
}

300000:300600 late() {
	if (size(sim.subpopulations.genomes.mutationsOfType(m2)) == 0)
	{
		// Stop at extinction
		catn("Extinction in generation " + sim.generation + ".");
		//sim.simulationFinished();
		sim.readFromPopulationFile("slim_temp_" + my_seed  + ".txt");
		setSeed(getSeed() + 1);
	}
}

300000:300600 early(){
	//inds = sim.subpopulations.individuals;
	pops = sim.subpopulations;
	if (sim.generation % 10 == 0){
		// get positions of all m2 mutations and store in Q
		//g = sim.subpopulations.genomes;
		// get the unique mutations in the sample, sorted by position		
		//o = sortBy(unique(g.mutationsOfType(m2)), "position"); 
		mut = sim.mutationsOfType(m2);
		
		fit=c();
		for (i in pops){
			fit = c(fit,mean(i.cachedFitness(NULL)));
		}
		
		freq=c();
		for (i in 0:(size(sim.subpopulations)-1)){
			freq = c(freq,size(sim.subpopulations[i].genomes.mutationsOfType(m2))/size(sim.subpopulations[i].genomes));
		}
		
		env=c();
		for (i in 0:(size(sim.subpopulations)-1)){
			env=c(env,sim.subpopulations[i].getValue("Env"));
		}
		info=paste(c(s,m,n,r,sim.chromosome.mutationRates,rate,Burnin,Env_shift));
		out = paste(c(info,sim.generation, fit, freq, env));
		writeFile(paste(c("Fit_SP_100_", getSeed(), ".txt"), sep=""), out, append=T);
	}
}

300300 early(){
sim.subpopulations.genomes.outputVCF(paste(c("TTT_SP_100_", getSeed(), "_Gen",sim.generation,".vcf"), sep=""));	
}

300600 early(){
sim.subpopulations.genomes.outputVCF(paste(c("TTT_SP_100_", getSeed(), "_Gen",sim.generation,".vcf"), sep=""));
}
	
