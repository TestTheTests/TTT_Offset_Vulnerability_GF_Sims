import pyslim, msprime
import numpy as np
NODE_IS_SAMPLE = np.array(msprime.NODE_IS_SAMPLE, dtype='uint32')

T2 = pyslim.load("recipe_16.1_T2.trees")

recapT2 = T2.recapitate(recombination_rate = 1e-08, Ne=500, random_seed=1)
mutatedT2 = pyslim.SlimTreeSequence(msprime.mutate(recapT2, rate=1e-7, random_seed=1, keep=True))

set(mutatedT2.individual_times)

T1ind = mutatedT2.individuals_alive_at(200)
T2ind = mutatedT2.individuals_alive_at(0)

node_samplesT1 = []
samplesT1 = []
node_samplesT2 = []
samplesT2 = []

for ind in T1ind:
    nodes = []
    nodes.extend(mutatedT2.individual(ind).nodes)
    node_samplesT1.append(nodes)
    samplesT1.extend(nodes)

for ind in T2ind:
    nodes = []
    nodes.extend(mutatedT2.individual(ind).nodes)
    node_samplesT2.append(nodes)
    samplesT2.extend(nodes)

def mark_samples(ts, samples, keep=True):
    '''
    Returns the same tree sequence except with the the nodes listed in `samples`
    marked as samples (keeping existing samples if `keep` is True).
    '''
    if (min(samples) < 0) or (max(samples) >= ts.num_nodes):
        raise ValueError("Illegal samples.")
    tables = ts.dump_tables()
    flags = tables.nodes.flags
    if not keep:
        flags = np.bitwise_or(flags, (~ NODE_IS_SAMPLE))
    flags[samples] = np.bitwise_or(flags[samples], NODE_IS_SAMPLE)
    tables.nodes.set_columns(flags=flags, population=tables.nodes.population,
                             individual=tables.nodes.individual, time=tables.nodes.time,
                             metadata=tables.nodes.metadata,
                             metadata_offset=tables.nodes.metadata_offset)
    ts = tables.tree_sequence()
    return ts

subT1_ts = pyslim.SlimTreeSequence(mark_samples(mutatedT2, samplesT1, keep=False))
subT1_ts = pyslim.SlimTreeSequence(mark_samples(mutatedT2, samplesT2, keep=False))

with open("T1.vcf", "w") as vcf_file:
    subT1_ts.write_vcf(vcf_file,2)

with open("T2.vcf", "w") as vcf_file:
    subT2_ts.write_vcf(vcf_file,2)
